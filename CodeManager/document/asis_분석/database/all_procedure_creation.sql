DROP PROCEDURE PROC_HD_BASC_CREATE;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_CREATE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_square       NUMBER(8, 4);
c_type         VARCHAR2(4);
c_class        VARCHAR2(1);
c_options      VARCHAR2(2);
c_buildno      VARCHAR2(10);
c_sf           NUMBER(2);
c_ef           NUMBER(2);
c_sh           NUMBER(2);
c_eh           NUMBER(2);
c_seq          NUMBER(3);
c_vattag       VARCHAR2(1);
c_area1        NUMBER(12, 4);
c_area2        NUMBER(12, 4);
c_area3        NUMBER(12, 4);
c_area4        NUMBER(12, 4);
c_area5        NUMBER(12, 4);
c_area6        NUMBER(12, 4);

cur_f          NUMBER(2);
cur_h          NUMBER(2);

/*---------------------------------------------------------------------------*/
v_cnt          NUMBER(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT A.SQUARE, A.TYPE, A.CLASS, A.OPTIONS, A.START_BUILDNO,
       TO_NUMBER(SUBSTR(A.START_HOUSENO, 1, 2)) AS SF,
       TO_NUMBER(SUBSTR(A.END_HOUSENO, 1, 2)) AS EF,
       TO_NUMBER(SUBSTR(A.START_HOUSENO, 3, 2)) AS SH,
       TO_NUMBER(SUBSTR(A.END_HOUSENO, 3, 2)) AS EH,
       B.VATTAG,
       B.SEQ,
       B.EXCLUSIVEAREA,
       B.COMMONAREA,
       B.ETCCOMMONAREA,
       B.PARKINGAREA,
       B.SERVICEAREA,
       B.SITEAREA
  FROM HD_REFER_SELLCREATE A,
       HD_REFER_SQUARE B
 WHERE A.DEPT_CODE = B.DEPT_CODE
   AND A.HOUSETAG  = B.HOUSETAG
   AND A.SQUARE    = B.SQUARE
   AND A.TYPE      = B.TYPE
   AND A.CLASS     = B.CLASS
   AND A.OPTIONS   = B.OPTIONCODE
   AND A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   BEGIN
      DELETE HD_REFER_SELLDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '기존 세대별 약정을 삭제하는중 오류가 발생했습니다.');
                ROLLBACK;
                RETURN;
   END;

   BEGIN
      DELETE HD_HOUS_SUPPLY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '기존 세대별 공급내역을 삭제하는중 오류가 발생했습니다.');
                ROLLBACK;    
                 RETURN;
   END;

   OPEN CURMAKE(as_dept, as_htag);
   LOOP
      FETCH CURMAKE 
       INTO c_square,  c_type,    c_class, c_options, c_buildno,
            c_sf,      c_ef,      c_sh,    c_eh,
            c_vattag,  c_seq,
            c_area1,   c_area2,   c_area3, c_area4,
            c_area5,   c_area6;
      EXIT WHEN CURMAKE%NOTFOUND;

      cur_f := c_sf;
      LOOP
         IF cur_f > c_ef THEN
            EXIT;
         END IF;
         
         cur_h := c_sh;
         LOOP
            IF cur_h > c_eh THEN
               EXIT;
            END IF;
            
--           dbms_output.put_line('동: ' || c_buildno || '     층:' || TO_CHAR(cur_f, 'fm00') || '    호:' || TO_CHAR(cur_h, 'fm00'));

            BEGIN
               INSERT INTO HD_HOUS_SUPPLY
                          (DEPT_CODE,     HOUSETAG,      BUILDNO,       HOUSENO,
                           SQUARE,        PRTSQUARE,     TYPE,          CLASS,        OPTIONCODE,  VATTAG,
                           EXCLUSIVEAREA, COMMONAREA,    ETCCOMMONAREA, PARKINGAREA,  SERVICEAREA, SITEAREA,
                           FLOOR,
                           GUBUN,         CONTRACTYESNO, CATEGORY_NAME, VIRDEPOSIT,   USE_YN,      RENT_TAG,
                           INPUT_DUTY_ID, INPUT_DATE,    VIRDEPOSIT2)
                   VALUES (as_dept,       as_htag,       c_buildno,     TO_CHAR(cur_f, 'fm00') || TO_CHAR(cur_h, 'fm00'),
                           c_square,      c_square,      c_type,        c_class,      c_options,   c_vattag,
                           c_area1,       c_area2,       c_area3,       c_area4,      c_area5,     c_area6,
                           TO_CHAR(cur_f),
                           '',            'N',            '',           '',           'Y',         'N',
                           as_user,       TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), '');
                  EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line('HD_HOUS_SUPPLY:' || sqlerrm); 
--                            dbms_output.put_line('err 동: ' || c_buildno || '     층:' || TO_CHAR(cur_f, 'fm00') || '    호:' || TO_CHAR(cur_h, 'fm00'));
                            ROLLBACK;
                            RETURN;
            END;

            BEGIN
               INSERT INTO HD_REFER_SELLDETAIL
                          (DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                           COUNTS,        AGREEDATE,
                           AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT, MANAGEAMT,
                           DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                           INPUT_DUTY_ID, INPUT_DATE)
                    SELECT as_dept,       as_htag,    c_buildno,       TO_CHAR(cur_f, 'fm00') || TO_CHAR(cur_h, 'fm00'),
                           COUNTS,        AGREEDATE,
                           BAMT,          LANDAMT,    BUILDAMT,        VATAMT, MANAGEAMT,
                           DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                           as_user,       TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                      FROM HD_REFER_SQUAREDETAIL
                     WHERE DEPT_CODE = as_dept
                       AND HOUSETAG  = as_htag
                       AND SEQ       = c_seq;
                  EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line('HD_REFER_SELLDETAIL:' || sqlerrm); 
--                            dbms_output.put_line('err 동: ' || c_buildno || '     층:' || TO_CHAR(cur_f, 'fm00') || '    호:' || TO_CHAR(cur_h, 'fm00'));
                            ROLLBACK;
            END;
            cur_h := cur_h + 1;
         END LOOP;
         cur_f := cur_f + 1;
      END LOOP;

   END LOOP;
   CLOSE CURMAKE;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_BASC_HOUSE;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_HOUSE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt           VARCHAR2(14);
v_sysdate         VARCHAR2(8);

/*---------------------------------------------------------------------------*/
t_cnt             NUMBER(15);
t_seq             NUMBER(3);

/*---------------------------------------------------------------------------*/
c_dept_code       VARCHAR2(12);
c_housetag        VARCHAR2(1);
c_buildno         VARCHAR2(10);
c_houseno         VARCHAR2(10);
c_square          NUMBER(8,4);
c_type            VARCHAR2(4);
c_class           VARCHAR2(1);
c_optioncode      VARCHAR2(2);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT B.DEPT_CODE,
       B.HOUSETAG,
       B.BUILDNO,
       B.HOUSENO,
       B.SQUARE,
       B.TYPE,
       B.CLASS,
       B.OPTIONCODE
  FROM (SELECT DEPT_CODE, HOUSETAG, SQUARE, TYPE, CLASS, OPTIONCODE, MIN(BUILDNO || '__' || HOUSENO) AS BHNO
          FROM HD_HOUS_SUPPLY
         WHERE DEPT_CODE = a_dept
           AND HOUSETAG  = a_htag
         GROUP BY DEPT_CODE, HOUSETAG, SQUARE, TYPE, CLASS, OPTIONCODE  
       ) A,
       HD_HOUS_SUPPLY B
 WHERE A.DEPT_CODE = B.DEPT_CODE
   AND A.HOUSETAG  = B.HOUSETAG
   AND A.BHNO      = B.BUILDNO || '__' || B.HOUSENO
   AND NOT EXISTS (SELECT 1
                     FROM HD_REFER_SQUARE C
                    WHERE C.DEPT_CODE  = B.DEPT_CODE
                      AND C.HOUSETAG   = B.HOUSETAG
                      AND C.SQUARE     = B.SQUARE
                      AND C.TYPE       = B.TYPE
                      AND C.CLASS      = B.CLASS
                      AND C.OPTIONCODE = B.OPTIONCODE
                  );

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_HOUS_SELL A,
          HD_SUPPLY_CONV B
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND A.BUILDNO   = B.BUILDNO
      AND A.HOUSENO   = B.HOUSENO; 
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 계약세대나 변경(해약, 동호변경)된 세대가 존재 합니다.');
      ROLLBACK;
      RETURN;
   END IF;

   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_RENT_DONGHO A,
          HD_SUPPLY_CONV B
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND A.BUILDNO   = B.BUILDNO
      AND A.HOUSENO   = B.HOUSENO; 
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 임대관리중인 세대가 존재 합니다.');
      ROLLBACK;
      RETURN;
   END IF;

/* 2014-07-15 : 분양구분이 옵션인 경우  동호만 생성하기 위해 임시로 막음 */
   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_SUPPLY_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NVL(TOT_SUPPLYAMT, 0) = 0;
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '총공급가가 0인 세대가 있습니다');
      ROLLBACK;
      RETURN;
   END IF;


   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_SUPPLY_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_COMM
                       WHERE GUBUN = '16'
                         AND HD_SUPPLY_CONV.OPTIONS = CODE
                     );    
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '존재하지 않는 사양코드가 있습니다');
      ROLLBACK;
      RETURN;
   END IF;

   t_cnt := 0;
   SELECT SUM(NVL(TOT_SUPPLYAMT, 0)) - (SUM(NVL(TOT_LANDAMT, 0)) + SUM(NVL(TOT_BUILDAMT, 0)) + SUM(NVL(TOT_VATAMT, 0)) + SUM(NVL(TOT_MANAGEAMT, 0)))
     INTO t_cnt
     FROM HD_SUPPLY_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;
   IF t_cnt <> 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '총공급가와 토지, 건물, 부가세, 관리비의 합이 서로 다른 세대가 존재합니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*---------------------------------------------------------------------------*/
   v_sysdt   := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_sysdate := TO_CHAR(SYSDATE, 'YYYYMMDD');

   /*---------------------------------------------------------------------------*/
   /* 기존자료 삭제 */
   BEGIN
      DELETE HD_REFER_SELLDETAIL
       WHERE EXISTS (SELECT 1
                       FROM HD_SUPPLY_CONV A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                        AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                        AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                        AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                    );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 01:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      DELETE HD_HOUS_SUPPLY
       WHERE EXISTS (SELECT 1
                       FROM HD_SUPPLY_CONV A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.DEPT_CODE = HD_HOUS_SUPPLY.DEPT_CODE
                        AND A.HOUSETAG  = HD_HOUS_SUPPLY.HOUSETAG
                        AND A.BUILDNO   = HD_HOUS_SUPPLY.BUILDNO
                        AND A.HOUSENO   = HD_HOUS_SUPPLY.HOUSENO
                    );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 02:HD_HOUS_SUPPLY' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 콘도가 아닌경우 원본데이타의 잘못된 금액 수정 */
   IF as_htag NOT IN ('C', 'D') THEN  BEGIN
      UPDATE HD_SUPPLY_CONV
         SET TOT_MANAGEAMT = 0,
             TOT_SUPPLYAMT = TOT_LANDAMT + TOT_BUILDAMT + TOT_VATAMT,
             AMT00_M       = 0,
             AMT01_M       = 0,
             AMT02_M       = 0,
             AMT11_M       = 0,
             AMT12_M       = 0,
             AMT13_M       = 0,
             AMT14_M       = 0,
             AMT15_M       = 0,
             AMT16_M       = 0,
             AMT17_M       = 0,
             AMT18_M       = 0,
             AMT19_M       = 0,
             AMT20_M       = 0,
             AMT90_M       = 0
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 03:HD_SUPPLY_CONV' || SQLERRM);
            ROLLBACK;
            RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   /* 공급내역 */
   BEGIN
      INSERT INTO HD_HOUS_SUPPLY
                ( DEPT_CODE,     HOUSETAG,    BUILDNO,        HOUSENO,
                  SQUARE,        PRTSQUARE,   TYPE,           CLASS,         OPTIONCODE,
                  VATTAG,
                  EXCLUSIVEAREA, COMMONAREA,  ETCCOMMONAREA,  PARKINGAREA,
                  SERVICEAREA,   SITEAREA,
                  FLOOR,         GUBUN,       CATEGORY_NAME,  CONTRACTYESNO,
                  VIRDEPOSIT,    BANK_CODE,   BANK_NAME,      USE_YN,
                  RENT_TAG,      VIRDEPOSIT2,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,    CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,    BUILDNO,        HOUSENO,
                  SQUARE,        SQUARE,      NVL(TYPE, ' '), CLASS,         OPTIONS,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END,
                  EXCLUSIVEAREA, COMMONAREA,  ETCCOMMONAREA,  PARKINGAREA,
                  SERVICEAREA,   SITEAREA,
                  '',            '',          '',             'N',
                  '',            '',          '',             'Y',
                  'N',           '',
                  as_user,       'NEW',       '',             ''
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 04:HD_HOUS_SUPPLY' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 00차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '00',          'X',
                  AMT00,         AMT00_L,    AMT00_B,         AMT00_V,     AMT00_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT00 <> AMT00_L + AMT00_B + AMT00_V + AMT00_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT00, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 05:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 01차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '01',          'X',
                  AMT01,         AMT01_L,    AMT01_B,         AMT01_V,     AMT01_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT01 <> AMT01_L + AMT01_B + AMT01_V + AMT01_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT01, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 06:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 02차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '02',          'X',
                  AMT02,         AMT02_L,    AMT02_B,         AMT02_V,     AMT02_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT02 <> AMT02_L + AMT02_B + AMT02_V + AMT02_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT02, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 07:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 11차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '11',          'X',
                  AMT11,         AMT11_L,    AMT11_B,         AMT11_V,     AMT11_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT11 <> AMT11_L + AMT11_B + AMT11_V + AMT11_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT11, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 08:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 12차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '12',          'X',
                  AMT12,         AMT12_L,    AMT12_B,         AMT12_V,     AMT12_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT12 <> AMT12_L + AMT12_B + AMT12_V + AMT12_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT12, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 09:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 13차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '13',          'X',
                  AMT13,         AMT13_L,    AMT13_B,         AMT13_V,     AMT13_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT13 <> AMT13_L + AMT13_B + AMT13_V + AMT13_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT13, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 10:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 14차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '14',          'X',
                  AMT14,         AMT14_L,    AMT14_B,         AMT14_V,     AMT14_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT14 <> AMT14_L + AMT14_B + AMT14_V + AMT14_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT14, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 11:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 15차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '15',          'X',
                  AMT15,         AMT15_L,    AMT15_B,         AMT15_V,     AMT15_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT15 <> AMT15_L + AMT15_B + AMT15_V + AMT15_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT15, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 12:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 16차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '16',          'X',
                  AMT16,         AMT16_L,    AMT16_B,         AMT16_V,     AMT16_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT16 <> AMT16_L + AMT16_B + AMT16_V + AMT16_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT16, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 13:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 17차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '17',          'X',
                  AMT17,         AMT17_L,    AMT17_B,         AMT17_V,     AMT17_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT17 <> AMT17_L + AMT17_B + AMT17_V + AMT17_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT17, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 14:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 18차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '18',          'X',
                  AMT18,         AMT18_L,    AMT18_B,         AMT18_V,     AMT18_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT18 <> AMT18_L + AMT18_B + AMT18_V + AMT18_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT18, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 15:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 19차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '19',          'X',
                  AMT19,         AMT19_L,    AMT19_B,         AMT19_V,     AMT19_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT19 <> AMT19_L + AMT19_B + AMT19_V + AMT19_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT19, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 16:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 20차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '20',          'X',
                  AMT20,         AMT20_L,    AMT20_B,         AMT20_V,     AMT20_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT20 <> AMT20_L + AMT20_B + AMT20_V + AMT20_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT20, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 17:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 90차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,    BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,     BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,       DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,    BUILDNO,         HOUSENO,
                  '90',          'X',
                  AMT90,         TOT_LANDAMT, TOT_BUILDAMT,    TOT_VATAMT,  TOT_MANAGEAMT,
                  'X',           'X',         0,
                  as_user,       'NEW',
                  '',
                  ''
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT90, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 18:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /** 안분 방법 **/
   /* 1.총약정금액에대한 총관리비 비율로 모든약정의 관리비를 산출 */
   /* 2.총토건부합계에대한 총건물가의 비율로 모든약정의 건물가 산출 */
   /* 3.부가세는 각차수약정별로 건물가의 10% 산출 */
   /* 4.각약정차수별로 약정금액-건물가-부가세-관리비를 토지가로 산출 */
   /* 5.총약정토건부관 금액과 실제 약정차수별 합계의 차익을 마지막차수에 반영 */

   /*---------------------------------------------------------------------------*/
   /* 1.약정의 관리비 */
   IF as_htag IN ('C', 'D') THEN BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET MANAGEAMT   = TRUNC((AGREEAMT * (SELECT DECODE(TOT_SUPPLYAMT, 0, 0, (TOT_MANAGEAMT / TOT_SUPPLYAMT))
                                                FROM HD_SUPPLY_CONV
                                               WHERE DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                                 AND HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                                 AND BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                                 AND HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO)) / 10) * 10
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 19:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END; ELSE BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET MANAGEAMT   = 0
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 20:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   /* 2.약정의 건물가 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET BUILDAMT = TRUNC(((AGREEAMT - MANAGEAMT) * (SELECT DECODE(TOT_LANDAMT + TOT_BUILDAMT + TOT_VATAMT, 0, 0, (TOT_BUILDAMT / (TOT_LANDAMT + TOT_BUILDAMT + TOT_VATAMT)))
                                                           FROM HD_SUPPLY_CONV
                                                          WHERE DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                                            AND HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                                            AND BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                                            AND HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                                        )) / 10) * 10
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 21:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 3.약정의 부가세 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET VATAMT = CASE WHEN CHG_DATE = 'N' THEN 0 ELSE BUILDAMT / 10 END
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 22:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 4.약정의 토지가 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET LANDAMT     = AGREEAMT - BUILDAMT - VATAMT - MANAGEAMT
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 23:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*잔금차수 토건부관 변경 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET LANDAMT   = LANDAMT   - (SELECT SUM(A.LANDAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90'),
             BUILDAMT  = BUILDAMT  - (SELECT SUM(A.BUILDAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90'),
             VATAMT    = VATAMT    - (SELECT SUM(A.VATAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90'),
             MANAGEAMT = MANAGEAMT - (SELECT SUM(A.MANAGEAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90')   
       WHERE DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag
         AND COUNTS     = '90'
         AND INPUT_DATE = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 24:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정일setting */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET AGREEDATE       = (SELECT NVL(MAX(A.AGREEDATE), v_sysdate)
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             DC_YN           = (SELECT NVL(MAX(A.DC_YN), DECODE(MAX(HD_REFER_SELLDETAIL.COUNTS), '00', 'N', 'Y'))
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             AC_YN           = (SELECT NVL(MAX(A.AC_YN), DECODE(MAX(HD_REFER_SELLDETAIL.COUNTS), '00', 'N', 'Y'))
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             DISTRIBUTE_RATE = (SELECT DISTRIBUTE_RATE
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             INPUT_DATE      = v_sysdt,
             CHG_DUTY_ID     = '',
             CHG_DATE        = ''
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INPUT_DATE = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 25:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET INPUT_DATE = v_sysdt
       WHERE DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag
         AND INPUT_DATE = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 26:HD_HOUS_SUPPLY' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*약정의 합계와 총합계가 틀린지 판단 */
   t_cnt := 0;
   SELECT SUM(TAMT) - SUM(AAMT)
     INTO t_cnt
     FROM (SELECT A.BUILDNO,
                  A.HOUSENO,
                  A.TOT_SUPPLYAMT AS TAMT,
                  NVL(SUM(B.AGREEAMT), 0) AS AAMT
             FROM HD_SUPPLY_CONV A,
                  HD_REFER_SELLDETAIL B
            WHERE A.DEPT_CODE = as_dept
              AND A.HOUSETAG  = as_htag
              AND A.DEPT_CODE = B.DEPT_CODE (+)
              AND A.HOUSETAG  = B.HOUSETAG  (+)
              AND A.BUILDNO   = B.BUILDNO   (+)
              AND A.HOUSENO   = B.HOUSENO   (+)
            GROUP BY A.BUILDNO, A.HOUSENO, A.TOT_SUPPLYAMT
          );
   IF t_cnt <> 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '총분양금액과 약정금액의 합이 다릅니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   /* 1. 면적별 약정 삭제 */
   /* 2. 면적별 정보 삭제 */
   /* 3. 면적별 정보 생성 */
   /* 4. 면적별 약정 생성 */
   BEGIN
      DELETE HD_REFER_SQUAREDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 27:HD_REFER_SQUAREDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      DELETE HD_REFER_SQUARE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 28:HD_REFER_SQUARE' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   OPEN CURMAKE(as_dept, as_htag);
   LOOP
      FETCH CURMAKE 
       INTO c_dept_code, c_housetag, c_buildno, c_houseno,
            c_square,    c_type,     c_class,   c_optioncode;
      EXIT WHEN CURMAKE%NOTFOUND;

      t_seq := 0;
      SELECT NVL(MAX(SEQ), 0) + 1
        INTO t_seq
        FROM HD_REFER_SQUARE
       WHERE DEPT_CODE = c_dept_code
         AND HOUSETAG  = c_housetag ;

      BEGIN
         INSERT INTO HD_REFER_SQUARE
                    (DEPT_CODE,       HOUSETAG,        SEQ,
                     SQUARE,          TYPE,            CLASS,           OPTIONCODE,       VATTAG,
                     EXCLUSIVEAREA,   COMMONAREA,      ETCCOMMONAREA,
                     PARKINGAREA,     SERVICEAREA,     SITEAREA,
                     LANDAMT,         BUILDAMT,        VATAMT,          MANAGEAMT,        TOT_BAMT,
                     INPUT_DUTY_ID,   INPUT_DATE,      CHG_DUTY_ID,     CHG_DATE,
                     PRTSQUARE )
              SELECT c_dept_code,     c_housetag,      t_seq,
                     A.SQUARE,        A.TYPE,          A.CLASS,         A.OPTIONCODE,     A.VATTAG,
                     A.EXCLUSIVEAREA, A.COMMONAREA,    A.ETCCOMMONAREA,
                     A.PARKINGAREA,   A.SERVICEAREA,   A.SITEAREA,
                     SUM(B.LANDAMT),  SUM(B.BUILDAMT), SUM(B.VATAMT),   SUM(B.MANAGEAMT), SUM(B.LANDAMT) + SUM(B.BUILDAMT) + SUM(B.VATAMT) + SUM(B.MANAGEAMT),
                     as_user,         v_sysdt,         '',              '',
                     A.PRTSQUARE
                FROM HD_HOUS_SUPPLY A,
                     HD_REFER_SELLDETAIL B
               WHERE A.DEPT_CODE = c_dept_code
                 AND A.HOUSETAG  = c_housetag
                 AND A.BUILDNO   = c_buildno
                 AND A.HOUSENO   = c_houseno
                 AND A.DEPT_CODE = B.DEPT_CODE
                 AND A.HOUSETAG  = B.HOUSETAG
                 AND A.BUILDNO   = B.BUILDNO
                 AND A.HOUSENO   = B.HOUSENO
               GROUP BY A.SQUARE,        A.TYPE,          A.CLASS,         A.OPTIONCODE, A.VATTAG,
                        A.EXCLUSIVEAREA, A.COMMONAREA,    A.ETCCOMMONAREA,
                        A.PARKINGAREA,   A.SERVICEAREA,   A.SITEAREA,      A.PRTSQUARE;
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.PUT_LINE(SQLERRM); 
               RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 29:HD_REFER_SQUARE' || SQLERRM);
               ROLLBACK;
               RETURN;
      END;

      BEGIN
         INSERT INTO HD_REFER_SQUAREDETAIL
                    (DEPT_CODE,     HOUSETAG,   SEQ,             COUNTS,
                     AGREEDATE,     LANDAMT,    BUILDAMT,        VATAMT,   MANAGEAMT, BAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE )
              SELECT DEPT_CODE,     HOUSETAG,   t_seq,           COUNTS,
                     AGREEDATE,     LANDAMT,    BUILDAMT,        VATAMT,   MANAGEAMT, AGREEAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     as_user,       v_sysdt,    '',              ''
                FROM HD_REFER_SELLDETAIL
               WHERE DEPT_CODE = c_dept_code
                 AND HOUSETAG  = c_housetag
                 AND BUILDNO   = c_buildno
                 AND HOUSENO   = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.PUT_LINE(SQLERRM); 
               RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 30:HD_REFER_SQUAREDETAIL' || SQLERRM);
               ROLLBACK;
               RETURN;
      END;
   END LOOP;
   CLOSE CURMAKE;

   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             DBMS_OUTPUT.PUT_LINE(SQLCODE || ':' || SQLERRM);
             RAISE_APPLICATION_ERROR( -20001,  SQLCODE || ':' || SQLERRM);
END;
/


DROP PROCEDURE PROC_HD_BASC_HOUSE_20140715;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_HOUSE_20140715" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt           VARCHAR2(14);
v_sysdate         VARCHAR2(8);

/*---------------------------------------------------------------------------*/
t_cnt             NUMBER(15);
t_seq             NUMBER(3);

/*---------------------------------------------------------------------------*/
c_dept_code       VARCHAR2(12);
c_housetag        VARCHAR2(1);
c_buildno         VARCHAR2(10);
c_houseno         VARCHAR2(10);
c_square          NUMBER(8,4);
c_type            VARCHAR2(4);
c_class           VARCHAR2(1);
c_optioncode      VARCHAR2(2);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT B.DEPT_CODE,
       B.HOUSETAG,
       B.BUILDNO,
       B.HOUSENO,
       B.SQUARE,
       B.TYPE,
       B.CLASS,
       B.OPTIONCODE
  FROM (SELECT DEPT_CODE, HOUSETAG, SQUARE, TYPE, CLASS, OPTIONCODE, MIN(BUILDNO || '__' || HOUSENO) AS BHNO
          FROM HD_HOUS_SUPPLY
         WHERE DEPT_CODE = a_dept
           AND HOUSETAG  = a_htag
         GROUP BY DEPT_CODE, HOUSETAG, SQUARE, TYPE, CLASS, OPTIONCODE  
       ) A,
       HD_HOUS_SUPPLY B
 WHERE A.DEPT_CODE = B.DEPT_CODE
   AND A.HOUSETAG  = B.HOUSETAG
   AND A.BHNO      = B.BUILDNO || '__' || B.HOUSENO
   AND NOT EXISTS (SELECT 1
                     FROM HD_REFER_SQUARE C
                    WHERE C.DEPT_CODE  = B.DEPT_CODE
                      AND C.HOUSETAG   = B.HOUSETAG
                      AND C.SQUARE     = B.SQUARE
                      AND C.TYPE       = B.TYPE
                      AND C.CLASS      = B.CLASS
                      AND C.OPTIONCODE = B.OPTIONCODE
                  );

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_HOUS_SELL A,
          HD_SUPPLY_CONV B
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND A.BUILDNO   = B.BUILDNO
      AND A.HOUSENO   = B.HOUSENO; 
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 계약세대나 변경(해약, 동호변경)된 세대가 존재 합니다.');
      ROLLBACK;
      RETURN;
   END IF;

   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_RENT_DONGHO A,
          HD_SUPPLY_CONV B
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND A.BUILDNO   = B.BUILDNO
      AND A.HOUSENO   = B.HOUSENO; 
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 임대관리중인 세대가 존재 합니다.');
      ROLLBACK;
      RETURN;
   END IF;

   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_SUPPLY_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NVL(TOT_SUPPLYAMT, 0) = 0;
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '총공급가가 0인 세대가 있습니다');
      ROLLBACK;
      RETURN;
   END IF;

   t_cnt := 0;
   SELECT COUNT(*)
     INTO t_cnt
     FROM HD_SUPPLY_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_COMM
                       WHERE GUBUN = '16'
                         AND HD_SUPPLY_CONV.OPTIONS = CODE
                     );    
   IF t_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '존재하지 않는 사양코드가 있습니다');
      ROLLBACK;
      RETURN;
   END IF;

   t_cnt := 0;
   SELECT SUM(NVL(TOT_SUPPLYAMT, 0)) - (SUM(NVL(TOT_LANDAMT, 0)) + SUM(NVL(TOT_BUILDAMT, 0)) + SUM(NVL(TOT_VATAMT, 0)) + SUM(NVL(TOT_MANAGEAMT, 0)))
     INTO t_cnt
     FROM HD_SUPPLY_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;
   IF t_cnt <> 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '총공급가와 토지, 건물, 부가세, 관리비의 합이 서로 다른 세대가 존재합니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*---------------------------------------------------------------------------*/
   v_sysdt   := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_sysdate := TO_CHAR(SYSDATE, 'YYYYMMDD');

   /*---------------------------------------------------------------------------*/
   /* 기존자료 삭제 */
   BEGIN
      DELETE HD_REFER_SELLDETAIL
       WHERE EXISTS (SELECT 1
                       FROM HD_SUPPLY_CONV A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                        AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                        AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                        AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                    );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 01:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      DELETE HD_HOUS_SUPPLY
       WHERE EXISTS (SELECT 1
                       FROM HD_SUPPLY_CONV A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.DEPT_CODE = HD_HOUS_SUPPLY.DEPT_CODE
                        AND A.HOUSETAG  = HD_HOUS_SUPPLY.HOUSETAG
                        AND A.BUILDNO   = HD_HOUS_SUPPLY.BUILDNO
                        AND A.HOUSENO   = HD_HOUS_SUPPLY.HOUSENO
                    );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 02:HD_HOUS_SUPPLY' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 콘도가 아닌경우 원본데이타의 잘못된 금액 수정 */
   IF as_htag NOT IN ('C', 'D') THEN  BEGIN
      UPDATE HD_SUPPLY_CONV
         SET TOT_MANAGEAMT = 0,
             TOT_SUPPLYAMT = TOT_LANDAMT + TOT_BUILDAMT + TOT_VATAMT,
             AMT00_M       = 0,
             AMT01_M       = 0,
             AMT02_M       = 0,
             AMT11_M       = 0,
             AMT12_M       = 0,
             AMT13_M       = 0,
             AMT14_M       = 0,
             AMT15_M       = 0,
             AMT16_M       = 0,
             AMT17_M       = 0,
             AMT18_M       = 0,
             AMT19_M       = 0,
             AMT20_M       = 0,
             AMT90_M       = 0
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 03:HD_SUPPLY_CONV' || SQLERRM);
            ROLLBACK;
            RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   /* 공급내역 */
   BEGIN
      INSERT INTO HD_HOUS_SUPPLY
                ( DEPT_CODE,     HOUSETAG,    BUILDNO,        HOUSENO,
                  SQUARE,        PRTSQUARE,   TYPE,           CLASS,         OPTIONCODE,
                  VATTAG,
                  EXCLUSIVEAREA, COMMONAREA,  ETCCOMMONAREA,  PARKINGAREA,
                  SERVICEAREA,   SITEAREA,
                  FLOOR,         GUBUN,       CATEGORY_NAME,  CONTRACTYESNO,
                  VIRDEPOSIT,    BANK_CODE,   BANK_NAME,      USE_YN,
                  RENT_TAG,      VIRDEPOSIT2,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,    CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,    BUILDNO,        HOUSENO,
                  SQUARE,        SQUARE,      NVL(TYPE, ' '), CLASS,         OPTIONS,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END,
                  EXCLUSIVEAREA, COMMONAREA,  ETCCOMMONAREA,  PARKINGAREA,
                  SERVICEAREA,   SITEAREA,
                  '',            '',          '',             'N',
                  '',            '',          '',             'Y',
                  'N',           '',
                  as_user,       'NEW',       '',             ''
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 04:HD_HOUS_SUPPLY' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 00차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '00',          'X',
                  AMT00,         AMT00_L,    AMT00_B,         AMT00_V,     AMT00_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT00 <> AMT00_L + AMT00_B + AMT00_V + AMT00_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT00, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 05:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 01차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '01',          'X',
                  AMT01,         AMT01_L,    AMT01_B,         AMT01_V,     AMT01_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT01 <> AMT01_L + AMT01_B + AMT01_V + AMT01_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT01, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 06:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 02차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '02',          'X',
                  AMT02,         AMT02_L,    AMT02_B,         AMT02_V,     AMT02_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT02 <> AMT02_L + AMT02_B + AMT02_V + AMT02_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT02, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 07:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 11차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '11',          'X',
                  AMT11,         AMT11_L,    AMT11_B,         AMT11_V,     AMT11_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT11 <> AMT11_L + AMT11_B + AMT11_V + AMT11_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT11, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 08:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 12차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '12',          'X',
                  AMT12,         AMT12_L,    AMT12_B,         AMT12_V,     AMT12_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT12 <> AMT12_L + AMT12_B + AMT12_V + AMT12_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT12, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 09:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 13차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '13',          'X',
                  AMT13,         AMT13_L,    AMT13_B,         AMT13_V,     AMT13_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT13 <> AMT13_L + AMT13_B + AMT13_V + AMT13_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT13, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 10:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 14차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '14',          'X',
                  AMT14,         AMT14_L,    AMT14_B,         AMT14_V,     AMT14_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT14 <> AMT14_L + AMT14_B + AMT14_V + AMT14_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT14, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 11:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 15차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '15',          'X',
                  AMT15,         AMT15_L,    AMT15_B,         AMT15_V,     AMT15_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT15 <> AMT15_L + AMT15_B + AMT15_V + AMT15_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT15, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 12:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 16차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '16',          'X',
                  AMT16,         AMT16_L,    AMT16_B,         AMT16_V,     AMT16_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT16 <> AMT16_L + AMT16_B + AMT16_V + AMT16_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT16, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 13:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 17차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '17',          'X',
                  AMT17,         AMT17_L,    AMT17_B,         AMT17_V,     AMT17_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT17 <> AMT17_L + AMT17_B + AMT17_V + AMT17_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT17, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 14:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 18차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '18',          'X',
                  AMT18,         AMT18_L,    AMT18_B,         AMT18_V,     AMT18_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT18 <> AMT18_L + AMT18_B + AMT18_V + AMT18_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT18, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 15:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 19차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '19',          'X',
                  AMT19,         AMT19_L,    AMT19_B,         AMT19_V,     AMT19_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT19 <> AMT19_L + AMT19_B + AMT19_V + AMT19_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT19, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 16:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 20차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                  '20',          'X',
                  AMT20,         AMT20_L,    AMT20_B,         AMT20_V,     AMT20_M,
                  'X',           'X',        0,
                  as_user,       'NEW',
                  CASE WHEN AMT20 <> AMT20_L + AMT20_B + AMT20_V + AMT20_M THEN 'C' ELSE '' END,
                  CASE WHEN TOT_VATAMT > 0 THEN 'Y' ELSE 'N' END
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT20, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 17:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정 90차수 */
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,    BUILDNO,         HOUSENO,
                  COUNTS,        AGREEDATE, 
                  AGREEAMT,      LANDAMT,     BUILDAMT,        VATAMT,      MANAGEAMT,
                  DC_YN,         AC_YN,       DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,
                  CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,    BUILDNO,         HOUSENO,
                  '90',          'X',
                  AMT90,         TOT_LANDAMT, TOT_BUILDAMT,    TOT_VATAMT,  TOT_MANAGEAMT,
                  'X',           'X',         0,
                  as_user,       'NEW',
                  '',
                  ''
             FROM HD_SUPPLY_CONV
            WHERE DEPT_CODE     = as_dept
              AND HOUSETAG      = as_htag
              AND NVL(AMT90, 0) > 0;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 18:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /** 안분 방법 **/
   /* 1.총약정금액에대한 총관리비 비율로 모든약정의 관리비를 산출 */
   /* 2.총토건부합계에대한 총건물가의 비율로 모든약정의 건물가 산출 */
   /* 3.부가세는 각차수약정별로 건물가의 10% 산출 */
   /* 4.각약정차수별로 약정금액-건물가-부가세-관리비를 토지가로 산출 */
   /* 5.총약정토건부관 금액과 실제 약정차수별 합계의 차익을 마지막차수에 반영 */

   /*---------------------------------------------------------------------------*/
   /* 1.약정의 관리비 */
   IF as_htag IN ('C', 'D') THEN BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET MANAGEAMT   = TRUNC((AGREEAMT * (SELECT DECODE(TOT_SUPPLYAMT, 0, 0, (TOT_MANAGEAMT / TOT_SUPPLYAMT))
                                                FROM HD_SUPPLY_CONV
                                               WHERE DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                                 AND HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                                 AND BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                                 AND HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO)) / 10) * 10
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 19:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END; ELSE BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET MANAGEAMT   = 0
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 20:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   /* 2.약정의 건물가 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET BUILDAMT = TRUNC(((AGREEAMT - MANAGEAMT) * (SELECT DECODE(TOT_LANDAMT + TOT_BUILDAMT + TOT_VATAMT, 0, 0, (TOT_BUILDAMT / (TOT_LANDAMT + TOT_BUILDAMT + TOT_VATAMT)))
                                                           FROM HD_SUPPLY_CONV
                                                          WHERE DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                                            AND HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                                            AND BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                                            AND HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                                        )) / 10) * 10
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 21:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 3.약정의 부가세 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET VATAMT = CASE WHEN CHG_DATE = 'N' THEN 0 ELSE BUILDAMT / 10 END
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 22:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 4.약정의 토지가 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET LANDAMT     = AGREEAMT - BUILDAMT - VATAMT - MANAGEAMT
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND CHG_DUTY_ID = 'C'
         AND INPUT_DATE  = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 23:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*잔금차수 토건부관 변경 */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET LANDAMT   = LANDAMT   - (SELECT SUM(A.LANDAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90'),
             BUILDAMT  = BUILDAMT  - (SELECT SUM(A.BUILDAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90'),
             VATAMT    = VATAMT    - (SELECT SUM(A.VATAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90'),
             MANAGEAMT = MANAGEAMT - (SELECT SUM(A.MANAGEAMT)
                                        FROM HD_REFER_SELLDETAIL A
                                       WHERE A.DEPT_CODE = HD_REFER_SELLDETAIL.DEPT_CODE
                                         AND A.HOUSETAG  = HD_REFER_SELLDETAIL.HOUSETAG
                                         AND A.BUILDNO   = HD_REFER_SELLDETAIL.BUILDNO
                                         AND A.HOUSENO   = HD_REFER_SELLDETAIL.HOUSENO
                                         AND A.COUNTS    <> '90')   
       WHERE DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag
         AND COUNTS     = '90'
         AND INPUT_DATE = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 24:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 약정일setting */
   BEGIN
      UPDATE HD_REFER_SELLDETAIL
         SET AGREEDATE       = (SELECT NVL(MAX(A.AGREEDATE), v_sysdate)
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             DC_YN           = (SELECT NVL(MAX(A.DC_YN), DECODE(MAX(HD_REFER_SELLDETAIL.COUNTS), '00', 'N', 'Y'))
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             AC_YN           = (SELECT NVL(MAX(A.AC_YN), DECODE(MAX(HD_REFER_SELLDETAIL.COUNTS), '00', 'N', 'Y'))
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             DISTRIBUTE_RATE = (SELECT DISTRIBUTE_RATE
                                  FROM HD_CODE_AGREE A
                                 WHERE A.DEPT_CODE = as_dept
                                   AND A.HOUSETAG  = as_htag
                                   AND A.AGREESEQ  = HD_REFER_SELLDETAIL.COUNTS),
             INPUT_DATE      = v_sysdt,
             CHG_DUTY_ID     = '',
             CHG_DATE        = ''
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INPUT_DATE = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 25:HD_REFER_SELLDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET INPUT_DATE = v_sysdt
       WHERE DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag
         AND INPUT_DATE = 'NEW';
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 26:HD_HOUS_SUPPLY' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*약정의 합계와 총합계가 틀린지 판단 */
   t_cnt := 0;
   SELECT SUM(TAMT) - SUM(AAMT)
     INTO t_cnt
     FROM (SELECT A.BUILDNO,
                  A.HOUSENO,
                  A.TOT_SUPPLYAMT AS TAMT,
                  NVL(SUM(B.AGREEAMT), 0) AS AAMT
             FROM HD_SUPPLY_CONV A,
                  HD_REFER_SELLDETAIL B
            WHERE A.DEPT_CODE = as_dept
              AND A.HOUSETAG  = as_htag
              AND A.DEPT_CODE = B.DEPT_CODE (+)
              AND A.HOUSETAG  = B.HOUSETAG  (+)
              AND A.BUILDNO   = B.BUILDNO   (+)
              AND A.HOUSENO   = B.HOUSENO   (+)
            GROUP BY A.BUILDNO, A.HOUSENO, A.TOT_SUPPLYAMT
          );
   IF t_cnt <> 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '총분양금액과 약정금액의 합이 다릅니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   /* 1. 면적별 약정 삭제 */
   /* 2. 면적별 정보 삭제 */
   /* 3. 면적별 정보 생성 */
   /* 4. 면적별 약정 생성 */
   BEGIN
      DELETE HD_REFER_SQUAREDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 27:HD_REFER_SQUAREDETAIL' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      DELETE HD_REFER_SQUARE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 28:HD_REFER_SQUARE' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   OPEN CURMAKE(as_dept, as_htag);
   LOOP
      FETCH CURMAKE 
       INTO c_dept_code, c_housetag, c_buildno, c_houseno,
            c_square,    c_type,     c_class,   c_optioncode;
      EXIT WHEN CURMAKE%NOTFOUND;

      t_seq := 0;
      SELECT NVL(MAX(SEQ), 0) + 1
        INTO t_seq
        FROM HD_REFER_SQUARE
       WHERE DEPT_CODE = c_dept_code
         AND HOUSETAG  = c_housetag ;

      BEGIN
         INSERT INTO HD_REFER_SQUARE
                    (DEPT_CODE,       HOUSETAG,        SEQ,
                     SQUARE,          TYPE,            CLASS,           OPTIONCODE,       VATTAG,
                     EXCLUSIVEAREA,   COMMONAREA,      ETCCOMMONAREA,
                     PARKINGAREA,     SERVICEAREA,     SITEAREA,
                     LANDAMT,         BUILDAMT,        VATAMT,          MANAGEAMT,        TOT_BAMT,
                     INPUT_DUTY_ID,   INPUT_DATE,      CHG_DUTY_ID,     CHG_DATE,
                     PRTSQUARE )
              SELECT c_dept_code,     c_housetag,      t_seq,
                     A.SQUARE,        A.TYPE,          A.CLASS,         A.OPTIONCODE,     A.VATTAG,
                     A.EXCLUSIVEAREA, A.COMMONAREA,    A.ETCCOMMONAREA,
                     A.PARKINGAREA,   A.SERVICEAREA,   A.SITEAREA,
                     SUM(B.LANDAMT),  SUM(B.BUILDAMT), SUM(B.VATAMT),   SUM(B.MANAGEAMT), SUM(B.LANDAMT) + SUM(B.BUILDAMT) + SUM(B.VATAMT) + SUM(B.MANAGEAMT),
                     as_user,         v_sysdt,         '',              '',
                     A.PRTSQUARE
                FROM HD_HOUS_SUPPLY A,
                     HD_REFER_SELLDETAIL B
               WHERE A.DEPT_CODE = c_dept_code
                 AND A.HOUSETAG  = c_housetag
                 AND A.BUILDNO   = c_buildno
                 AND A.HOUSENO   = c_houseno
                 AND A.DEPT_CODE = B.DEPT_CODE
                 AND A.HOUSETAG  = B.HOUSETAG
                 AND A.BUILDNO   = B.BUILDNO
                 AND A.HOUSENO   = B.HOUSENO
               GROUP BY A.SQUARE,        A.TYPE,          A.CLASS,         A.OPTIONCODE, A.VATTAG,
                        A.EXCLUSIVEAREA, A.COMMONAREA,    A.ETCCOMMONAREA,
                        A.PARKINGAREA,   A.SERVICEAREA,   A.SITEAREA,      A.PRTSQUARE;
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.PUT_LINE(SQLERRM); 
               RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 29:HD_REFER_SQUARE' || SQLERRM);
               ROLLBACK;
               RETURN;
      END;

      BEGIN
         INSERT INTO HD_REFER_SQUAREDETAIL
                    (DEPT_CODE,     HOUSETAG,   SEQ,             COUNTS,
                     AGREEDATE,     LANDAMT,    BUILDAMT,        VATAMT,   MANAGEAMT, BAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE )
              SELECT DEPT_CODE,     HOUSETAG,   t_seq,           COUNTS,
                     AGREEDATE,     LANDAMT,    BUILDAMT,        VATAMT,   MANAGEAMT, AGREEAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     as_user,       v_sysdt,    '',              ''
                FROM HD_REFER_SELLDETAIL
               WHERE DEPT_CODE = c_dept_code
                 AND HOUSETAG  = c_housetag
                 AND BUILDNO   = c_buildno
                 AND HOUSENO   = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.PUT_LINE(SQLERRM); 
               RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 30:HD_REFER_SQUAREDETAIL' || SQLERRM);
               ROLLBACK;
               RETURN;
      END;
   END LOOP;
   CLOSE CURMAKE;

   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             DBMS_OUTPUT.PUT_LINE(SQLCODE || ':' || SQLERRM);
             RAISE_APPLICATION_ERROR( -20001,  SQLCODE || ':' || SQLERRM);
END;
/


DROP PROCEDURE PROC_HD_BASC_SQUAREAPPLY;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_SQUAREAPPLY" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt          VARCHAR2(14);
v_cnt            NUMBER(5);

/*---------------------------------------------------------------------------*/
s_seq            NUMBER(5);
s_bno            VARCHAR2(10);
s_hno            VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURSUPPLY(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT A.SEQ, B.BUILDNO, B.HOUSENO
  FROM HD_REFER_SQUARE A,
       HD_HOUS_SUPPLY B
 WHERE A.DEPT_CODE  = a_dept
   AND A.HOUSETAG   = a_htag
   AND A.SQUARE     = B.SQUARE
   AND A.TYPE       = B.TYPE
   AND A.CLASS      = B.CLASS
   AND A.OPTIONCODE = B.OPTIONCODE
   AND NOT EXISTS (SELECT 1
                     FROM HD_HOUS_SELL C
                    WHERE B.DEPT_CODE = C.DEPT_CODE
                      AND B.HOUSETAG  = C.HOUSETAG
                      AND B.BUILDNO   = C.BUILDNO
                      AND B.HOUSENO   = C.HOUSENO
                      AND C.CHANGETAG = '1'
                      AND ROWNUM < 2
                  )
 ORDER BY A.SEQ, B.BUILDNO, B.HOUSENO;

/*---------------------------------------------------------------------------*/
BEGIN
   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   OPEN CURSUPPLY(as_dept, as_htag);
   LOOP
      FETCH CURSUPPLY 
       INTO s_seq, s_bno, s_hno;
      EXIT WHEN CURSUPPLY%NOTFOUND;

      BEGIN
         DELETE HD_REFER_SELLDETAIL
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND BUILDNO   = s_bno
            AND HOUSENO   = s_hno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:01 HD_REFER_SELLDETAIL DELETE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_REFER_SELLDETAIL
                   ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,
                     COUNTS,        AGREEDATE,  AGREEAMT,        LANDAMT, BUILDAMT, VATAMT, MANAGEAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE )
              SELECT DEPT_CODE,     HOUSETAG,   s_bno,           s_hno,
                     COUNTS,        AGREEDATE,  BAMT,            LANDAMT, BUILDAMT, VATAMT, MANAGEAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE
               FROM HD_REFER_SQUAREDETAIL
              WHERE DEPT_CODE = as_dept
                AND HOUSETAG  = as_htag
                AND SEQ       = s_seq;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:01 HD_REFER_SELLDETAIL INSERT ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;
   END LOOP;
   CLOSE CURSUPPLY;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_BASC_SQUAREBATCH;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_SQUAREBATCH" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt           VARCHAR2(14);

/*---------------------------------------------------------------------------*/
t_cnt             NUMBER(5);
t_cdt             VARCHAR2(8);

/*---------------------------------------------------------------------------*/
s_seq             NUMBER(3);
s_square          NUMBER(8,4);
s_type            VARCHAR2(4);
s_class           VARCHAR2(1);
s_optioncode      VARCHAR2(2);

/*---------------------------------------------------------------------------*/
l_bno             VARCHAR2(10);
l_hno             VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR SCNT(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_cnt IN NUMBER, a_cdt IN VARCHAR2) IS
   SELECT SEQ, SQUARE, TYPE, CLASS, OPTIONCODE
     FROM HD_REFER_SQUARE_CNT
    WHERE DEPT_CODE = a_dept
      AND HOUSETAG  = a_htag
      AND CNT       = a_cnt
      AND CNT_DATE  = a_cdt;

/*---------------------------------------------------------------------------*/
CURSOR SELL(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_square IN NUMBER, a_type IN VARCHAR2, a_class IN VARCHAR2, a_option IN VARCHAR2) IS
  SELECT BUILDNO, HOUSENO
    FROM HD_HOUS_SUPPLY
   WHERE DEPT_CODE                = a_dept
     AND HOUSETAG                 = a_htag
     AND SQUARE                   = a_square
     AND TYPE                     = a_type
     AND CLASS                    = a_class
     AND OPTIONCODE               = a_option
     AND NVL(CONTRACTYESNO, 'N')  = 'N';

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   SELECT MAX(CNT), MAX(CNT_DATE)
     INTO t_cnt,    t_cdt
     FROM HD_REFER_SQUARE_CNT
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;

   /*---------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*---------------------------------------------------------------------------*/
   OPEN SCNT(as_dept, as_htag, t_cnt, t_cdt);
   LOOP
      FETCH SCNT 
       INTO s_seq, s_square, s_type, s_class, s_optioncode;
      EXIT WHEN SCNT%NOTFOUND;

      OPEN SELL(as_dept, as_htag, s_square, s_type, s_class, s_optioncode);
      LOOP
         FETCH SELL
          INTO l_bno, l_hno;
         EXIT WHEN SELL%NOTFOUND;

         /*---------------------------------------------------------------------------*/
         BEGIN
            DELETE HD_REFER_SELLDETAIL
             WHERE DEPT_CODE = as_dept
               AND HOUSETAG  = as_htag
               AND BUILDNO   = l_bno
               AND HOUSENO   = l_hno;
            EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.PUT_LINE(SQLERRM); 
               RAISE_APPLICATION_ERROR(-20002, 'ERR_DELETE 01:HD_REFER_SELLDETAIL' || SQLERRM);
               ROLLBACK;
               RETURN;
         END;

         /*---------------------------------------------------------------------------*/
         BEGIN
            INSERT INTO HD_REFER_SELLDETAIL
                      ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,  COUNTS,    AGREEDATE,
                        AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,   MANAGEAMT,
                        DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                        INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE )
                 SELECT DEPT_CODE,     HOUSETAG,   l_bno,           l_hno,    COUNTS,    AGREEDATE,
                        BAMT,          LANDAMT,    BUILDAMT,        VATAMT,   MANAGEAMT,
                        DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                        as_user,       v_sysdt,    '',              ''
                   FROM HD_REFER_SQUAREDETAIL_CNT
                  WHERE DEPT_CODE = as_dept
                    AND HOUSETAG  = as_htag
                    AND CNT       = t_cnt
                    AND SEQ       = s_seq;
            EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.PUT_LINE(SQLERRM); 
               RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 02:HD_REFER_SELLDETAIL' || SQLERRM);
               ROLLBACK;
               RETURN;
         END;
      END LOOP;
      CLOSE SELL;

   END LOOP;
   CLOSE SCNT;

   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             DBMS_OUTPUT.PUT_LINE(SQLCODE || ':' || SQLERRM);
             RAISE_APPLICATION_ERROR( -20001,  SQLCODE || ':' || SQLERRM);
END;
/


DROP PROCEDURE PROC_HD_BASC_SQUARECNT;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_SQUARECNT" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --생성일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt           VARCHAR2(14);

/*---------------------------------------------------------------------------*/
t_cnt             NUMBER(5);
t_cntdt           VARCHAR2(8);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   t_cnt := 0;
   SELECT NVL(MAX(CNT), 0) + 1, NVL(MAX(CNT_DATE), '00000101')
     INTO t_cnt,                t_cntdt
     FROM HD_REFER_SQUARE_CNT
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;

   IF as_dt <= t_cntdt THEN
      RAISE_APPLICATION_ERROR(-20002, '추가할 변경일은 기존의 최종변경일보다 커야 합니다.');
      ROLLBACK;
      RETURN;
   END IF;

   /*---------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*---------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_REFER_SQUARE_CNT
                ( DEPT_CODE,     HOUSETAG,   CNT,           SEQ,         CNT_DATE,
                  SQUARE,        TYPE,       CLASS,         OPTIONCODE,  VATTAG,
                  EXCLUSIVEAREA, COMMONAREA, ETCCOMMONAREA, PARKINGAREA, SERVICEAREA, SITEAREA,
                  LANDAMT,       BUILDAMT,   VATAMT,        TOT_BAMT,    MANAGEAMT,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,   CHG_DATE,    PRTSQUARE )
           SELECT DEPT_CODE,     HOUSETAG,   t_cnt,         SEQ,         as_dt,
                  SQUARE,        TYPE,       CLASS,         OPTIONCODE,  VATTAG,
                  EXCLUSIVEAREA, COMMONAREA, ETCCOMMONAREA, PARKINGAREA, SERVICEAREA, SITEAREA,
                  LANDAMT,       BUILDAMT,   VATAMT,        TOT_BAMT,    MANAGEAMT,
                  as_user,       v_sysdt,    '',            '',          PRTSQUARE
             FROM HD_REFER_SQUARE
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 01:HD_REFER_SQUARE_CNT' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_REFER_SQUAREDETAIL_CNT
                ( DEPT_CODE,     HOUSETAG,   CNT,             SEQ,      COUNTS,    AGREEDATE,
                  LANDAMT,       BUILDAMT,   VATAMT,          BAMT,     MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   t_cnt,           SEQ,      COUNTS, AGREEDATE,
                  LANDAMT,       BUILDAMT,   VATAMT,          BAMT,     MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  as_user,       v_sysdt,    '',              ''
             FROM HD_REFER_SQUAREDETAIL
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM); 
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 02:HD_REFER_SQUAREDETAIL_CNT' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             DBMS_OUTPUT.PUT_LINE(SQLCODE || ':' || SQLERRM);
             RAISE_APPLICATION_ERROR( -20001,  SQLCODE || ':' || SQLERRM);
END;
/


DROP PROCEDURE PROC_HD_BASC_SQUAREDETAIL_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_SQUAREDETAIL_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
c_cnt          NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SELLDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '1:DELETE ERR:HD_REFER_SELLDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_SUPPLY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '2:DELETE ERR:HD_HOUS_SUPPLY ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SELLCREATE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '3:DELETE ERR:HD_REFER_SELLCREATE ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SQUAREDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '4:DELETE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   c_cnt := 0;
   SELECT COUNT(*)
     INTO c_cnt
     FROM HD_REFER_SQUAREDETAIL_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_COMM
                       WHERE GUBUN = '16'
                         AND HD_REFER_SQUAREDETAIL_CONV.OPTIONCODE = CODE
                                );    
   IF c_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '존재하지 않는 사양코드가 있습니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_REFER_SQUAREDETAIL
                ( DEPT_CODE,     HOUSETAG,   SEQ,                  COUNTS,
                  AGREEDATE,     LANDAMT,    BUILDAMT,             VATAMT,   BAMT,    MANAGEAMT,
                  DC_YN,
                  AC_YN,
                  DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,          CHG_DATE
                )
           SELECT A.DEPT_CODE,   A.HOUSETAG, NVL(MAX(B.SEQ), 999), A.COUNTS,
                  A.AGREEDATE,   A.LANDAMT,  A.BUILDAMT,           A.VATAMT,  A.BAMT, A.MANAGEAMT,
                  DECODE(A.COUNTS, '00', 'N', 'Y'),
                  DECODE(A.COUNTS, '00', 'N', 'Y'),
                  0,
                  as_user,       v_sysdt,    '',                   B.VATTAG
             FROM HD_REFER_SQUAREDETAIL_CONV A,
                  HD_REFER_SQUARE B
            WHERE A.DEPT_CODE  = as_dept
              AND A.HOUSETAG   = as_htag
              AND A.DEPT_CODE  = B.DEPT_CODE  (+)
              AND A.HOUSETAG   = B.HOUSETAG   (+)
              AND A.SQUARE     = B.SQUARE     (+)
              AND A.TYPE       = B.TYPE       (+)
              AND A.CLASS      = B.CLASS      (+)
              AND A.OPTIONCODE = B.OPTIONCODE (+)
            GROUP BY A.DEPT_CODE, A.HOUSETAG,  A.SEQ,
                     A.COUNTS,    A.AGREEDATE, A.LANDAMT,
                     A.BUILDAMT,  A.VATAMT,    A.BAMT,
                     B.VATTAG;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line('HD_REFER_SQUAREDETAIL:' || sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, '5:INSERT ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
                   ROLLBACK;
                   RETURN;
   END;

   /*------------------------------------------------------------------------*/
   c_cnt := 0;
   SELECT COUNT(*)
     INTO c_cnt
     FROM HD_REFER_SQUAREDETAIL A
    WHERE A.DEPT_CODE  = as_dept
      AND A.HOUSETAG   = as_htag
      AND NOT EXISTS (SELECT 1
                        FROM HD_REFER_SQUARE
                       WHERE DEPT_CODE  = as_dept
                         AND HOUSETAG   = as_htag
                         AND SEQ        = A.SEQ
                     );
   IF c_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '면적정보에 없는 약정이 존재합니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   c_cnt := 0;
   SELECT COUNT(*)
     INTO c_cnt
     FROM HD_REFER_SQUAREDETAIL
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND BAMT <> (LANDAMT + BUILDAMT + VATAMT + MANAGEAMT);
   IF c_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '약정합계와 토건부(관리비) 금액이 다른 약정이 있습니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_REFER_SQUARE
         SET LANDAMT     = (SELECT NVL(SUM(LANDAMT), 0)
                              FROM HD_REFER_SQUAREDETAIL A
                             WHERE A.DEPT_CODE = HD_REFER_SQUARE.DEPT_CODE
                               AND A.HOUSETAG  = HD_REFER_SQUARE.HOUSETAG
                               AND A.SEQ       = HD_REFER_SQUARE.SEQ
                           ),
             BUILDAMT    = (SELECT NVL(SUM(BUILDAMT), 0)
                              FROM HD_REFER_SQUAREDETAIL A
                             WHERE A.DEPT_CODE = HD_REFER_SQUARE.DEPT_CODE
                               AND A.HOUSETAG  = HD_REFER_SQUARE.HOUSETAG
                               AND A.SEQ       = HD_REFER_SQUARE.SEQ
                           ),
             VATAMT      = (SELECT NVL(SUM(VATAMT), 0)
                              FROM HD_REFER_SQUAREDETAIL A
                             WHERE A.DEPT_CODE = HD_REFER_SQUARE.DEPT_CODE
                               AND A.HOUSETAG  = HD_REFER_SQUARE.HOUSETAG
                               AND A.SEQ       = HD_REFER_SQUARE.SEQ
                           ),
             MANAGEAMT   = (SELECT NVL(SUM(MANAGEAMT), 0)
                              FROM HD_REFER_SQUAREDETAIL A
                             WHERE A.DEPT_CODE = HD_REFER_SQUARE.DEPT_CODE
                               AND A.HOUSETAG  = HD_REFER_SQUARE.HOUSETAG
                               AND A.SEQ       = HD_REFER_SQUARE.SEQ
                           ),
             TOT_BAMT    = (SELECT NVL(SUM(BAMT), 0)
                              FROM HD_REFER_SQUAREDETAIL A
                             WHERE A.DEPT_CODE = HD_REFER_SQUARE.DEPT_CODE
                               AND A.HOUSETAG  = HD_REFER_SQUARE.HOUSETAG
                               AND A.SEQ       = HD_REFER_SQUARE.SEQ
                           ),
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line('HD_REFER_SQUARE:' || sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '6:UPDATE ERR:HD_REFER_SQUARE ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /** 안분 방법 **/
   /* 1.총약정금액에대한 총관리비 비율로 모든약정의 관리비를 산출 */
   /* 2.총토건부합계에대한 총건물가의 비율로 모든약정의 건물가 산출 */
   /* 3.부가세는 각차수약정별로 건물가의 10% 산출 */
   /* 4.각약정차수별로 약정금액-건물가-부가세-관리비를 토지가로 산출 */
   /* 5.총약정토건부관 금액과 실제 약정차수별 합계의 차익을 마지막차수에 반영 */
   /*------------------------------------------------------------------------*/
   /* 관리비 산정 */
   BEGIN
      UPDATE HD_REFER_SQUAREDETAIL
         SET MANAGEAMT = TRUNC((BAMT * (SELECT DECODE(TOT_BAMT, 0, 0, (MANAGEAMT / TOT_BAMT))
                                          FROM HD_REFER_SQUARE A
                                         WHERE A.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                                           AND A.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                                           AND A.SEQ       = HD_REFER_SQUAREDETAIL.SEQ)
                               ) / 10) * 10
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line('HD_REFER_SQUAREDETAIL:' || sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '7:UPDATE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /* 건물가 산정 */
   BEGIN
      UPDATE HD_REFER_SQUAREDETAIL
         SET BUILDAMT  = TRUNC(((BAMT - MANAGEAMT) * (SELECT DECODE(LANDAMT + BUILDAMT + VATAMT, 0, 0, (BUILDAMT / (LANDAMT + BUILDAMT + VATAMT)))
                                                        FROM HD_REFER_SQUARE A
                                                       WHERE A.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                                                         AND A.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                                                         AND A.SEQ       = HD_REFER_SQUAREDETAIL.SEQ)
                                                     ) / 10) * 10
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line('HD_REFER_SQUAREDETAIL:' || sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '7:UPDATE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /* 부가세 산정 */
   BEGIN
      UPDATE HD_REFER_SQUAREDETAIL
         SET VATAMT    = CASE WHEN CHG_DATE = 'N' THEN 0 ELSE BUILDAMT / 10 END,
             CHG_DATE  = ''
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line('HD_REFER_SQUAREDETAIL:' || sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '8:UPDATE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /* 토지가 산정 */
   BEGIN
      UPDATE HD_REFER_SQUAREDETAIL
         SET LANDAMT   = BAMT - BUILDAMT - VATAMT - MANAGEAMT
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line('HD_REFER_SQUAREDETAIL:' || sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '9:UPDATE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /* 관리비산정 -- 어떻게해야하는지 결정안남 */



   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_REFER_SQUAREDETAIL
         SET LANDAMT   = (SELECT A.LANDAMT
                            FROM HD_REFER_SQUARE A
                           WHERE A.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                             AND A.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                             AND A.SEQ       = HD_REFER_SQUAREDETAIL.SEQ),
             BUILDAMT  = (SELECT A.BUILDAMT
                            FROM HD_REFER_SQUARE A
                           WHERE A.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                             AND A.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                             AND A.SEQ       = HD_REFER_SQUAREDETAIL.SEQ),
             VATAMT    = (SELECT A.VATAMT
                            FROM HD_REFER_SQUARE A
                           WHERE A.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                             AND A.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                             AND A.SEQ       = HD_REFER_SQUAREDETAIL.SEQ),
             MANAGEAMT = (SELECT A.MANAGEAMT
                            FROM HD_REFER_SQUARE A
                           WHERE A.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                             AND A.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                             AND A.SEQ       = HD_REFER_SQUAREDETAIL.SEQ)
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND COUNTS    = '90';
      EXCEPTION
         WHEN OTHERS THEN
            dbms_output.put_line('HD_REFER_SQUAREDETAIL:' || sqlerrm); 
            RAISE_APPLICATION_ERROR(-20002, '10:UPDATE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
            ROLLBACK;
            RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*잔금차수 토건부(관리비) 변경 */
   BEGIN
      UPDATE HD_REFER_SQUAREDETAIL
         SET LANDAMT   = LANDAMT   - (SELECT SUM(B.LANDAMT)
                                        FROM HD_REFER_SQUAREDETAIL B
                                       WHERE B.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                                         AND B.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                                         AND B.SEQ       = HD_REFER_SQUAREDETAIL.SEQ
                                         AND B.COUNTS    <> '90'),
             BUILDAMT  = BUILDAMT  - (SELECT SUM(B.BUILDAMT)
                                        FROM HD_REFER_SQUAREDETAIL B
                                       WHERE B.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                                         AND B.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                                         AND B.SEQ       = HD_REFER_SQUAREDETAIL.SEQ
                                         AND B.COUNTS    <> '90'),
             VATAMT    = VATAMT    - (SELECT SUM(B.VATAMT)
                                        FROM HD_REFER_SQUAREDETAIL B
                                       WHERE B.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                                         AND B.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                                         AND B.SEQ       = HD_REFER_SQUAREDETAIL.SEQ
                                         AND B.COUNTS    <> '90'),
             MANAGEAMT = MANAGEAMT - (SELECT SUM(B.MANAGEAMT)
                                        FROM HD_REFER_SQUAREDETAIL B
                                       WHERE B.DEPT_CODE = HD_REFER_SQUAREDETAIL.DEPT_CODE
                                         AND B.HOUSETAG  = HD_REFER_SQUAREDETAIL.HOUSETAG
                                         AND B.SEQ       = HD_REFER_SQUAREDETAIL.SEQ
                                         AND B.COUNTS    <> '90') 
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND COUNTS    = '90';
      EXCEPTION
         WHEN OTHERS THEN
            dbms_output.put_line('HD_REFER_SQUAREDETAIL:' || sqlerrm); 
            RAISE_APPLICATION_ERROR(-20002, '11:UPDATE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
            ROLLBACK;
            RETURN;
   END;
                                            
   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_BASC_SQUARE_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_SQUARE_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(15);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SELLDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '1:DELETE ERR:HD_REFER_SELLDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_SUPPLY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '2:DELETE ERR:HD_HOUS_SUPPLY ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SELLCREATE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '3:DELETE ERR:HD_REFER_SELLCREATE ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SQUAREDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '4:DELETE ERR:HD_REFER_SQUAREDETAIL ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SQUARE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '5:DELETE ERR:HD_REFER_SQUARE ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_REFER_SQUARE_CONV
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_COMM
                       WHERE GUBUN = '16'
                         AND HD_REFER_SQUARE_CONV.OPTIONCODE = CODE
                                );    
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '존재하지 않는 사양코드가 있습니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_REFER_SQUARE
                ( DEPT_CODE,             HOUSETAG,            SEQ,
                  SQUARE,                TYPE,                CLASS,                 OPTIONCODE,            VATTAG,
                  EXCLUSIVEAREA,         COMMONAREA,          ETCCOMMONAREA,
                  PARKINGAREA,           SERVICEAREA,         SITEAREA,
                  LANDAMT,               BUILDAMT,            VATAMT,                MANAGEAMT,             TOT_BAMT,
                  INPUT_DUTY_ID,         INPUT_DATE,          CHG_DUTY_ID,           CHG_DATE,
                  PRTSQUARE )
           SELECT DEPT_CODE,             HOUSETAG,            SEQ,
                  SQUARE,                NVL(TYPE, ' '),      NVL(CLASS, ' '),       NVL(OPTIONCODE, '00'), NVL(VATTAG, 'N'),
                  NVL(EXCLUSIVEAREA, 0), NVL(COMMONAREA, 0),  NVL(ETCCOMMONAREA, 0),
                  NVL(PARKINGAREA, 0),   NVL(SERVICEAREA, 0), NVL(SITEAREA, 0),
                  0,                     0,                   0,                     0,                     0,
                  as_user,               v_sysdt,             '',                    '',
                  SQUARE
             FROM HD_REFER_SQUARE_CONV
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line('HD_REFER_SQUARE:' || sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, '6:INSERT ERR:HD_REFER_SQUARE ' || sqlerrm);
                   ROLLBACK;
                   RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_BASC_SUPPLY_CHANGE;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_SUPPLY_CHANGE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt          VARCHAR2(14);
v_cnt            NUMBER(5);

/*---------------------------------------------------------------------------*/
s_buildno        VARCHAR2(10);
s_houseno        VARCHAR2(10);
s_change_buildno VARCHAR2(10);
s_change_houseno VARCHAR2(10);
s_square         NUMBER(8,4);
s_type           VARCHAR2(4);
s_class          VARCHAR2(1);
s_optioncode     VARCHAR2(2);
s_vattag         VARCHAR2(1);
s_exclusivearea  NUMBER(12,4);
s_commonarea     NUMBER(12,4);
s_etccommonarea  NUMBER(12,4);
s_parkingarea    NUMBER(12,4);
s_servicearea    NUMBER(12,4);
s_sitearea       NUMBER(12,4);
s_floor          VARCHAR2(4);
s_gubun          VARCHAR2(2);
s_category_name  VARCHAR2(40);
s_contractyesno  VARCHAR2(1);
s_virdeposit     VARCHAR2(20);
s_virdeposit2    VARCHAR2(20);
s_bank_code      VARCHAR2(8);
s_bank_name      VARCHAR2(30);
s_use_yn         VARCHAR2(1);
s_rent_tag       VARCHAR2(2);
s_prtsquare      NUMBER(8,4);
s_predisamt      NUMBER(15);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURSUPPLY(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT BUILDNO,
       HOUSENO,
       LPAD(CHANGE_BUILDNO, 4, ' '),
       LPAD(CHANGE_HOUSENO, 4, ' '),
       SQUARE,
       TYPE,
       CLASS,
       OPTIONCODE,
       VATTAG,
       EXCLUSIVEAREA,
       COMMONAREA,
       ETCCOMMONAREA,
       PARKINGAREA,
       SERVICEAREA,
       SITEAREA,
       FLOOR,
       GUBUN,
       CATEGORY_NAME,
       CONTRACTYESNO,
       VIRDEPOSIT,
       VIRDEPOSIT2,
       BANK_CODE,
       BANK_NAME,
       USE_YN,
       RENT_TAG,
       PRTSQUARE,
       PREDISAMT
  FROM HD_HOUS_SUPPLY_CHANGE
 WHERE DEPT_CODE = a_dept
   AND HOUSETAG  = a_htag;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SUPPLY_CHANGE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;
   IF v_cnt < 1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당 현장에 변경할 동호 내역이 없습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SELLDETAIL_CHANGE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'ERR:01 HD_REFER_SELLDETAIL_CHANGE DELETE ' || sqlerrm );
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL_CHANGE
              ( DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,   COUNTS,    AGREEDATE,
                AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,    MANAGEAMT,
                DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE )
         SELECT DEPT_CODE,     HOUSETAG,   BUILDNO,         HOUSENO,   COUNTS,    AGREEDATE,
                AGREEAMT,      LANDAMT,    BUILDAMT,        VATAMT,    MANAGEAMT,
                DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,     CHG_DATE
           FROM HD_REFER_SELLDETAIL
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'ERR:02 HD_REFER_SELLDETAIL_CHANGE INSERT ' || sqlerrm );
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_REFER_SELLDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'ERR:03 HD_REFER_SELLDETAIL DELETE ' || sqlerrm );
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_SUPPLY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'ERR:04 HD_HOUS_SUPPLY DELETE ' || sqlerrm );
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURSUPPLY(as_dept, as_htag);
   LOOP
      FETCH CURSUPPLY 
       INTO s_buildno,     s_houseno,       s_change_buildno, s_change_houseno,
            s_square,      s_type,          s_class,          s_optioncode,
            s_vattag,      s_exclusivearea, s_commonarea,     s_etccommonarea,
            s_parkingarea, s_servicearea,   s_sitearea,       s_floor,
            s_gubun,       s_category_name, s_contractyesno,  s_virdeposit,     s_virdeposit2,
            s_bank_code,   s_bank_name,     s_use_yn,         s_rent_tag,
            s_prtsquare,   s_predisamt;
      EXIT WHEN CURSUPPLY%NOTFOUND;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_SUPPLY
                   ( DEPT_CODE,     HOUSETAG,        BUILDNO,          HOUSENO,
                     SQUARE,        TYPE,            CLASS,            OPTIONCODE,
                     VATTAG,        EXCLUSIVEAREA,   COMMONAREA,       ETCCOMMONAREA,
                     PARKINGAREA,   SERVICEAREA,     SITEAREA,         FLOOR,
                     GUBUN,         CATEGORY_NAME,   CONTRACTYESNO,    VIRDEPOSIT,        VIRDEPOSIT2,
                     BANK_CODE,     BANK_NAME,       USE_YN,           RENT_TAG,
                     INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID,      CHG_DATE,
                     PRTSQUARE,     PREDISAMT )
            VALUES ( as_dept,       as_htag,         s_change_buildno, s_change_houseno,
                     s_square,      s_type,          s_class,          s_optioncode,
                     s_vattag,      s_exclusivearea, s_commonarea,     s_etccommonarea,
                     s_parkingarea, s_servicearea,   s_sitearea,       s_floor,
                     s_gubun,       s_category_name, s_contractyesno,  s_virdeposit,      s_virdeposit,
                     s_bank_code,   s_bank_name,     s_use_yn,         s_rent_tag,
                     as_user,       v_sysdt,         '',               '',
                     s_prtsquare,   s_predisamt );
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:05 HD_HOUS_SUPPLY INSERT ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_REFER_SELLDETAIL
                   ( DEPT_CODE,     HOUSETAG,   BUILDNO,          HOUSENO,          COUNTS,    AGREEDATE,
                     AGREEAMT,      LANDAMT,    BUILDAMT,         VATAMT,           MANAGEAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,      CHG_DATE )
              SELECT DEPT_CODE,     HOUSETAG,   s_change_buildno, s_change_houseno, COUNTS,    AGREEDATE,
                     AGREEAMT,      LANDAMT,    BUILDAMT,         VATAMT,           MANAGEAMT,
                     DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                     as_user,       v_sysdt,    '',               ''
                FROM HD_REFER_SELLDETAIL_CHANGE
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND BUILDNO   = s_buildno
                 AND HOUSENO   = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:06 HD_REFER_SELLDETAIL INSERT ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SELL
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:07 HD_HOUS_SELL UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SELL
            SET CHILD_BUILDNO = s_change_buildno,
                CHILD_HOUSENO = s_change_houseno,
                CHG_DUTY_ID   = as_user,
                CHG_DATE      = v_sysdt
          WHERE DEPT_CODE     = as_dept
            AND HOUSETAG      = as_htag
            AND CHILD_BUILDNO = s_buildno
            AND CHILD_HOUSENO = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:08 HD_HOUS_SELL UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_RESERVE
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno,
                SQUARE      = s_square,
                TYPE        = s_type,
                CLASS       = s_class,
                OPTIONS     = s_optioncode,
                PRTSQUARE   = s_prtsquare,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:09 HD_HOUS_RESERVE UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      --           REMARK      = s_change_buildno || '동 ' || s_change_houseno || '호 - ' 는 어떻게 ㅡㅡ?
      BEGIN
         UPDATE HD_TAX_CALCULATE
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno,
                SQUARE      = s_square,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:10 HD_TAX_CALCULATE UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_TAX_CALCULATE_AGREE
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno,
                SQUARE      = s_square,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:11 HD_TAX_CALCULATE_AGREE UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_TAX_CALCULATE_REAL
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno,
                SQUARE      = s_square,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:12 HD_TAX_CALCULATE_REAL UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_APPLY
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:13 HD_HOUS_APPLY UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;
    
      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_BANKETC
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:14 HD_HOUS_BANKETC UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;
    
      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_DAY_INCOME
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:15 HD_HOUS_DAY_INCOME UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_DAY_INCOME_ADJUST
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:16 HD_HOUS_DAY_INCOME_ADJUST UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_DAY_INCOME_CONV
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:17 HD_HOUS_DAY_INCOME_CONV UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_INCOME
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:18 HD_HOUS_INCOME UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_INCOME_ADJUST
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:19 HD_HOUS_INCOME_ADJUST UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_INCOME_REIN
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:19 HD_HOUS_INCOME_REIN UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_INCOME_TEMP
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:20 HD_HOUS_INCOME_TEMP UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_INDEMINITY_CONV
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:20 HD_HOUS_INDEMINITY_CONV UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SUBSCRIBE
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:20 HD_HOUS_SUBSCRIBE UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_REFER_KEY
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:20 HD_REFER_KEY UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_REFER_MOVEIN
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:20 HD_REFER_MOVEIN UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SELLDETAIL
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:21 HD_HOUS_SELLDETAIL UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SELLDETAIL_ADJUST
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:22 HD_HOUS_SELLDETAIL_ADJUST UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SELLDETAIL_TEMP
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:23 HD_HOUS_SELLDETAIL_TEMP UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SUPPLY_CONV
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:24 HD_HOUS_SUPPLY_CONV UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
/*
      BEGIN
         UPDATE HD_HOUS_VIRTURE
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:25 HD_HOUS_VIRTURE UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;
*/

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE SM_TRANS_VIRTURE_DEPOSIT
            SET MAKE_SEQ     = s_change_buildno || s_change_houseno
          WHERE COMPANY_CODE = '100'
            AND PROJ_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND MAKE_SEQ    = s_buildno || s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:25 SM_TRANS_VIRTURE_DEPOSIT UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
--      BEGIN
--         UPDATE HD_REFER_SELLDETAIL
--            SET BUILDNO     = s_change_buildno,
--                HOUSENO     = s_change_houseno
--          WHERE DEPT_CODE   = as_dept
--            AND HOUSETAG    = as_htag
--            AND BUILDNO     = s_buildno
--            AND HOUSENO     = s_houseno;
--         EXCEPTION
--              WHEN OTHERS THEN
--                   dbms_output.put_line(sqlerrm); 
--                   RAISE_APPLICATION_ERROR(-20002, 'ERR:26 HD_REFER_SELLDETAIL UPDATE ' || sqlerrm );
--                   ROLLBACK;
--                   RETURN;
--      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_RENT_DONGHO
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:27 HD_RENT_DONGHO UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_RENT_MASTER
            SET BUILDNO     = s_change_buildno,
                HOUSENO     = s_change_houseno
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND BUILDNO     = s_buildno
            AND HOUSENO     = s_houseno;
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR:28 HD_RENT_MASTER UPDATE ' || sqlerrm );
                   ROLLBACK;
                   RETURN;
      END;

      /*---------------------------------------------------------------------*/
--      BEGIN
--         UPDATE HD_SUPPLY_CONV
--            SET BUILDNO     = s_change_buildno,
--                HOUSENO     = s_change_houseno
--          WHERE DEPT_CODE   = as_dept
--            AND HOUSETAG    = as_htag
--            AND BUILDNO     = s_buildno
--            AND HOUSENO     = s_houseno;
--         EXCEPTION
--              WHEN OTHERS THEN
--                   dbms_output.put_line(sqlerrm); 
--                   RAISE_APPLICATION_ERROR(-20002, 'ERR:29 HD_SUPPLY_CONV UPDATE ' || sqlerrm );
--                   ROLLBACK;
--                   RETURN;
--      END;

   END LOOP;
   CLOSE CURSUPPLY;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_BASC_SUPPLY_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_BASC_SUPPLY_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
c_cnt          NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
--   BEGIN
--     DELETE HD_REFER_SELLDETAIL
--       WHERE DEPT_CODE = as_dept
--         AND HOUSETAG  = as_htag;
--      EXCEPTION
--           WHEN OTHERS THEN
--                dbms_output.put_line(sqlerrm); 
--                RAISE_APPLICATION_ERROR(-20002, '1:DELETE ERR:HD_REFER_SELLDETAIL ' || sqlerrm);
--                ROLLBACK;
--                RETURN;
--   END;

   /*------------------------------------------------------------------------*/
--   BEGIN
--      DELETE HD_HOUS_SUPPLY
--       WHERE DEPT_CODE = as_dept
--         AND HOUSETAG  = as_htag;
--      EXCEPTION
--           WHEN OTHERS THEN
--                dbms_output.put_line(sqlerrm); 
--                RAISE_APPLICATION_ERROR(-20002, '2:DELETE ERR:HD_HOUS_SUPPLY ' || sqlerrm);
--                ROLLBACK;
--                RETURN;
--   END;

   /*------------------------------------------------------------------------*/
   c_cnt := 0;
   SELECT COUNT(*)
     INTO c_cnt
     FROM HD_HOUS_SUPPLY_CONV A
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND NOT EXISTS (SELECT 1
                        FROM HD_REFER_SQUARE
                       WHERE DEPT_CODE      = as_dept
                         AND HOUSETAG       = as_htag
                         AND SQUARE         = A.SQUARE
                         AND NVL(TYPE, ' ') = NVL(A.TYPE, ' ')
                         AND CLASS          = A.CLASS
                         AND OPTIONCODE     = A.OPTIONCODE
                     );
   IF c_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '면적정보에 없는 세대가 존재합니다');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_SUPPLY
                ( DEPT_CODE,       HOUSETAG,         BUILDNO,         HOUSENO,
                  SQUARE,          TYPE,             CLASS,           OPTIONCODE,    VATTAG,
                  EXCLUSIVEAREA,   COMMONAREA,       ETCCOMMONAREA,
                  PARKINGAREA,     SERVICEAREA,      SITEAREA,
                  FLOOR,           GUBUN,            CATEGORY_NAME,   CONTRACTYESNO,
                  VIRDEPOSIT,      BANK_CODE,        BANK_NAME,       USE_YN,
                  RENT_TAG,
                  INPUT_DUTY_ID,   INPUT_DATE,       CHG_DUTY_ID,     CHG_DATE,
                  PRTSQUARE,       VIRDEPOSIT2 )
 
           SELECT A.DEPT_CODE,     A.HOUSETAG,       LPAD(A.BUILDNO, 4, ' '),      LPAD(A.HOUSENO, 4, ' '),
                  A.SQUARE,        NVL(A.TYPE, ' '), A.CLASS,         A.OPTIONCODE,   B.VATTAG,
                  B.EXCLUSIVEAREA, B.COMMONAREA,     B.ETCCOMMONAREA,
                  B.PARKINGAREA,   B.SERVICEAREA,    B.SITEAREA,
                  '',              '',               '',              'N',
                  '',              '',               '',              'Y',
                  'N',
                  as_user,         v_sysdt,          '',              '',
                  B.PRTSQUARE,     ''
             FROM HD_HOUS_SUPPLY_CONV A,
                  HD_REFER_SQUARE B
            WHERE A.DEPT_CODE      = B.DEPT_CODE
              AND A.HOUSETAG       = B.HOUSETAG
              AND A.SQUARE         = B.SQUARE
              AND NVL(A.TYPE, ' ') = NVL(B.TYPE, ' ')
              AND A.CLASS          = B.CLASS
              AND A.OPTIONCODE     = B.OPTIONCODE
              AND A.DEPT_CODE      = as_dept
              AND A.HOUSETAG       = as_htag
              AND NOT EXISTS (SELECT 1
                                FROM HD_HOUS_SUPPLY C
                               WHERE C.DEPT_CODE = as_dept
                                 AND C.HOUSETAG  = as_htag
                                 AND C.BUILDNO   = LPAD(A.BUILDNO, 4, ' ')
                                 AND C.HOUSENO   = LPAD(A.HOUSENO, 4, ' ')
                             );
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line('HD_HOUS_SUPPLY:' || sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, '3:INSERT ERR:HD_HOUS_SUPPLY ' || sqlerrm);
                   ROLLBACK;
                   RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_REFER_SELLDETAIL
                ( DEPT_CODE,     HOUSETAG,   BUILDNO,           HOUSENO,    COUNTS,
                  AGREEDATE,     AGREEAMT,   LANDAMT,           BUILDAMT,   VATAMT,   MANAGEAMT,
                  DC_YN,         AC_YN,      DISTRIBUTE_RATE,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,       CHG_DATE )
           SELECT A.DEPT_CODE,   A.HOUSETAG, A.BUILDNO,         A.HOUSENO,  C.COUNTS,
                  C.AGREEDATE,   C.BAMT,     C.LANDAMT,         C.BUILDAMT, C.VATAMT, C.MANAGEAMT,
                  C.DC_YN,       C.AC_YN,    C.DISTRIBUTE_RATE,
                  as_user,       v_sysdt,    '',                ''
             FROM HD_HOUS_SUPPLY A,
                  HD_REFER_SQUARE B,
                  HD_REFER_SQUAREDETAIL C
            WHERE A.DEPT_CODE      = as_dept
              AND A.HOUSETAG       = as_htag
              AND A.DEPT_CODE      = B.DEPT_CODE
              AND A.HOUSETAG       = B.HOUSETAG
              AND A.SQUARE         = B.SQUARE
              AND NVL(A.TYPE, ' ') = NVL(B.TYPE, ' ')
              AND A.CLASS          = B.CLASS
              AND A.OPTIONCODE     = B.OPTIONCODE
              AND B.DEPT_CODE      = C.DEPT_CODE
              AND B.HOUSETAG       = C.HOUSETAG
              AND B.SEQ            = C.SEQ
              AND NOT EXISTS (SELECT 1
                                FROM HD_REFER_SELLDETAIL C
                               WHERE C.DEPT_CODE = as_dept
                                 AND C.HOUSETAG  = as_htag
                                 AND C.BUILDNO   = A.BUILDNO
                                 AND C.HOUSENO   = A.HOUSENO
                             );
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line('HD_REFER_SELLDETAIL:' || sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, '4:INSERT ERR:HD_REFER_SELLDETAIL ' || sqlerrm);
                   ROLLBACK;
                   RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CALC_MODIFYAGREESUM;

CREATE OR REPLACE PROCEDURE "PROC_HD_CALC_MODIFYAGREESUM" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일
   as_to   IN VARCHAR2, --종료일
   as_tp   IN VARCHAR2, --type 1:전체동호 2:특정동호
   as_bno  IN VARCHAR2, --특정동
   as_hno  IN VARCHAR2, --특정호
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/* CUST */
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_cdt          VARCHAR2(8);
c_ctag         VARCHAR2(1);
c_square       NUMBER(8, 4);
c_cbno         VARCHAR2(10);
c_chno         VARCHAR2(10);
c_tdt          VARCHAR2(8);
c_ldt          VARCHAR2(8);
c_tp           VARCHAR2(1);
c_custnm       VARCHAR2(50);
c_ccust        VARCHAR2(20);
c_csang        VARCHAR2(30);
c_ccon         VARCHAR2(30);
c_ccat         VARCHAR2(20);
c_addr1        VARCHAR2(100);
c_addr2        VARCHAR2(100);
c_deptnm       VARCHAR2(150);
c_dh           VARCHAR2(20);

/* DETAIL */
d_counts       VARCHAR2(2);
d_adt          VARCHAR2(8);
d_land         NUMBER(12);
d_build        NUMBER(12);
d_vat          NUMBER(12);
d_ldt          VARCHAR2(8);
d_countsnm     VARCHAR2(100);

/* VALUES */
v_fr           VARCHAR2(10);
v_to           VARCHAR2(10);
v_aland        NUMBER(12);
v_abuild       NUMBER(12);
v_avat         NUMBER(12);
v_rland        NUMBER(12);
v_rbuild       NUMBER(12);
v_rvat         NUMBER(12);

/* SYSYTEM */
v_sysdt        VARCHAR2(14);
v_pass         VARCHAR2(10);
v_cnt          NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* CUST */
CURSOR CURCUST(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT X.CUST_CODE,      X.SEQ,           X.BUILDNO,      X.HOUSENO,
       X.CHANGEDATE,     X.CHANGETAG,     X.SQUARE,
       X.CHILD_BUILDNO,  X.CHILD_HOUSENO, X.CONTRACTDATE,
       X.LASTCHANGEDATE, X.TP,            Y.CUST_NAME,
       REPLACE(X.CO_CUSTCODE, '-', ''),
       X.CO_SANGHO,     X.CO_CONDITION, X.CO_CATEGORY,
       DECODE(a_htag, '1', Y.ADDR1, Z.ADDR1) AS ADDR1,
       DECODE(a_htag, '1', Y.ADDR2, Z.ADDR2) AS ADDR2,
       Z.DEPT_NAME,
       X.BUILDNO || '동 ' || X.HOUSENO || '호 - '
  FROM (SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '2' AS TP --청구
          FROM HD_HOUS_SELLDETAIL A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE  = B.CUST_CODE
           AND A.SEQ        = B.SEQ
           AND A.COUNTS    <> '99'
           AND ((B.CHANGETAG       = '1'          AND
                 B.LASTCHANGEDATE <= A.AGREEDATE  AND
                 A.AGREEDATE       < B.CHANGEDATE    ) OR
                (B.CHANGETAG      <> '1'          AND
                 B.CHANGEDATE      > A.AGREEDATE  AND   -->>
                 A.AGREEDATE       < a_to            ))
           AND B.LEASETAG = 'N'
           AND B.DEPT_CODE  = a_dept
           AND B.HOUSETAG   = a_htag
           AND A.AGREEDATE BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
         UNION ALL
        SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '3' AS TP --해약
          FROM HD_HOUS_INCOME A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE  = B.CUST_CODE
           AND A.SEQ        = B.SEQ
           AND A.COUNTS    <> '99'
           AND B.CHANGETAG  = '3'
           AND B.LEASETAG   = 'N'
           AND B.DEPT_CODE  = a_dept
           AND B.HOUSETAG   = a_htag
           AND B.CHANGEDATE BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
       ) X,
       VW_HD_CODE_CUSTOMER Y,
       HD_CODE_DEPT Z
 WHERE X.CUST_CODE = Y.CUST_CODE
   AND Z.DEPT_CODE = a_dept
 ORDER BY X.BUILDNO, X.HOUSENO, X.TP;

/*---------------------------------------------------------------------------*/
/* SELLDETAIL */
CURSOR CURDETL(a_cust IN VARCHAR2, a_seq IN NUMBER, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.COUNTS,
       A.AGREEDATE,
       A.LANDAMT,
       A.BUILDAMT,
       A.VATAMT,
       B.LASTCHANGEDATE,
       MAX(C.NM)
  FROM HD_HOUS_SELLDETAIL A,
       HD_HOUS_SELL B,
       HD_CODE_COMM C
 WHERE A.CUST_CODE  = a_cust
   AND A.SEQ        = a_seq
   AND A.CUST_CODE  = B.CUST_CODE
   AND A.SEQ        = B.SEQ
   AND A.COUNTS    <= '90'
   AND ((B.CHANGETAG  = '1' AND A.AGREEDATE >= B.LASTCHANGEDATE) OR -->>
        (B.CHANGETAG <> '1' AND A.AGREEDATE  < B.CHANGEDATE))       -->>
   AND A.AGREEDATE BETWEEN as_fr AND as_to
   AND A.AGREEDATE BETWEEN a_fr AND a_to
   AND A.COUNTS = C.CODE
   AND C.GUBUN  = '02'
 GROUP BY A.COUNTS, A.AGREEDATE, A.LANDAMT, A.BUILDAMT, A.VATAMT, B.LASTCHANGEDATE;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_pass  := 'XXXXXXXXXX';
   v_cnt   := 0;

   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_DEPT
    WHERE DEPT_CODE = as_dept
      AND TAX_TAG   = '3';

   IF v_cnt < 1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '집계하려는 현장은 약정기준의 현장이 아닙니다.');
      ROLLBACK;
      RETURN;
   END; END IF;


   /* ---------------------------------------------------------------------------------------*/
   BEGIN
      DELETE FROM HD_TAX_CALCULATE_AGREE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND ((as_tp = '1') OR (BUILDNO = LPAD(as_bno, 4, ' ') AND HOUSENO = LPAD(as_hno, 4, ' ')))
--         AND ((as_tp = '1') OR (BUILDNO = as_bno AND HOUSENO = as_hno))
         AND RECEIPTDATE BETWEEN as_fr AND as_to;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, '기존 HD_TAX_CALCULATE_AGREE을 삭제하는중 오류가 발생했습니다.');
         ROLLBACK;
         RETURN;
   END;

   /* ---------------------------------------------------------------------------------------*/
   OPEN CURCUST(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURCUST
       INTO c_cust, c_seq,    c_bno,    c_hno,   c_cdt,
            c_ctag, c_square, c_cbno,   c_chno,  c_tdt,
            c_ldt,  c_tp,     c_custnm, c_ccust, c_csang,
            c_ccon, c_ccat,   c_addr1,  c_addr2, c_deptnm,
            c_dh;
      EXIT WHEN CURCUST%NOTFOUND;

      /* ------------------------------------------------------------------------------------*/
      /* SELLDETAIL -> TAX ------------------------------------------------------------------*/
      IF c_ctag = '1' THEN BEGIN ----------------현계약자
         IF c_tp = '2' THEN BEGIN
            v_fr := as_fr; v_to := as_to;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
      END; ELSIF c_ctag = '2' THEN BEGIN -------------명의변경
         IF c_tp = '2' THEN BEGIN
            IF c_ldt <= as_fr THEN BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := c_ldt; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := c_ldt; v_to := as_to;
               END; END IF;
            END; ELSE  BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := as_fr; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := as_fr; v_to := as_to;
               END; END IF;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
/*
         IF c_ldt <= as_fr THEN BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; END IF;
         END; ELSE  BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; END IF;
*/
      END; ELSIF c_ctag = '3' THEN BEGIN -------------해약
         v_fr := as_fr; v_to := c_cdt;
      END; ELSE BEGIN ---------------------------동호변경
         IF c_tp = '2' THEN BEGIN
            IF c_ldt <= as_fr THEN BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := c_ldt; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := c_ldt; v_to := as_to;
               END; END IF;
            END; ELSE  BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := as_fr; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := as_fr; v_to := as_to;
               END; END IF;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
/*
         IF c_ldt <= as_fr THEN BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; END IF;
         END; ELSE  BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; END IF;
*/
      END; END IF;

	  IF c_tp <> '3' THEN BEGIN  -->>

      OPEN CURDETL(c_cust, c_seq, v_fr, v_to);
      LOOP
         FETCH CURDETL
          INTO d_counts, d_adt, d_land, d_build, d_vat, d_ldt, d_countsnm;
         EXIT WHEN CURDETL%NOTFOUND;

         IF d_land + d_build + d_vat <> 0 THEN BEGIN
            IF d_adt >= d_ldt THEN BEGIN
               IF d_vat <> 0 THEN BEGIN
                  BEGIN
                     -- 건물가 세금계산서
                     INSERT INTO HD_TAX_CALCULATE_AGREE
                             (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                              TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                              CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                              REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                              BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                              SPECIALNAME,     REMARK,
                              INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                      VALUES (as_dept,         as_htag,    d_counts,    1,        '1',
                              NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                              c_ctag,          '',         '',          c_square, c_csang,
                              c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                              TO_CHAR(10 - LENGTH(TO_CHAR(d_build))), d_build, 0, d_build, d_vat,
                              c_deptnm,        c_dh || d_countsnm,
                              as_user,         v_sysdt,    '',          '');
                     EXCEPTION
                        WHEN OTHERS THEN
                           dbms_output.put_line(sqlerrm);
                           dbms_output.put_line('1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                           RAISE_APPLICATION_ERROR(-20002, sqlerrm || '<1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts || '-' || c_bno|| '-' || c_hno);
                           ROLLBACK;
                           RETURN;
                  END;

                  BEGIN
                     -- 토지가 계산서
                     INSERT INTO HD_TAX_CALCULATE_AGREE
                             (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                              TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                              CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                              REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                              BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                              SPECIALNAME,     REMARK,
                              INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                      VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                              NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                              c_ctag,          '',         '',          c_square, c_csang,
                              c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                              TO_CHAR(10 - LENGTH(TO_CHAR(d_land))), d_land, d_land, 0, 0,
                              c_deptnm,        c_dh || d_countsnm,
                              as_user,         v_sysdt,    '',          '');
                     EXCEPTION
                        WHEN OTHERS THEN
                           dbms_output.put_line(sqlerrm);
                           RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:5 생성하는중 오류가 발생했습니다.');
                           RAISE_APPLICATION_ERROR(-20002, '2> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                           ROLLBACK;
                           RETURN;
                  END;
               END; ELSE BEGIN
                     -- 계산서 발행분
                     INSERT INTO HD_TAX_CALCULATE_AGREE
                             (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                              TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                              CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                              REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                              BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                              SPECIALNAME,     REMARK,
                              INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                      VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                              NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                              c_ctag,          '',         '',          c_square, c_csang,
                              c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                              TO_CHAR(10 - LENGTH(TO_CHAR(d_land + d_build))), d_land + d_build, d_land, d_build, d_vat,
                              c_deptnm,        c_dh || d_countsnm,
                              as_user,         v_sysdt,    '',          '');
                     EXCEPTION
                        WHEN OTHERS THEN
                           dbms_output.put_line(sqlerrm);
                           RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:6 생성하는중 오류가 발생했습니다.');
                           RAISE_APPLICATION_ERROR(-20002, '3> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                           ROLLBACK;
                           RETURN;
               END; END IF;
            END; END IF;
         END; END IF;
      END LOOP;
      CLOSE CURDETL;
	  END; END IF;     -->>
      /* ------------------------------------------------------------------------------------*/

      /* ------------------------------------------------------------------------------------*/
      /* 해약시 -----------------------------------------------------------------------------*/
      IF c_tp = '3' THEN BEGIN
         IF c_cdt > as_to THEN BEGIN
            OPEN CURDETL(c_cust, c_seq, as_fr, c_cdt);
            LOOP
               FETCH CURDETL
                INTO d_counts, d_adt, d_land, d_build, d_vat, d_ldt, d_countsnm;
               EXIT WHEN CURDETL%NOTFOUND;

               IF d_land + d_build + d_vat <> 0 THEN BEGIN
                  IF d_adt >= d_ldt THEN BEGIN
                     IF d_vat <> 0 THEN BEGIN
                        BEGIN
                           -- 건물가 세금계산서
                           INSERT INTO HD_TAX_CALCULATE_AGREE
                                   (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                    CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,    d_counts,    1,        '1',
                                    NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                    c_ctag,          '',         '',          c_square, c_csang,
                                    c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_build))), d_build, 0, d_build, d_vat,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,    '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:7 생성하는중 오류가 발생했습니다.');
                                 RAISE_APPLICATION_ERROR(-20002, '4> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                        END;

                        BEGIN
                           -- 토지가 계산서
                           INSERT INTO HD_TAX_CALCULATE_AGREE
                                   (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                    CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                                    NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                    c_ctag,          '',         '',          c_square, c_csang,
                                    c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_land))), d_land, d_land, 0, 0,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,    '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:8 생성하는중 오류가 발생했습니다.');
                                 RAISE_APPLICATION_ERROR(-20002, '5> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                        END;
                     END; ELSE BEGIN
                           -- 계산서 발행분
                           INSERT INTO HD_TAX_CALCULATE_AGREE
                                   (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                    CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                                    NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                    c_ctag,          '',         '',          c_square, c_csang,
                                    c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_land + d_build))), d_land + d_build, d_land, d_build, d_vat,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,    '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:9 생성하는중 오류가 발생했습니다.');
                                 RAISE_APPLICATION_ERROR(-20002, '6> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                     END; END IF;
                  END; END IF;
               END; END IF;
            END LOOP;
            CLOSE CURDETL;
         END; END IF;

         v_aland := 0; v_abuild := 0; v_avat := 0;
         v_rland := 0; v_rbuild := 0; v_rvat := 0;

         SELECT SUM(LANDAMT), SUM(BUILDAMT), SUM(VATAMT)
           INTO v_aland,      v_abuild,      v_avat
           FROM HD_HOUS_SELLDETAIL
          WHERE CUST_CODE  = c_cust
            AND SEQ        = c_seq
            AND AGREEDATE <= c_cdt
            AND COUNTS    <> '99';

         SELECT SUM(RECEIPTLANDAMT), SUM(RECEIPTBUILDAMT), SUM(RECEIPTVATAMT)
           INTO v_rland,             v_rbuild,             v_rvat
           FROM HD_HOUS_INCOME
          WHERE CUST_CODE    = c_cust
            AND SEQ          = c_seq
            AND COUNTS       = '99';

--         IF v_aland + v_abuild + v_avat < v_rland + v_rbuild + v_rvat THEN BEGIN
--            v_aland  := v_rland; v_abuild := v_rbuild; v_avat := v_rvat;
--         END; END IF;

         IF v_rvat > 0 THEN BEGIN
            BEGIN
               -- 건물가 세금계산서
               INSERT INTO HD_TAX_CALCULATE_AGREE
                       (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                        TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                        CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                        REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                        BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                        SPECIALNAME,     REMARK,
                        INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                VALUES (as_dept,         as_htag,    '00',        0,        '1',
                        NVL(c_ccust, c_cust), '1',        c_cdt,       c_bno,    c_hno,
                        c_ctag,          '',         '',          c_square, c_csang,
                        c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                        TO_CHAR(10 - LENGTH(TO_CHAR(v_rbuild))), v_rbuild , 0, v_rbuild , v_rvat ,
                        c_deptnm,        c_dh || '해약 환불',
                        as_user,         v_sysdt,    '',          '');
               EXCEPTION
                  WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:10 생성하는중 오류가 발생했습니다.');
                     RAISE_APPLICATION_ERROR(-20002, '7> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                     ROLLBACK;
                     RETURN;
            END;

            BEGIN
               -- 토지가 계산서
               INSERT INTO HD_TAX_CALCULATE_AGREE
                       (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                        TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                        CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                        REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                        BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                        SPECIALNAME,     REMARK,
                        INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                VALUES (as_dept,         as_htag,    '00',        0,        '2',
                        NVL(c_ccust, c_cust), '1',        c_cdt,       c_bno,    c_hno,
                        c_ctag,          '',         '',          c_square, c_csang,
                        c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                        TO_CHAR(10 - LENGTH(TO_CHAR(v_rland))), v_rland , v_rland , 0, 0,
                        c_deptnm,        c_dh || '해약 환불',
                        as_user,         v_sysdt,    '',          '');
               EXCEPTION
                  WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:11 생성하는중 오류가 발생했습니다.');
                     RAISE_APPLICATION_ERROR(-20002, '8> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                     ROLLBACK;
                     RETURN;
            END;
         END; ELSE BEGIN
            -- 계산서 발행분
            INSERT INTO HD_TAX_CALCULATE_AGREE
                    (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                     TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                     CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                     REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                     BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                     SPECIALNAME,     REMARK,
                     INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
             VALUES (as_dept,         as_htag,    '00',        0,        '2',
                     NVL(c_ccust, c_cust), '1',        c_cdt,       c_bno,    c_hno,
                     c_ctag,          '',         '',          c_square, c_csang,
                     c_custnm,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                     TO_CHAR(10 - LENGTH(TO_CHAR(v_rland + v_rbuild))), (v_rland + v_rbuild) , v_rland , v_rbuild , 0,
                     c_deptnm,        c_dh || '해약 환불',
                     as_user,         v_sysdt,    '',          '');
            EXCEPTION
               WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_AGREE:12 생성하는중 오류가 발생했습니다.');
                  RAISE_APPLICATION_ERROR(-20002, '9> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                  ROLLBACK;
                  RETURN;
         END; END IF;
      END; END IF;
      /* ------------------------------------------------------------------------------------*/

   END LOOP;
   CLOSE CURCUST;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CALC_MODIFYREALSUM;

CREATE OR REPLACE PROCEDURE "PROC_HD_CALC_MODIFYREALSUM" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일
   as_to   IN VARCHAR2, --종료일
   as_tp   IN VARCHAR2, --type 1:전체동호 2:특정동호
   as_bno  IN VARCHAR2, --특정동
   as_hno  IN VARCHAR2, --특정호
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/* CUST */
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_cdt          VARCHAR2(8);
c_ctag         VARCHAR2(1);
c_square       NUMBER(8, 4);
c_cbno         VARCHAR2(10);
c_chno         VARCHAR2(10);
c_tdt          VARCHAR2(8);
c_ldt          VARCHAR2(8);
c_tp           VARCHAR2(1);
c_custnm       VARCHAR2(50);
c_ccust        VARCHAR2(20);
c_csang        VARCHAR2(30);
c_ccon         VARCHAR2(30);
c_ccat         VARCHAR2(20);
c_addr1        VARCHAR2(100);
c_addr2        VARCHAR2(100);
c_deptnm       VARCHAR2(150);
c_dh           VARCHAR2(20);

/* INCOME */
i_counts       VARCHAR2(2);
i_times        NUMBER(5);
i_rdt          VARCHAR2(8);
i_rlamt        NUMBER(12);
i_rbamt        NUMBER(12);
i_rvamt        NUMBER(12);
i_ldt          VARCHAR2(8);
i_cdt          VARCHAR2(8);
i_countsnm     VARCHAR2(100);

/* DETAIL */
d_counts       VARCHAR2(2);
d_adt          VARCHAR2(8);
d_land         NUMBER(12);
d_build        NUMBER(12);
d_vat          NUMBER(12);
d_ldt          VARCHAR2(8);
d_countsnm     VARCHAR2(100);

/* VALUES */
v_fr           VARCHAR2(10);
v_to           VARCHAR2(10);
v_aland        NUMBER(12);
v_abuild       NUMBER(12);
v_avat         NUMBER(12);
v_rland        NUMBER(12);
v_rbuild       NUMBER(12);
v_rvat         NUMBER(12);
v_dland        NUMBER(12);
v_dbuild       NUMBER(12);
v_dvat         NUMBER(12);

/* SYSYTEM */
v_sysdt        VARCHAR2(14);
v_pass         VARCHAR2(10);
v_cnt          NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* CUST */
CURSOR CURCUST(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT X.CUST_CODE,      X.SEQ,           X.BUILDNO,      X.HOUSENO,
       X.CHANGEDATE,     X.CHANGETAG,     X.SQUARE,
       X.CHILD_BUILDNO,  X.CHILD_HOUSENO, X.CONTRACTDATE,
       X.LASTCHANGEDATE, X.TP,            Y.CUST_NAME,
       REPLACE(X.CO_CUSTCODE, '-', ''),
       X.CO_SANGHO,     X.CO_CONDITION, X.CO_CATEGORY,
       DECODE(a_htag, '1', Y.ADDR1, Z.ADDR1) AS ADDR1,
       DECODE(a_htag, '1', Y.ADDR2, Z.ADDR2) AS ADDR2,
       Z.DEPT_NAME,
       X.BUILDNO || '동 ' || X.HOUSENO || '호 - '
  FROM (SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '1' AS TP --영수
          FROM HD_HOUS_INCOME A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE    = B.CUST_CODE
           AND A.SEQ          = B.SEQ
           AND A.COUNTS      <> '99'
           AND A.TIMES        < 90
           AND A.RECEIPTDATE <= B.CHANGEDATE
           AND A.RECEIPTDATE >= B.LASTCHANGEDATE
           AND ((B.CHANGETAG  = '1') OR
                (B.CHANGETAG <> '1' AND A.RECEIPTDATE < B.CHANGEDATE))
           AND B.CHANGETAG   <> '3'
--           AND (A.DELAYDAYS    = 0 or A.DELAYAMT = 0)
           AND B.LEASETAG     = 'N'
           AND B.DEPT_CODE    = a_dept
           AND B.HOUSETAG     = a_htag
           AND A.RECEIPTDATE  BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = as_bno AND B.HOUSENO = as_hno))
--                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
         UNION ALL
        SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '2' AS TP --청구
          FROM HD_HOUS_SELLDETAIL A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE  = B.CUST_CODE
           AND A.SEQ        = B.SEQ
           AND A.COUNTS    <> '99'
           AND ((B.CHANGETAG       = '1'          AND
                 B.LASTCHANGEDATE <= A.AGREEDATE  AND
                 A.AGREEDATE       < B.CHANGEDATE    ) OR
                (B.CHANGETAG      <> '1'          AND
                 A.AGREEDATE       <= a_to            ))
           AND B.LEASETAG = 'N'
           AND B.DEPT_CODE  = a_dept
           AND B.HOUSETAG   = a_htag
           AND A.AGREEDATE BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = as_bno AND B.HOUSENO = as_hno))
--                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
           AND NOT EXISTS ( SELECT NULL        -- 2012.09.14 약정일이나 할인한건, 그중 다 완납한 건은 제외할려고 이걸 추가함 영수랑 이중으로 나와서   
                                       FROM HD_HOUS_INCOME C
                            WHERE  A.CUST_CODE  = C.CUST_CODE
                           AND A.SEQ        = C.SEQ
                           AND A.COUNTS     = C.COUNTS
                           AND last_day(A.AGREEDATE)  >= C.RECEIPTDATE 
                           HAVING SUM(C.RECEIPTAMT) = A.BUNAMT )
         UNION ALL
        SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '3' AS TP --해약
          FROM HD_HOUS_INCOME A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE  = B.CUST_CODE
           AND A.SEQ        = B.SEQ
           AND A.COUNTS    <> '99'
           AND B.CHANGETAG  = '3'
           AND B.LEASETAG   = 'N'
           AND B.DEPT_CODE  = a_dept
           AND B.HOUSETAG   = a_htag
           AND B.CHANGEDATE BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = as_bno AND B.HOUSENO = as_hno))
--                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
       ) X,
       VW_HD_CODE_CUSTOMER Y,
       HD_CODE_DEPT Z
 WHERE X.CUST_CODE = Y.CUST_CODE
   AND Z.DEPT_CODE = a_dept
 ORDER BY X.BUILDNO, X.HOUSENO, X.TP;

/*---------------------------------------------------------------------------*/
/* INCOME */
CURSOR CURINCO(a_cust IN VARCHAR2, a_seq IN NUMBER, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.COUNTS,
       A.TIMES,
       A.RECEIPTDATE,
       A.REALLANDAMT,
       A.REALBUILDAMT,
       A.REALVATAMT,
       C.LASTCHANGEDATE,
       C.CHANGEDATE,
       D.NM
  FROM HD_HOUS_INCOME A,
       HD_HOUS_SELLDETAIL B,
       HD_HOUS_SELL C,
       HD_CODE_COMM D
 WHERE A.CUST_CODE  = B.CUST_CODE
   AND A.SEQ        = B.SEQ
   AND A.CUST_CODE  = C.CUST_CODE
   AND A.SEQ        = C.SEQ
   AND A.COUNTS     = B.COUNTS
   AND A.COUNTS     = D.CODE
   AND D.GUBUN      = '02'
   AND A.CUST_CODE  = a_cust
   AND A.SEQ        = a_seq
   AND A.COUNTS    <= '90'
   AND A.TIMES     < 90
   AND A.RECEIPTDATE BETWEEN a_fr AND a_to
   AND A.RECEIPTDATE <= C.CHANGEDATE
   AND A.RECEIPTDATE <= last_day(B.AGREEDATE)
   AND (A.DELAYDAYS = 0 or b.PERPECTTAG = 'Y')
   AND ((C.CHANGETAG    = '1'               AND
         A.RECEIPTDATE >= C.LASTCHANGEDATE     ) OR
        (C.CHANGETAG   <> '1'               AND
         A.RECEIPTDATE < C.CHANGEDATE          ) OR
         A.COUNTS = 0                           )
   AND C.LEASETAG = 'N';

/*---------------------------------------------------------------------------*/
/* SELLDETAIL */
CURSOR CURDETL(a_cust IN VARCHAR2, a_seq IN NUMBER, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.COUNTS,
       A.AGREEDATE,
       A.LANDAMT  - NVL(SUM(A.RLAMT), 0),
       A.BUILDAMT - NVL(SUM(A.RBAMT), 0),
       A.VATAMT   - NVL(SUM(A.RVAMT), 0),
       A.LASTCHANGEDATE,
       MAX(B.NM)
  FROM (SELECT A.COUNTS,
               NVL(B.TIMES, 0) AS TIMES,
               A.AGREEDATE,
               A.LANDAMT,
               A.BUILDAMT,
               A.VATAMT,
               NVL(B.RECEIPTLANDAMT, 0)  AS RLAMT,
               NVL(B.RECEIPTBUILDAMT, 0) AS RBAMT,
               NVL(B.RECEIPTVATAMT, 0)   AS RVAMT,
               C.LASTCHANGEDATE
          FROM HD_HOUS_SELLDETAIL A,
               HD_HOUS_INCOME B,
               HD_HOUS_SELL C
         WHERE A.CUST_CODE  = B.CUST_CODE (+)
           AND A.SEQ        = B.SEQ       (+)
           AND A.CUST_CODE  = C.CUST_CODE (+)
           AND A.SEQ        = C.SEQ       (+)
           AND A.COUNTS     = B.COUNTS    (+)
           AND A.CUST_CODE  = a_cust
           AND A.SEQ        = a_seq
           AND A.COUNTS    <= '90'
           AND B.TIMES (+)  < 90
           AND A.AGREEDATE >= C.CONTRACTDATE
           AND A.AGREEDATE  < C.CHANGEDATE
           AND C.LEASETAG   = 'N'
           AND ((C.CHANGETAG  = '1' AND A.AGREEDATE >= C.LASTCHANGEDATE) OR
                (C.CHANGETAG <> '1' AND A.AGREEDATE  < C.CHANGEDATE    ))
           AND A.AGREEDATE BETWEEN as_fr AND as_to
--           AND B.RECEIPTDATE (+) <= A.AGREEDATE
           AND B.RECEIPTDATE (+) <= F_HD_GET_HOLIDAY(A.DEPT_CODE, A.HOUSETAG, A.AGREEDATE, 'Y')
       ) A,
       HD_CODE_COMM B
 WHERE A.AGREEDATE BETWEEN a_fr AND a_to
   AND A.COUNTS = B.CODE
   AND B.GUBUN  = '02'
 GROUP BY A.COUNTS, A.AGREEDATE, A.LANDAMT, A.BUILDAMT, A.VATAMT, A.LASTCHANGEDATE;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_pass  := 'XXXXXXXXXX';
   v_cnt   := 0;

   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_DEPT
    WHERE DEPT_CODE = as_dept
      AND TAX_TAG   = '2';

   IF v_cnt < 1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '집계하려는 현장은 실납입금기준의 현장이 아닙니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

   /* ---------------------------------------------------------------------------------------*/
   BEGIN
      DELETE FROM HD_TAX_CALCULATE_REAL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND ((as_tp = '1') OR (BUILDNO = LPAD(as_bno, 4, ' ') AND HOUSENO = LPAD(as_hno, 4, ' ')))
         AND RECEIPTDATE BETWEEN as_fr AND as_to;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, '기존 HD_TAX_CALCULATE_REAL을 삭제하는중 오류가 발생했습니다.');
         ROLLBACK;
         RETURN;
   END;

   /* ---------------------------------------------------------------------------------------*/

   OPEN CURCUST(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURCUST
       INTO c_cust, c_seq,    c_bno,    c_hno,   c_cdt,
            c_ctag, c_square, c_cbno,   c_chno,  c_tdt,
            c_ldt,  c_tp,     c_custnm, c_ccust, c_csang,
            c_ccon, c_ccat,   c_addr1,  c_addr2, c_deptnm,
            c_dh;
      EXIT WHEN CURCUST%NOTFOUND;

      /* ------------------------------------------------------------------------------------*/
      /* INCOME -> TAX ----------------------------------------------------------------------*/
      IF c_ctag = '1' THEN BEGIN
         IF c_tp = '1' THEN BEGIN
            IF c_ldt >= as_fr THEN BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
      END; ELSE BEGIN
         IF c_tp = '2' THEN BEGIN
            IF c_ldt >= as_fr THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
      END; END IF;

      OPEN CURINCO(c_cust, c_seq, v_fr, v_to);
      LOOP
         FETCH CURINCO
          INTO i_counts, i_times, i_rdt, i_rlamt, i_rbamt, i_rvamt, i_ldt, i_cdt, i_countsnm;
         EXIT WHEN CURINCO%NOTFOUND;

         BEGIN
            IF (i_counts = '00' OR i_rdt >= i_ldt) THEN BEGIN
               IF i_rvamt <> 0 THEN BEGIN
                  BEGIN
                     -- 건물가 세금계산서
                     INSERT INTO HD_TAX_CALCULATE_REAL
                             (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                              TRANSACTIONCODE,
                              DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                              CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                              REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                              BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                              SPECIALNAME,     REMARK,
                              INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                      VALUES (as_dept,         as_htag,     i_counts,    i_times,  '1',
                              NVL(c_ccust, c_cust),
                              '1',             i_rdt,       c_bno,       c_hno,
                              c_ctag,          '',          '',          c_square, c_custnm,
                              c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                              TO_CHAR(10 - LENGTH(TO_CHAR(i_rbamt))), i_rbamt, 0, i_rbamt, i_rvamt,
                              c_deptnm,        c_dh || i_countsnm,
                              as_user,         v_sysdt,     '',          '');
                     EXCEPTION
                        WHEN OTHERS THEN
                           dbms_output.put_line(sqlerrm);
                           dbms_output.put_line('1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || i_counts);
                           RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:1 생성하는중 오류가 발생했습니다.');
                           ROLLBACK;
                           RETURN;
                  END;
                  IF i_rlamt <> 0 THEN BEGIN
                     -- 토지가 계산서
                     INSERT INTO HD_TAX_CALCULATE_REAL
                             (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                              TRANSACTIONCODE,
                              DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                              CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                              REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                              BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                              SPECIALNAME,     REMARK,
                              INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                      VALUES (as_dept,         as_htag,     i_counts,    i_times,  '2',
                              NVL(c_ccust, c_cust),
                              '1',             i_rdt,       c_bno,       c_hno,
                              c_ctag,          '',          '',          c_square, c_custnm,
                              c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                              TO_CHAR(10 - LENGTH(TO_CHAR(i_rlamt))), i_rlamt, i_rlamt, 0, 0,
                              c_deptnm,        c_dh || i_countsnm,
                              as_user,         v_sysdt,     '',          '');
                     EXCEPTION
                        WHEN OTHERS THEN
                           dbms_output.put_line(sqlerrm);
                           dbms_output.put_line('2> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || i_counts);
                           RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:2 생성하는중 오류가 발생했습니다.');
                           ROLLBACK;
                           RETURN;
                  END; END IF;
               END; ELSE BEGIN
                  -- 계산서 발행분
                  INSERT INTO HD_TAX_CALCULATE_REAL
                          (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                           TRANSACTIONCODE,
                           DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                           CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                           REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                           BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                           SPECIALNAME,     REMARK,
                           INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                   VALUES (as_dept,         as_htag,     i_counts,    i_times,  '2',
                           NVL(c_ccust, c_cust),
                           '1',             i_rdt,       c_bno,       c_hno,
                           c_ctag,          '',          '',          c_square, c_custnm,
                           c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                           TO_CHAR(10 - LENGTH(TO_CHAR(i_rlamt + i_rbamt))), i_rlamt + i_rbamt, i_rlamt, i_rbamt, i_rvamt,
                           c_deptnm,        c_dh || i_countsnm,
                           as_user,         v_sysdt,     '',          '');
                  EXCEPTION
                     WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        dbms_output.put_line('3> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || i_counts);
                        RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:3 생성하는중 오류가 발생했습니다.');
                        ROLLBACK;
                        RETURN;
               END; END IF;
            END; END IF;
         END;
      END LOOP;
      CLOSE CURINCO;
      /* ------------------------------------------------------------------------------------*/

      /* ------------------------------------------------------------------------------------*/
      /* SELLDETAIL -> TAX ------------------------------------------------------------------*/
      IF c_ctag = '1' THEN BEGIN ----------------현계약자
         IF c_tp = '2' THEN BEGIN
            v_fr := as_fr; v_to := as_to;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
      END; ELSIF c_ctag = '2' THEN BEGIN -------------명의변경
         IF c_tp = '2' THEN BEGIN
            IF c_ldt <= as_fr THEN BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := c_ldt; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := c_ldt; v_to := as_to;
               END; END IF;
            END; ELSE  BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := as_fr; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := as_fr; v_to := as_to;
               END; END IF;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
/*
         IF c_ldt <= as_fr THEN BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; END IF;
         END; ELSE  BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; END IF;
*/
      END; ELSIF c_ctag = '3' THEN BEGIN -------------해약
         v_fr := as_fr; v_to := c_cdt;
      END; ELSE BEGIN ---------------------------동호변경
         IF c_tp = '2' THEN BEGIN
            IF c_ldt <= as_fr THEN BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := c_ldt; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := c_ldt; v_to := as_to;
               END; END IF;
            END; ELSE  BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := as_fr; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := as_fr; v_to := as_to;
               END; END IF;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
/*
         IF c_ldt <= as_fr THEN BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; END IF;
         END; ELSE  BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; END IF;
*/
      END; END IF;

      IF c_tp <> '3' THEN BEGIN
         OPEN CURDETL(c_cust, c_seq, v_fr, v_to);
         LOOP
            FETCH CURDETL
             INTO d_counts, d_adt, d_land, d_build, d_vat, d_ldt, d_countsnm;
            EXIT WHEN CURDETL%NOTFOUND;

            IF d_land + d_build + d_vat <> 0 THEN BEGIN
               IF d_adt >= d_ldt THEN BEGIN
                  IF d_vat <> 0 THEN BEGIN
                     BEGIN
                        -- 건물가 세금계산서
                        INSERT INTO HD_TAX_CALCULATE_REAL
                                (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                                 TRANSACTIONCODE,
                                 DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                                 CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                                 REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                                 BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                                 SPECIALNAME,     REMARK,
                                 INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                         VALUES (as_dept,         as_htag,     d_counts,    1,        '1',
                                 NVL(c_ccust, c_cust),
                                 '2',             d_adt,       c_bno,       c_hno,
                                 c_ctag,          '',          '',          c_square, c_custnm,
                                 c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                                 TO_CHAR(10 - LENGTH(TO_CHAR(d_build))), d_build, 0, d_build, d_vat,
                                 c_deptnm,        c_dh || d_countsnm,
                                 as_user,         v_sysdt,     '',          '');
                        EXCEPTION
                           WHEN OTHERS THEN
                              dbms_output.put_line(sqlerrm);
                              RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:4 생성하는중 오류가 발생했습니다.');
                              RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                              ROLLBACK;
                              RETURN;
                     END;

                     BEGIN
                        -- 토지가 계산서
                        INSERT INTO HD_TAX_CALCULATE_REAL
                                (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                                 TRANSACTIONCODE,
                                 DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                                 CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                                 REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                                 BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                                 SPECIALNAME,     REMARK,
                                 INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID,  CHG_DATE)
                         VALUES (as_dept,         as_htag,     d_counts,    1,        '2',
                                 NVL(c_ccust, c_cust),
                                 '2',             d_adt,       c_bno,       c_hno,
                                 c_ctag,          '',          '',          c_square, c_custnm,
                                 c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                                 TO_CHAR(10 - LENGTH(TO_CHAR(d_land))), d_land, d_land, 0, 0,
                                 c_deptnm,        c_dh || d_countsnm,
                                 as_user,         v_sysdt,     '',          '');
                        EXCEPTION
                           WHEN OTHERS THEN
                              dbms_output.put_line(sqlerrm);
                              RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:5 생성하는중 오류가 발생했습니다.');
                              RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                              ROLLBACK;
                              RETURN;
                     END;
                  END; ELSE BEGIN
                        -- 계산서 발행분
                        INSERT INTO HD_TAX_CALCULATE_REAL
                                (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                                 TRANSACTIONCODE,
                                 DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                                 CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                                 REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                                 BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                                 SPECIALNAME,     REMARK,
                                 INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                         VALUES (as_dept,         as_htag,     d_counts,    1,        '2',
                                 NVL(c_ccust, c_cust),
                                 '2',             d_adt,       c_bno,       c_hno,
                                 c_ctag,          '',          '',          c_square, c_custnm,
                                 c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                                 TO_CHAR(10 - LENGTH(TO_CHAR(d_land + d_build))), d_land + d_build, d_land, d_build, d_vat,
                                 c_deptnm,        c_dh || d_countsnm,
                                 as_user,         v_sysdt,     '',          '');
                        EXCEPTION
                           WHEN OTHERS THEN
                              dbms_output.put_line(sqlerrm);
                              RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:6 생성하는중 오류가 발생했습니다.');
                              RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                              ROLLBACK;
                              RETURN;
                  END; END IF;
               END; END IF;
            END; END IF;
         END LOOP;
         CLOSE CURDETL;
      END; END IF;
      /* ------------------------------------------------------------------------------------*/

      /* ------------------------------------------------------------------------------------*/
      /* 해약시 -----------------------------------------------------------------------------*/
      IF c_tp = '3' THEN BEGIN
         IF c_cdt > as_to THEN BEGIN
            OPEN CURDETL(c_cust, c_seq, as_fr, c_cdt);
            LOOP
               FETCH CURDETL
                INTO d_counts, d_adt, d_land, d_build, d_vat, d_ldt, d_countsnm;
               EXIT WHEN CURDETL%NOTFOUND;

               IF d_land + d_build + d_vat <> 0 THEN BEGIN
                  IF d_adt >= d_ldt THEN BEGIN
                     IF d_vat <> 0 THEN BEGIN
                        BEGIN
                           -- 건물가 세금계산서
                           INSERT INTO HD_TAX_CALCULATE_REAL
                                   (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE,
                                    DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                                    CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,     d_counts,    1,        '1',
                                    NVL(c_ccust, c_cust),
                                    '2',             d_adt,       c_bno,       c_hno,
                                    c_ctag,          '',          '',          c_square, c_custnm,
                                    c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_build))), d_build, 0, d_build, d_vat,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,     '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:7 생성하는중 오류가 발생했습니다.');
                                 RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                        END;

                        BEGIN
                           -- 토지가 계산서
                           INSERT INTO HD_TAX_CALCULATE_REAL
                                   (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE,
                                    DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                                    CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,     d_counts,    1,        '2',
                                    NVL(c_ccust, c_cust),
                                    '2',             d_adt,       c_bno,       c_hno,
                                    c_ctag,          '',          '',          c_square, c_custnm,
                                    c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_land))), d_land, d_land, 0, 0,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,     '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:8 생성하는중 오류가 발생했습니다.');
                                 RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                        END;
                     END; ELSE BEGIN
                           -- 계산서 발행분
                           INSERT INTO HD_TAX_CALCULATE_REAL
                                   (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE,
                                    DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                                    CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,     d_counts,    1,        '2',
                                    NVL(c_ccust, c_cust),
                                    '2',             d_adt,       c_bno,       c_hno,
                                    c_ctag,          '',          '',          c_square, c_custnm,
                                    c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_land + d_build))), d_land + d_build, d_land, d_build, d_vat,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,     '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:9 생성하는중 오류가 발생했습니다.');
                                 RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                     END; END IF;
                  END; END IF;
               END; END IF;
            END LOOP;
            CLOSE CURDETL;
         END; END IF;

         v_aland := 0; v_abuild := 0; v_avat := 0;
         v_rland := 0; v_rbuild := 0; v_rvat := 0;

         SELECT SUM(LANDAMT), SUM(BUILDAMT), SUM(VATAMT)
           INTO v_aland,      v_abuild,      v_avat
           FROM HD_HOUS_SELLDETAIL
          WHERE CUST_CODE  = c_cust
            AND SEQ        = c_seq
            AND AGREEDATE <= c_cdt
            AND COUNTS    <> '99';

         SELECT SUM(RECEIPTLANDAMT), SUM(RECEIPTBUILDAMT), SUM(RECEIPTVATAMT),
                SUM(REALLANDAMT),    SUM(REALBUILDAMT),    SUM(REALVATAMT)
           INTO v_rland,             v_rbuild,             v_rvat,
                v_dland,             v_dbuild,             v_dvat
           FROM HD_HOUS_INCOME
          WHERE CUST_CODE    = c_cust
            AND SEQ          = c_seq
            AND COUNTS       = '99';

--         IF v_aland + v_abuild + v_avat < v_rland + v_rbuild + v_rvat THEN BEGIN
--            v_aland  := v_dland; v_abuild := v_dbuild; v_avat := v_dvat;
--         END; ELSE BEGIN
--            v_aland  := v_aland  - (v_rland  - v_dland);
--            v_abuild := v_abuild - (v_rbuild - v_dbuild);
--            v_avat   := v_avat   - (v_rvat   - v_dvat);
--         END; END IF;

         IF v_rvat > 0 THEN BEGIN
            BEGIN
               -- 건물가 세금계산서
               INSERT INTO HD_TAX_CALCULATE_REAL
                       (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                        TRANSACTIONCODE,
                        DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                        CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                        REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                        BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                        SPECIALNAME,     REMARK,
                        INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                VALUES (as_dept,         as_htag,     '00',        0,        '1',
                        NVL(c_ccust, c_cust),
                        '1',             c_cdt,       c_bno,       c_hno,
                        c_ctag,          '',          '',          c_square, c_custnm,
                        c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                        TO_CHAR(10 - LENGTH(TO_CHAR(v_rbuild))), v_rbuild , 0, v_rbuild , v_rvat ,
                        c_deptnm,        c_dh || '해약 환불',
                        as_user,         v_sysdt,     '',          '');
               EXCEPTION
                  WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:10 생성하는중 오류가 발생했습니다.');
                     RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                     ROLLBACK;
                     RETURN;
            END;

            BEGIN
               -- 토지가 계산서
               INSERT INTO HD_TAX_CALCULATE_REAL
                       (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                        TRANSACTIONCODE,
                        DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                        CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                        REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                        BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                        SPECIALNAME,     REMARK,
                        INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
                VALUES (as_dept,         as_htag,     '00',        0,        '2',
                        NVL(c_ccust, c_cust),
                        '1',             c_cdt,       c_bno,       c_hno,
                        c_ctag,          '',          '',          c_square, c_custnm,
                        c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                        TO_CHAR(10 - LENGTH(TO_CHAR(v_rland))), v_rland , v_rland , 0, 0,
                        c_deptnm,        c_dh || '해약 환불',
                        as_user,         v_sysdt,     '',          '');
               EXCEPTION
                  WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:11 생성하는중 오류가 발생했습니다.');
                     RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                     ROLLBACK;
                     RETURN;
            END;
         END; ELSE BEGIN
            -- 계산서 발행분
            INSERT INTO HD_TAX_CALCULATE_REAL
                    (DEPT_CODE,       HOUSETAG,    COUNTS,      TIMES,    CALCULATETAG,
                     TRANSACTIONCODE,
                     DEMANDTAG,       RECEIPTDATE, BUILDNO,     HOUSENO,
                     CHANGETAG,       KUN,         HO,          SQUARE,   SANGHO,
                     REPRESANTATION,  ADDR,        ADDR2,       UPTAE,    UPJONG,
                     BLANK,           SUPPLYAMT,   LANDAMT,     BUILDAMT, VATAMT,
                     SPECIALNAME,     REMARK,
                     INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID, CHG_DATE)
             VALUES (as_dept,         as_htag,     '00',        0,        '2',
                     NVL(c_ccust, c_cust),
                     '1',             c_cdt,       c_bno,       c_hno,
                     c_ctag,          '',          '',          c_square, c_custnm,
                     c_csang,         c_addr1,     c_addr2,     c_ccon,   c_ccat,
                     TO_CHAR(10 - LENGTH(TO_CHAR(v_rland + v_rbuild))), (v_rland + v_rbuild) , v_rland , v_rbuild , 0,
                     c_deptnm,        c_dh || '해약 환불',
                     as_user,         v_sysdt,     '',          '');
            EXCEPTION
               WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE_REAL:12 생성하는중 오류가 발생했습니다.');
                  RAISE_APPLICATION_ERROR(-20002, '1> ' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                  ROLLBACK;
                  RETURN;
         END; END IF;
      END; END IF;
      /* ------------------------------------------------------------------------------------*/

   END LOOP;
   CLOSE CURCUST;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CALC_MODIFYSUM;

CREATE OR REPLACE PROCEDURE "PROC_HD_CALC_MODIFYSUM" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일
   as_to   IN VARCHAR2, --종료일
   as_tp   IN VARCHAR2, --type 1:전체동호 2:특정동호
   as_bno  IN VARCHAR2, --특정동
   as_hno  IN VARCHAR2, --특정호
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/* CUST */
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_cdt          VARCHAR2(8);
c_ctag         VARCHAR2(1);
c_square       NUMBER(8, 4);
c_cbno         VARCHAR2(10);
c_chno         VARCHAR2(10);
c_tdt          VARCHAR2(8);
c_ldt          VARCHAR2(8);
c_tp           VARCHAR2(1);
c_custnm       VARCHAR2(50);
c_ccust        VARCHAR2(20);
c_csang        VARCHAR2(30);
c_ccon         VARCHAR2(30);
c_ccat         VARCHAR2(20);
c_addr1        VARCHAR2(100);
c_addr2        VARCHAR2(100);
c_deptnm       VARCHAR2(150);
c_dh           VARCHAR2(20);

/* INCOME */
i_counts       VARCHAR2(2);
i_times        NUMBER(5);
i_rdt          VARCHAR2(8);
i_rlamt        NUMBER(12);
i_rbamt        NUMBER(12);
i_rvamt        NUMBER(12);
i_ldt          VARCHAR2(8);
i_cdt          VARCHAR2(8);
i_countsnm     VARCHAR2(100);

/* DETAIL */
d_counts       VARCHAR2(2);
d_adt          VARCHAR2(8);
d_land         NUMBER(12);
d_build        NUMBER(12);
d_vat          NUMBER(12);
d_ldt          VARCHAR2(8);
d_countsnm     VARCHAR2(100);

/* VALUES */
v_fr           VARCHAR2(10);
v_to           VARCHAR2(10);
v_aland        NUMBER(12);
v_abuild       NUMBER(12);
v_avat         NUMBER(12);
v_rland        NUMBER(12);
v_rbuild       NUMBER(12);
v_rvat         NUMBER(12);

/* SYSYTEM */
v_sysdt        VARCHAR2(14);
v_pass         VARCHAR2(10);
v_cnt          NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* CUST */
CURSOR CURCUST(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT X.CUST_CODE,      X.SEQ,           X.BUILDNO,      X.HOUSENO,
       X.CHANGEDATE,     X.CHANGETAG,     X.SQUARE,
       X.CHILD_BUILDNO,  X.CHILD_HOUSENO, X.CONTRACTDATE,
       X.LASTCHANGEDATE, X.TP,            Y.CUST_NAME,
       REPLACE(X.CO_CUSTCODE, '-', ''),
       X.CO_SANGHO,     X.CO_CONDITION, X.CO_CATEGORY,
       DECODE(a_htag, '1', Y.ADDR1, '2', Y.ADDR1, Z.ADDR1) AS ADDR1,
       DECODE(a_htag, '1', Y.ADDR2, '2', Y.ADDR2, Z.ADDR2) AS ADDR2,
       Z.DEPT_NAME,
       X.BUILDNO || '동 ' || X.HOUSENO || '호 - '
  FROM (SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '1' AS TP --영수
          FROM HD_HOUS_INCOME A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE    = B.CUST_CODE
           AND A.SEQ          = B.SEQ
           AND A.COUNTS      <> '99'
           AND A.TIMES        < 90
--           AND A.RECEIPTDATE <= B.CHANGEDATE
           AND A.RECEIPTDATE >= B.LASTCHANGEDATE
           AND ((B.CHANGETAG  = '1') OR
                (B.CHANGETAG <> '1' AND A.RECEIPTDATE < B.CHANGEDATE))
           AND B.CHANGETAG   <> '3'
--           AND A.DELAYDAYS    = 0
           AND B.LEASETAG     = 'N'
           AND B.DEPT_CODE    = a_dept
           AND B.HOUSETAG     = a_htag
           AND A.RECEIPTDATE  BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
         UNION ALL
        SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '2' AS TP --청구
          FROM HD_HOUS_SELLDETAIL A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE  = B.CUST_CODE
           AND A.SEQ        = B.SEQ
           AND A.COUNTS    <> '99'
           AND A.AGREEDATE  < B.CHANGEDATE
           AND ((B.CHANGETAG  = '1' AND B.LASTCHANGEDATE <= A.AGREEDATE) OR
                (B.CHANGETAG <> '1' AND A.AGREEDATE       < a_to       ))
           AND B.LEASETAG = 'N'
           AND B.DEPT_CODE  = a_dept
           AND B.HOUSETAG   = a_htag
           AND A.AGREEDATE BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
         UNION ALL
        SELECT DISTINCT A.CUST_CODE,      A.SEQ,           B.BUILDNO,      B.HOUSENO,
                        B.CHANGEDATE,     B.CHANGETAG,     B.SQUARE,
                        B.CHILD_BUILDNO,  B.CHILD_HOUSENO, B.CONTRACTDATE,
                        B.CO_CUSTCODE,    B.CO_SANGHO,     B.CO_CONDITION, B.CO_CATEGORY,
                        B.LASTCHANGEDATE, '3' AS TP --해약
          FROM HD_HOUS_INCOME A,
               VW_HD_HOUS_SELL B
         WHERE A.CUST_CODE  = B.CUST_CODE
           AND A.SEQ        = B.SEQ
           AND A.COUNTS    <> '99'
           AND B.CHANGETAG  = '3'
           AND B.LEASETAG   = 'N'
           AND B.DEPT_CODE  = a_dept
           AND B.HOUSETAG   = a_htag
           AND B.CHANGEDATE BETWEEN a_fr AND a_to
           AND ((as_tp = '1') OR
                (B.BUILDNO = LPAD(as_bno, 4, ' ') AND B.HOUSENO = LPAD(as_hno, 4, ' ')))
       ) X,
       VW_HD_CODE_CUSTOMER Y,
       HD_CODE_DEPT Z
 WHERE X.CUST_CODE = Y.CUST_CODE
   AND Z.DEPT_CODE = a_dept
 ORDER BY X.BUILDNO, X.HOUSENO, X.TP;

/*---------------------------------------------------------------------------*/
/* INCOME */
CURSOR CURINCO(a_cust IN VARCHAR2, a_seq IN NUMBER, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.COUNTS,
       A.TIMES,
       A.RECEIPTDATE,
       A.RECEIPTLANDAMT,
       A.RECEIPTBUILDAMT,
       A.RECEIPTVATAMT,
       C.LASTCHANGEDATE,
       C.CHANGEDATE,
       D.NM
  FROM HD_HOUS_INCOME A,
       HD_HOUS_SELLDETAIL B,
       HD_HOUS_SELL C,
       HD_CODE_COMM D
 WHERE A.CUST_CODE  = B.CUST_CODE
   AND A.SEQ        = B.SEQ
   AND A.CUST_CODE  = C.CUST_CODE
   AND A.SEQ        = C.SEQ
   AND A.COUNTS     = B.COUNTS
   AND A.COUNTS     = D.CODE
   AND D.GUBUN      = '02'
   AND A.CUST_CODE  = a_cust
   AND A.SEQ        = a_seq
   AND A.COUNTS    <= '90'
   AND A.TIMES     < 90
   AND A.RECEIPTDATE BETWEEN a_fr AND a_to
   AND A.RECEIPTDATE <= C.CHANGEDATE

--   AND A.RECEIPTDATE <= B.AGREEDATE
--   AND A.DELAYDAYS = 0

   AND ((C.CHANGETAG    = '1' AND A.RECEIPTDATE >= C.LASTCHANGEDATE) OR
        (C.CHANGETAG   <> '1' AND A.RECEIPTDATE  < C.CHANGEDATE    ) OR
        (A.COUNTS = '00'))
   AND C.LEASETAG = 'N';

/*---------------------------------------------------------------------------*/
/* SELLDETAIL */
CURSOR CURDETL(a_cust IN VARCHAR2, a_seq IN NUMBER, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.COUNTS,
       A.AGREEDATE,
       A.LANDAMT  - NVL(SUM(A.RLAMT), 0),
       A.BUILDAMT - NVL(SUM(A.RBAMT), 0),
       A.VATAMT   - NVL(SUM(A.RVAMT), 0),
       A.LASTCHANGEDATE,
       MAX(B.NM)
  FROM (SELECT A.COUNTS,
               NVL(B.TIMES, 0) AS TIMES,
               A.AGREEDATE,
               A.LANDAMT,
               A.BUILDAMT,
               A.VATAMT,
               NVL(B.RECEIPTLANDAMT, 0)  AS RLAMT,
               NVL(B.RECEIPTBUILDAMT, 0) AS RBAMT,
               NVL(B.RECEIPTVATAMT, 0)   AS RVAMT,
               C.LASTCHANGEDATE
          FROM HD_HOUS_SELLDETAIL A,
               HD_HOUS_INCOME B,
               HD_HOUS_SELL C
         WHERE A.CUST_CODE  = B.CUST_CODE (+)
           AND A.SEQ        = B.SEQ       (+)
           AND A.CUST_CODE  = C.CUST_CODE (+)
           AND A.SEQ        = C.SEQ       (+)
           AND A.COUNTS     = B.COUNTS    (+)
           AND A.CUST_CODE  = a_cust
           AND A.SEQ        = a_seq
           AND A.COUNTS    <= '90'
           AND B.TIMES (+)  < 90
           AND A.AGREEDATE >= C.CONTRACTDATE
           AND A.AGREEDATE  < C.CHANGEDATE
           AND C.LEASETAG   = 'N'
           AND ((C.CHANGETAG  = '1' AND A.AGREEDATE >= C.LASTCHANGEDATE) OR
                (C.CHANGETAG <> '1' AND A.AGREEDATE  < C.CHANGEDATE    ))
           AND B.RECEIPTDATE (+) <= F_HD_GET_HOLIDAY(A.DEPT_CODE, A.HOUSETAG, A.AGREEDATE, 'Y')
           AND A.AGREEDATE BETWEEN as_fr AND as_to
--           AND B.RECEIPTDATE (+) <= A.AGREEDATE
       ) A,
       HD_CODE_COMM B
 WHERE A.AGREEDATE BETWEEN a_fr AND a_to
   AND A.COUNTS = B.CODE
   AND B.GUBUN  = '02'
 GROUP BY A.COUNTS, A.AGREEDATE, A.LANDAMT, A.BUILDAMT, A.VATAMT, A.LASTCHANGEDATE;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_pass  := 'XXXXXXXXXX';
   v_cnt   := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_DEPT
    WHERE DEPT_CODE = as_dept
      AND TAX_TAG   = '1';

   IF v_cnt < 1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '집계하려는 현장은 납입금기준의 현장이 아닙니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

   /* ---------------------------------------------------------------------------------------*/
   BEGIN
      DELETE FROM HD_TAX_CALCULATE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND ((as_tp = '1') OR (BUILDNO = LPAD(as_bno, 4, ' ') AND HOUSENO = LPAD(as_hno, 4, ' ')))
         AND RECEIPTDATE BETWEEN as_fr AND as_to;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, '기존 HD_TAX_CALCULATE_REAL을 삭제하는중 오류가 발생했습니다.');
         ROLLBACK;
         RETURN;
   END;
   /* ---------------------------------------------------------------------------------------*/

   OPEN CURCUST(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURCUST
       INTO c_cust, c_seq,    c_bno,    c_hno,   c_cdt,
            c_ctag, c_square, c_cbno,   c_chno,  c_tdt,
            c_ldt,  c_tp,     c_custnm, c_ccust, c_csang,
            c_ccon, c_ccat,   c_addr1,  c_addr2, c_deptnm,
            c_dh;
      EXIT WHEN CURCUST%NOTFOUND;

      /* ------------------------------------------------------------------------------------*/
      /* INCOME -> TAX ----------------------------------------------------------------------*/
      IF c_ctag = '1' THEN BEGIN
         IF c_tp = '1' THEN BEGIN
            IF c_ldt >= as_fr THEN BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
      END; ELSE BEGIN
         IF c_tp = '2' THEN BEGIN
            IF c_ldt >= as_fr THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
      END; END IF;

      OPEN CURINCO(c_cust, c_seq, v_fr, v_to);

      LOOP
         FETCH CURINCO
          INTO i_counts, i_times, i_rdt, i_rlamt, i_rbamt, i_rvamt, i_ldt, i_cdt, i_countsnm;
         EXIT WHEN CURINCO%NOTFOUND;

         BEGIN
            IF (i_counts = '00' OR i_rdt >= i_ldt) THEN BEGIN
               IF i_rvamt <> 0 THEN BEGIN
                  BEGIN
                     -- 건물가 세금계산서
                     INSERT INTO HD_TAX_CALCULATE
                             (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                              TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                              CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                              REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                              BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                              SPECIALNAME,     REMARK,
                              INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                      VALUES (as_dept,         as_htag,    i_counts,    i_times,  '1',
                              NVL(c_ccust, c_cust), '1',        i_rdt,       c_bno,    c_hno,
                              c_ctag,          '',         '',          c_square, c_custnm,
                              c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                              TO_CHAR(10 - LENGTH(TO_CHAR(i_rbamt))), i_rbamt, 0, i_rbamt, i_rvamt,
                              c_deptnm,        c_dh || i_countsnm,
                              as_user,         v_sysdt,    '',          '');
                     EXCEPTION
                        WHEN OTHERS THEN
                           dbms_output.put_line(sqlerrm);
                           RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:1 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || i_counts);
                           ROLLBACK;
                           RETURN;
                  END;
                  IF i_rlamt <> 0 THEN BEGIN
                     -- 토지가 계산서
                     INSERT INTO HD_TAX_CALCULATE
                             (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                              TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                              CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                              REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                              BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                              SPECIALNAME,     REMARK,
                              INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                      VALUES (as_dept,         as_htag,    i_counts,    i_times,  '2',
                              NVL(c_ccust, c_cust), '1',        i_rdt,       c_bno,    c_hno,
                              c_ctag,          '',         '',          c_square, c_custnm,
                              c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                              TO_CHAR(10 - LENGTH(TO_CHAR(i_rlamt))), i_rlamt, i_rlamt, 0, 0,
                              c_deptnm,        c_dh || i_countsnm,
                              as_user,         v_sysdt,    '',          '');
                     EXCEPTION
                        WHEN OTHERS THEN
                           dbms_output.put_line(sqlerrm);
                           RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:2 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || i_counts);
                           ROLLBACK;
                           RETURN;
                  END; END IF;
               END; ELSE BEGIN
                  -- 계산서 발행분
                  INSERT INTO HD_TAX_CALCULATE
                          (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                           TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                           CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                           REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                           BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                           SPECIALNAME,     REMARK,
                           INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                   VALUES (as_dept,         as_htag,    i_counts,    i_times,  '2',
                           NVL(c_ccust, c_cust), '1',        i_rdt,       c_bno,    c_hno,
                           c_ctag,          '',         '',          c_square, c_custnm,
                           c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                           TO_CHAR(10 - LENGTH(TO_CHAR(i_rlamt + i_rbamt))), i_rlamt + i_rbamt, i_rlamt, i_rbamt, i_rvamt,
                           c_deptnm,        c_dh || i_countsnm,
                           as_user,         v_sysdt,    '',          '');
                  EXCEPTION
                     WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:3 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || i_counts);
                        ROLLBACK;
                        RETURN;
               END; END IF;
            END; END IF;
         END;
      END LOOP;
      CLOSE CURINCO;
      /* ------------------------------------------------------------------------------------*/

      /* ------------------------------------------------------------------------------------*/
      /* SELLDETAIL -> TAX ------------------------------------------------------------------*/
      IF c_ctag = '1' THEN BEGIN ----------------현계약자
         IF c_tp = '2' THEN BEGIN
            v_fr := as_fr; v_to := as_to;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
      END; ELSIF c_ctag = '2' THEN BEGIN -------------명의변경
         IF c_tp = '2' THEN BEGIN
            IF c_ldt <= as_fr THEN BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := c_ldt; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := c_ldt; v_to := as_to;
               END; END IF;
            END; ELSE  BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := as_fr; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := as_fr; v_to := as_to;
               END; END IF;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
/*
         IF c_ldt <= as_fr THEN BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; END IF;
         END; ELSE  BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; END IF;
*/
      END; ELSIF c_ctag = '3' THEN BEGIN -------------해약
         v_fr := as_fr; v_to := c_cdt;
      END; ELSE BEGIN ---------------------------동호변경
         IF c_tp = '2' THEN BEGIN
            IF c_ldt <= as_fr THEN BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := c_ldt; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := c_ldt; v_to := as_to;
               END; END IF;
            END; ELSE  BEGIN
               IF c_cdt <= as_to THEN BEGIN
                  v_fr := as_fr; v_to := c_cdt;
               END; ELSE BEGIN
                  v_fr := as_fr; v_to := as_to;
               END; END IF;
            END; END IF;
         END; ELSE BEGIN
            v_fr := v_pass; v_to := v_pass;
         END; END IF;
/*
         IF c_ldt <= as_fr THEN BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := c_ldt; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := c_ldt; v_to := as_to;
            END; END IF;
         END; ELSE  BEGIN
            IF c_cdt <= as_to THEN BEGIN
               v_fr := as_fr; v_to := c_cdt;
            END; ELSE BEGIN
               v_fr := as_fr; v_to := as_to;
            END; END IF;
         END; END IF;
*/
      END; END IF;

      IF c_tp <> '3' THEN BEGIN
         OPEN CURDETL(c_cust, c_seq, v_fr, v_to);
         LOOP
            FETCH CURDETL
             INTO d_counts, d_adt, d_land, d_build, d_vat, d_ldt, d_countsnm;
            EXIT WHEN CURDETL%NOTFOUND;

            IF d_land + d_build + d_vat <> 0 THEN BEGIN
               IF d_adt >= d_ldt THEN BEGIN
                  IF d_vat <> 0 THEN BEGIN
                     BEGIN
                        -- 건물가 세금계산서
                        INSERT INTO HD_TAX_CALCULATE
                                (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                 TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                 CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                 REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                 BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                 SPECIALNAME,     REMARK,
                                 INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                         VALUES (as_dept,         as_htag,    d_counts,    1,        '1',
                                 NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                 c_ctag,          '',         '',          c_square, c_custnm,
                                 c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                 TO_CHAR(10 - LENGTH(TO_CHAR(d_build))), d_build, 0, d_build, d_vat,
                                 c_deptnm,        c_dh || d_countsnm,
                                 as_user,         v_sysdt,    '',          '');
                        EXCEPTION
                           WHEN OTHERS THEN
                              dbms_output.put_line(sqlerrm);
                              RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:4 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                              ROLLBACK;
                              RETURN;
                     END;

                     BEGIN
                        -- 토지가 계산서
                        INSERT INTO HD_TAX_CALCULATE
                                (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                 TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                 CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                 REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                 BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                 SPECIALNAME,     REMARK,
                                 INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                         VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                                 NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                 c_ctag,          '',         '',          c_square, c_custnm,
                                 c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                 TO_CHAR(10 - LENGTH(TO_CHAR(d_land))), d_land, d_land, 0, 0,
                                 c_deptnm,        c_dh || d_countsnm,
                                 as_user,         v_sysdt,    '',          '');
                        EXCEPTION
                           WHEN OTHERS THEN
                              dbms_output.put_line(sqlerrm);
                              RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:5 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                              ROLLBACK;
                              RETURN;
                     END;
                  END; ELSE BEGIN
                        -- 계산서 발행분
                        INSERT INTO HD_TAX_CALCULATE
                                (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                 TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                 CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                 REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                 BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                 SPECIALNAME,     REMARK,
                                 INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                         VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                                 NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                 c_ctag,          '',         '',          c_square, c_custnm,
                                 c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                 TO_CHAR(10 - LENGTH(TO_CHAR(d_land + d_build))), d_land + d_build, d_land, d_build, d_vat,
                                 c_deptnm,        c_dh || d_countsnm,
                                 as_user,         v_sysdt,    '',          '');
                        EXCEPTION
                           WHEN OTHERS THEN
                              dbms_output.put_line(sqlerrm);
                              RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:6 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                              ROLLBACK;
                              RETURN;
                  END; END IF;
               END; END IF;
            END; END IF;
         END LOOP;
         CLOSE CURDETL;
      END; END IF;
      /* ------------------------------------------------------------------------------------*/

      /* ------------------------------------------------------------------------------------*/
      /* 해약시 -----------------------------------------------------------------------------*/
      IF c_tp = '3' THEN BEGIN
         IF c_cdt > as_to THEN BEGIN
            OPEN CURDETL(c_cust, c_seq, as_fr, c_cdt);
            LOOP
               FETCH CURDETL
                INTO d_counts, d_adt, d_land, d_build, d_vat, d_ldt, d_countsnm;
               EXIT WHEN CURDETL%NOTFOUND;

               IF d_land + d_build + d_vat <> 0 THEN BEGIN
                  IF d_adt >= d_ldt THEN BEGIN
                     IF d_vat <> 0 THEN BEGIN
                        BEGIN
                           -- 건물가 세금계산서
                           INSERT INTO HD_TAX_CALCULATE
                                   (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                    CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,    d_counts,    1,        '1',
                                    NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                    c_ctag,          '',         '',          c_square, c_custnm,
                                    c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_build))), d_build, 0, d_build, d_vat,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,    '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:7 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                        END;

                        BEGIN
                           -- 토지가 계산서
                           INSERT INTO HD_TAX_CALCULATE
                                   (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                    CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                                    NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                    c_ctag,          '',         '',          c_square, c_custnm,
                                    c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_land))), d_land, d_land, 0, 0,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,    '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:8 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                        END;
                     END; ELSE BEGIN
                           -- 계산서 발행분
                           INSERT INTO HD_TAX_CALCULATE
                                   (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                                    TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                                    CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                                    REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                                    BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                                    SPECIALNAME,     REMARK,
                                    INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                            VALUES (as_dept,         as_htag,    d_counts,    1,        '2',
                                    NVL(c_ccust, c_cust), '2',        d_adt,       c_bno,    c_hno,
                                    c_ctag,          '',         '',          c_square, c_custnm,
                                    c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                                    TO_CHAR(10 - LENGTH(TO_CHAR(d_land + d_build))), d_land + d_build, d_land, d_build, d_vat,
                                    c_deptnm,        c_dh || d_countsnm,
                                    as_user,         v_sysdt,    '',          '');
                           EXCEPTION
                              WHEN OTHERS THEN
                                 dbms_output.put_line(sqlerrm);
                                 RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:9 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                                 ROLLBACK;
                                 RETURN;
                     END; END IF;
                  END; END IF;
               END; END IF;
            END LOOP;
            CLOSE CURDETL;
         END; END IF;

         v_aland := 0; v_abuild := 0; v_avat := 0;
         v_rland := 0; v_rbuild := 0; v_rvat := 0;

         SELECT SUM(LANDAMT), SUM(BUILDAMT), SUM(VATAMT)
           INTO v_aland,      v_abuild,      v_avat
           FROM HD_HOUS_SELLDETAIL
          WHERE CUST_CODE  = c_cust
            AND SEQ        = c_seq
            AND AGREEDATE <= c_cdt
            AND COUNTS    <> '99';

         SELECT SUM(RECEIPTLANDAMT), SUM(RECEIPTBUILDAMT), SUM(RECEIPTVATAMT)
           INTO v_rland,             v_rbuild,             v_rvat
           FROM HD_HOUS_INCOME
          WHERE CUST_CODE    = c_cust
            AND SEQ          = c_seq
            AND COUNTS       = '99';

--         IF v_aland + v_abuild + v_avat < v_rland + v_rbuild + v_rvat THEN BEGIN
--            v_aland  := v_rland; v_abuild := v_rbuild; v_avat := v_rvat;
--         END; END IF;

         IF v_rvat > 0 THEN BEGIN
            BEGIN
               -- 건물가 세금계산서
               INSERT INTO HD_TAX_CALCULATE
                       (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                        TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                        CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                        REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                        BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                        SPECIALNAME,     REMARK,
                        INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                VALUES (as_dept,         as_htag,    '00',        0,        '1',
                        NVL(c_ccust, c_cust), '1',        c_cdt,       c_bno,    c_hno,
                        c_ctag,          '',         '',          c_square, c_custnm,
                        c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                        TO_CHAR(10 - LENGTH(TO_CHAR(v_rbuild))), v_rbuild , 0, v_rbuild , v_rvat ,
                        c_deptnm,        c_dh || '해약 환불',
                        as_user,         v_sysdt,    '',          '');
               EXCEPTION
                  WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:10 생성하는중 오류가 발생했습니다.'|| '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                     ROLLBACK;
                     RETURN;
            END;

            BEGIN
               -- 토지가 계산서
               INSERT INTO HD_TAX_CALCULATE
                       (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                        TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                        CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                        REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                        BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                        SPECIALNAME,     REMARK,
                        INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
                VALUES (as_dept,         as_htag,    '00',        0,        '2',
                        NVL(c_ccust, c_cust), '1',        c_cdt,       c_bno,    c_hno,
                        c_ctag,          '',         '',          c_square, c_custnm,
                        c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                        TO_CHAR(10 - LENGTH(TO_CHAR(v_rland))), v_rland , v_rland , 0, 0,
                        c_deptnm,        c_dh || '해약 환불',
                        as_user,         v_sysdt,    '',          '');
               EXCEPTION
                  WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:11 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                     ROLLBACK;
                     RETURN;
            END;
         END; ELSE BEGIN
            -- 계산서 발행분
            INSERT INTO HD_TAX_CALCULATE
                    (DEPT_CODE,       HOUSETAG,   COUNTS,      TIMES,    CALCULATETAG,
                     TRANSACTIONCODE, DEMANDTAG,  RECEIPTDATE, BUILDNO,  HOUSENO,
                     CHANGETAG,       KUN,        HO,          SQUARE,   SANGHO,
                     REPRESANTATION,  ADDR,       ADDR2,       UPTAE,    UPJONG,
                     BLANK,           SUPPLYAMT,  LANDAMT,     BUILDAMT, VATAMT,
                     SPECIALNAME,     REMARK,
                     INPUT_DUTY_ID,   INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
             VALUES (as_dept,         as_htag,    '00',        0,        '2',
                     NVL(c_ccust, c_cust), '1',        c_cdt,       c_bno,    c_hno,
                     c_ctag,          '',         '',          c_square, c_custnm,
                     c_csang,         c_addr1,    c_addr2,     c_ccon,   c_ccat,
                     TO_CHAR(10 - LENGTH(TO_CHAR(v_rland + v_rbuild))), (v_rland + v_rbuild) , v_rland , v_rbuild , 0,
                     c_deptnm,        c_dh || '해약 환불',
                     as_user,         v_sysdt,    '',          '');
            EXCEPTION
               WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'HD_TAX_CALCULATE:12 생성하는중 오류가 발생했습니다.' || '<1> '  || c_bno || '-' || c_hno || ':' || c_cust || '-' || TO_CHAR(c_seq) || '-' || d_counts);
                  ROLLBACK;
                  RETURN;
         END; END IF;
      END; END IF;
      /* ------------------------------------------------------------------------------------*/

   END LOOP;
   CLOSE CURCUST;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CODE_COSTOMER_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_CODE_COSTOMER_CONV" (
   as_user IN VARCHAR2  --올린사람
)
IS

/*---------------------------------------------------------------------------*/
v_cnt         NUMBER(10);
v_sysdt       VARCHAR2(14);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt   := 0;
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   UPDATE HD_CODE_CUSTOMER_TXTUP
      SET PROCESS_TAG = 'E',
          ERR_MSG     = '이미 분양고객으로 등록되어 있습니다'
    WHERE PROCESS_TAG = '0'
      AND EXISTS (SELECT 1
                    FROM SM_CODE_CUST A
                   WHERE HD_YN = 'Y'
                     AND A.CUST_CODE = HD_CODE_CUSTOMER_TXTUP.CUST_CODE
                 );

   UPDATE HD_CODE_CUSTOMER_TXTUP
      SET PROCESS_TAG = 'E',
          ERR_MSG     = '고객구분은 1:사업자, 2:개인 만 등록할수 있습니다'
    WHERE PROCESS_TAG = '0'
      AND NVL(CUSTCODE_TAG, 'X') NOT IN ('1', '2');

   UPDATE HD_CODE_CUSTOMER_TXTUP
      SET PROCESS_TAG = 'E',
          ERR_MSG     = '사업자또는 주민등록번호의 오류 입니다'
    WHERE PROCESS_TAG = '0'
      AND F_HD_GET_VALIDCODE(CUST_CODE, CUSTCODE_TAG) <> 1;

   UPDATE HD_CODE_CUSTOMER_TXTUP
      SET PROCESS_TAG = 'E',
          ERR_MSG     = '해당현장은 분양현장으로 등록되어있는 현장이 아닙니다'
    WHERE PROCESS_TAG = '0'
      AND LENGTH(NVL(DEPT_CODE, 'X')) > 1
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_DEPT A
                       WHERE A.DEPT_CODE = HD_CODE_CUSTOMER_TXTUP.DEPT_CODE
                     );

   UPDATE HD_CODE_CUSTOMER_TXTUP
      SET PROCESS_TAG = 'E',
          ERR_MSG     = '잘못된 우편번호 입니다'
    WHERE PROCESS_TAG = '0'
      AND LENGTH(NVL(DEPT_CODE, 'X')) > 1
      AND( LENGTH(ZIP) < 1  OR ZIP IS NULL)  
     ;
 
-- 우편번호 건수가 너무 많아서 SM_CODE_ZIP_DORO 를 걸면 시간이 너무 많이 걸릴거 같아서 막음 (2011-11-07)    
--      AND NOT EXISTS (SELECT 1
--                        FROM SM_CODE_ZIP A
--                       WHERE A.ZIP_CODE = HD_CODE_CUSTOMER_TXTUP.ZIP
--                     );

   /*---------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO SM_CODE_CUST
                 (CUST_CODE,     APPROVE_YN,       USE_YN,       CUST_DIV,             BANK_DIV,
                  CUST_NAME,     CUST_ABBR,        CUST_ENG,     CUST_LEGAL_NO,        REPRESENT_NAME,
                  REPRESENT_RRN, BIZ_STATUS,       BIZ_TYPE,     PHONE,                CELLNO,
                  FAX,           ADDR_TAG,         ZIP_CODE,     ADDR1,
                  ADDR2,         COMP_PHONE,
                  INFO_YN,       SEND_ADDR_TAG,    SEND_ZIP_CODE,SEND_ADDR1,
                  SEND_ADDR2,    SEND_RECEIPTNAME,
                  SEND_EMAIL,    BANK_CODE,        DEPOSIT_NO,   DEPOSIT_OWNER,        AGENT_NAME,
                  AGENT_RRN,     AGENT_PHONE,      AGENT_CELLNO, AGENT_FAX,            AGENT_ZIP_CODE,
                  AGENT_ADDR1,   AGENT_ADDR2,      AGENT_EMAIL,  FOREIGN_TAG,          FOREIGN_NATION,
                  COMPANY_CODE,  PROJ_CODE,        INCOME_DIV,   CUST_GROUP_CODE,      AM_YN,
                  TM_YN,         HD_YN,            MM_YN,        HD_PASSWORD,
                  INPUT_DUTY_ID, INPUT_DATE,       CHG_DUTY_ID,  CHG_DATE,
                  file_name, cust_div2, zip_code_org, addr1_org, addr2_org, 
                  agent_zip_code_org, agent_addr1_org, agent_addr2_org, agent_addr_tag,
                  send_zip_code_org, send_addr1_org, send_addr2_org,  cust_code2 )
           SELECT CUST_CODE,     'Y',              'Y',          '00' || CUSTCODE_TAG, '',
                  CUST_NAME,     '',               '',           '',                   REPRESENT_NAME,
                  '',            '',               '',           TEL,                  HANDPHONE,
                  '',            ADDR_TAG,         ZIP,              ADDR,
                  ADDR2,          '',
                  'Y',           ADDR_TAG,         ZIP,              ADDR,
                  ADDR2,          CUST_NAME,
                  EMAIL,         '',               '',           '',                   '',
                  '',            '',               '',           '',                   '',
                  '',            '',               '',           '',                   '',
                  '',            DEPT_CODE,        '',           '',                   'N',
                  'N',           'Y',              'N',          '00000',
                  as_user,       v_sysdt,          '',           '',
                  '',            '',               '',           '',                   '',
                  '',            '',               '',           '',
                  '',            '',               '',           ''
             FROM HD_CODE_CUSTOMER_TXTUP A
            WHERE PROCESS_TAG = '0'
              AND NOT EXISTS (SELECT 1
                                FROM SM_CODE_CUST C
                               WHERE C.CUST_CODE = A.CUST_CODE
                             );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
            RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT 01:SM_CODE_CUST' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      UPDATE HD_CODE_CUSTOMER_TXTUP
         SET PROCESS_TAG = 'I'
       WHERE PROCESS_TAG = '0'
         AND EXISTS (SELECT 1
                       FROM SM_CODE_CUST A
                      WHERE A.HD_YN      = 'Y'
                        AND A.CUST_CODE = HD_CODE_CUSTOMER_TXTUP.CUST_CODE
                    );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 02:HD_CODE_CUSTOMER_TXTUP' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      UPDATE SM_CODE_CUST
         SET HD_YN       = 'Y',
             CHG_DUTY_ID = '0',
             CHG_DATE    = v_sysdt
       WHERE HD_YN       = 'N'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_CUSTOMER_TXTUP A
                      WHERE A.PROCESS_TAG = '0'
                        AND A.CUST_CODE   = SM_CODE_CUST.CUST_CODE
                    );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 03:SM_CODE_CUST' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   BEGIN
      UPDATE HD_CODE_CUSTOMER_TXTUP
         SET PROCESS_TAG = 'U'
       WHERE PROCESS_TAG = '0'
         AND EXISTS (SELECT 1
                       FROM SM_CODE_CUST A
                      WHERE A.HD_YN     = 'Y'
                        AND A.CUST_CODE = HD_CODE_CUSTOMER_TXTUP.CUST_CODE
                    );
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
            RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 04:HD_CODE_CUSTOMER_TXTUP' || SQLERRM);
            ROLLBACK;
            RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CODE_HOUSE_RATE;

CREATE OR REPLACE PROCEDURE "PROC_HD_CODE_HOUSE_RATE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_custcode     VARCHAR2(20);
c_seq          NUMBER;

cy_start_days  NUMBER;
cy_end_days    NUMBER;
cy_startdate   VARCHAR2(8);
cy_enddate     VARCHAR2(8);
cy_delatrate   FLOAT;
cy_delaycut    VARCHAR2(2);
cy_delayunit   VARCHAR2(2);
cy_stag        VARCHAR2(1);
cy_etag        VARCHAR2(1);

cd_startdate   VARCHAR2(8);
cd_enddate     VARCHAR2(8);
cd_discntrate  FLOAT;
cd_discntcut   VARCHAR2(2);
cd_discntunit  VARCHAR2(2);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURUSER(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
   SELECT CUST_CODE, SEQ
     FROM HD_HOUS_SELL
    WHERE DEPT_CODE = a_dept
      AND HOUSETAG  = a_htag;

/*---------------------------------------------------------------------------*/
CURSOR CURDELAY(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
   SELECT START_DAYS,
          END_DAYS,  STARTDATE,
          ENDDATE,   DELAYRATE,
          DELAYCUT,  DELAYUNIT,
          START_TAG, END_TAG
     FROM HD_REFER_RATE_DELAY
    WHERE DEPT_CODE = a_dept
      AND HOUSETAG  = a_htag
      AND RATETAG   = '1';

/*---------------------------------------------------------------------------*/
CURSOR CURDISCOUNT(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
   SELECT STARTDATE,  ENDDATE,
          DISCNTRATE, DISCNTCUT,
          DISCNTUNIT
     FROM HD_REFER_RATE_DISCOUNT
    WHERE DEPT_CODE = a_dept
      AND HOUSETAG  = a_htag
      AND RATE_TAG  = '1';

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN                             
   BEGIN                             
      DELETE HD_HOUS_RATE_DELAY
       WHERE EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.CUST_CODE = HD_HOUS_RATE_DELAY.CUST_CODE
                        AND A.SEQ       = HD_HOUS_RATE_DELAY.SEQ
                    );
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '기존 세대별 연체비율 삭제중 오류가 발생했습니다.');
                ROLLBACK;
                RETURN;
   END;

   BEGIN                             
      DELETE HD_HOUS_RATE_DISCOUNT
       WHERE EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.CUST_CODE = HD_HOUS_RATE_DISCOUNT.CUST_CODE
                        AND A.SEQ       = HD_HOUS_RATE_DISCOUNT.SEQ
                    );
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '기존 세대별 할인이율 삭제중 오류가 발생했습니다.');
                ROLLBACK;
                RETURN;
   END;

   OPEN CURUSER(as_dept, as_htag);
   LOOP
      FETCH CURUSER 
       INTO c_custcode,  -- 고객
            c_seq;       -- 고객순번
      EXIT WHEN CURUSER%NOTFOUND;

      OPEN CURDELAY(as_dept, as_htag);
      LOOP
         FETCH CURDELAY
           INTO cy_start_days,    cy_end_days,
                cy_startdate,     cy_enddate,
                cy_delatrate,     cy_delaycut,  cy_delayunit,
                cy_stag,          cy_etag;
         EXIT WHEN CURDELAY%NOTFOUND;

         BEGIN
            INSERT INTO HD_HOUS_RATE_DELAY
                       (CUST_CODE,     SEQ,
                        START_DAYS,    END_DAYS,
                        STARTDATE,     ENDDATE,
                        DELAYRATE,     DELAYCUT,    DELAYUNIT,
                        START_TAG,     END_TAG,
                        INPUT_DUTY_ID, INPUT_DATE)
                VALUES (c_custcode,    c_seq,
                        cy_start_days, cy_end_days,
                        cy_startdate,  cy_enddate,
                        cy_delatrate,  cy_delaycut, cy_delayunit,
                        cy_stag,       cy_etag,
                        as_user, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'));
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line(sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '세대별 연체이율생성시 오류가 발생했습니다.');
                      ROLLBACK;
                      RETURN;
         END;
      END LOOP;
      CLOSE CURDELAY;

      OPEN CURDISCOUNT(as_dept, as_htag);
      LOOP
         FETCH CURDISCOUNT
           INTO cd_startdate,  cd_enddate,
                cd_discntrate, cd_discntcut,
                cd_discntunit;
         EXIT WHEN CURDISCOUNT%NOTFOUND;

         BEGIN
            INSERT INTO HD_HOUS_RATE_DISCOUNT
                       (CUST_CODE,     SEQ,
                        STARTDATE,     ENDDATE,
                        DISCNTRATE,    DISCNTCUT,    DISCNTUNIT,
                        INPUT_DUTY_ID, INPUT_DATE)
                VALUES (c_custcode,    c_seq,
                        cd_startdate,  cd_enddate,
                        cd_discntrate, cd_discntcut, cd_discntunit,
                        as_user, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'));
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line(sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '세대별 할인이율생성시 오류가 발생했습니다.');
                      ROLLBACK;
                      RETURN;
         END;
      END LOOP;
      CLOSE CURDISCOUNT;

   END LOOP;
   CLOSE CURUSER;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_CHANGEHO;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_CHANGEHO" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2, --분양구분
   as_bno     IN VARCHAR2, --동
   as_hno     IN VARCHAR2, --호
   as_cust    IN VARCHAR2, --계약자
   as_seq     IN VARCHAR2, --계약자순번
   as_dt      IN VARCHAR2, --변경일
   as_newb    IN VARCHAR2, --변경동
   as_newh    IN VARCHAR2, --변경호
   as_contno  IN VARCHAR2, --계약번호
   as_remark  IN VARCHAR2, --변경사유
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_cnt       NUMBER(5);
v_nseq      NUMBER(5);
v_sysdt     VARCHAR2(14);
v_ncontno   NUMBER(5);

v_vatold    VARCHAR2(1);
v_vatnew    VARCHAR2(1);

v_b_lamt    NUMBER(15);
v_b_bamt    NUMBER(15);
v_b_vamt    NUMBER(15);
v_b_mamt    NUMBER(15);

v_a_lamt    NUMBER(15);
v_a_bamt    NUMBER(15);
v_a_vamt    NUMBER(15);
v_a_mamt    NUMBER(15);

v_m_lamt    NUMBER(15);
v_m_bamt    NUMBER(15);
v_m_vamt    NUMBER(15);
v_m_mamt    NUMBER(15);

v_vbank     VARCHAR(10);
v_vdeposit  VARCHAR(50);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   SELECT CASE WHEN NVL(SUM(VATAMT), 0) > 0 THEN 'Y' ELSE 'N' END
     INTO v_vatold
     FROM HD_HOUS_SELLDETAIL
    WHERE CUST_CODE = as_cust
      AND SEQ       = TO_NUMBER(as_seq); 

   SELECT CASE WHEN NVL(SUM(VATAMT), 0) > 0 THEN 'Y' ELSE 'N' END
     INTO v_vatnew
     FROM HD_REFER_SELLDETAIL
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND BUILDNO   = as_newb
      AND HOUSENO   = as_newh;

   IF v_vatold <> v_vatnew THEN
      RAISE_APPLICATION_ERROR(-20002, '변경전과 변경후 약정의 부가세유무가 다릅니다 전산실에 문의하세요');
      ROLLBACK;
      RETURN;
   END IF;

/*---------------------------------------------------------------------------*/
   SELECT NVL(MAX(SEQ), 0) + 1, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
     INTO v_nseq,               v_sysdt
     FROM HD_HOUS_SELL
    WHERE CUST_CODE = as_cust;

   SELECT A.VIRBANK_CODE, B.VDEPOSIT 
     INTO v_vbank,        v_vdeposit
     FROM HD_CODE_HOUSE A,
          HD_HOUS_SELL B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND B.CUST_CODE = as_cust
      AND B.SEQ       = TO_NUMBER(as_seq); 

/*
   BEGIN
      IF (LENGTH(as_contno) = 0 OR as_contno = '' OR as_contno = '0') THEN
         SELECT NVL(MAX(TO_NUMBER(CONTRACTNO)), 0) + 1
           INTO v_ncontno
           FROM HD_HOUS_SELL
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG = as_htag;
      ELSE
         SELECT COUNT(*)
           INTO v_cnt
           FROM HD_HOUS_SELL
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG = as_htag
            AND TO_NUMBER(CONTRACTNO) = TO_NUMBER(as_contno);
         IF v_cnt > 0 THEN
            SELECT NVL(MAX(TO_NUMBER(CONTRACTNO)), 0) + 1
              INTO v_ncontno
              FROM HD_HOUS_SELL
             WHERE DEPT_CODE = as_dept
               AND HOUSETAG  = as_htag;
         ELSE
            v_ncontno := TO_NUMBER(as_contno);
         END IF;
      END IF;
   END;
*/

   BEGIN
      INSERT INTO HD_HOUS_SELL
                 (CUST_CODE,             SEQ,                   DEPT_CODE,               HOUSETAG,             BUILDNO,
                  HOUSENO,               DONGHO,                                         CUST_NAME,            SQUARE,
                  PRTSQUARE,             TYPE,                  CLASS,                   OPTIONCODE,           CONTRACTTAG,
                  CONTRACTDATE,          CONTRACTNO,
                  LOAN_TAG,              LEASETAG,              LASTCHANGEDATE,          CHANGETAG,
                  CHANGEDATE,            CANCEL_REASON,         CHILD_BUILDNO,           CHILD_HOUSENO,        RELA_CUSTCODE,
                  RELA_SEQ,              VATTAG,                EXCLUSIVEAREA,           COMMONAREA,           ETCCOMMONAREA,
                  PARKINGAREA,           SERVICEAREA,           SITEAREA,                MOVEINSTARTDATE,      MOVEINENDDATE,
                  UNION_CNT,             REMARK,                REFUNDMENTDATE,          REFUNDMENTAMT,        PENALTYAMT,
                  COMP_LOANAMT,          LOAN_INTEREST,         SODUK_TAX,               JUMIN_TAX,            ETC_AMT,
                  BANK_LOAN_ORGAMT,      BANK_LOAN_INTEREST,    BANK_LOAN_INTEREST2,
                  BILL_RETURNAMT,        DELAY_INDEMINITY,      DEPOSIT_COUNT,           CO_CUSTCODE,          CO_SANGHO,
                  CO_CONDITION,          CO_CATEGORY,           LOANBANK,                LOANDEPOSIT,          LOANUSER,
                  SLIPDATE,              SLIPSEQ,
                  INPUT_DUTY_ID,         INPUT_DATE,            CHG_DUTY_ID,             CHG_DATE,
                  APPLY_YN,              APPLY_EMPNO,           APPLY_DATE,              RENTHD_YN,            RENTHD_SEQ,
                  BALCONY_TAG,           BALCONYAREA,           DAYMONTH_TAG,            FLOOR,                CONT_CONDITION,
                  LAND_RETURN,           INT_CALC_DATE,         PREDISAMT,               PROXYAMT,             TRUSTAMT,
                  PREDIS_TAG,            PROXY_TAG,             TRUST_TAG,               VIR_YN,               VDEPOSIT, BALCONYAMT,
                  REP_LIMITDT,           REP_YN,                REP_DATE )
           SELECT as_cust,               v_nseq,                A.DEPT_CODE,             A.HOUSETAG,           as_newb,
                  as_newh,               as_newb || '-' || as_newh,                      A.CUST_NAME,          B.SQUARE,
                  B.PRTSQUARE,           B.TYPE,                B.CLASS,                 B.OPTIONCODE,         A.CONTRACTTAG,
                  A.CONTRACTDATE,        as_contno,
                  A.LOAN_TAG,            A.LEASETAG,            as_dt,                   '1',
                  '29991231',            '',                    '',                      '',                   '',
                  0,                     NVL(B.VATTAG, 'N'),    NVL(B.EXCLUSIVEAREA, 0), NVL(B.COMMONAREA, 0), NVL(B.ETCCOMMONAREA, 0),
                  NVL(B.PARKINGAREA, 0), NVL(B.SERVICEAREA, 0), NVL(B.SITEAREA, 0),      A.MOVEINSTARTDATE,    A.MOVEINENDDATE,
                  A.UNION_CNT,           A.REMARK,              A.REFUNDMENTDATE,        A.REFUNDMENTAMT,      A.PENALTYAMT,
                  A.COMP_LOANAMT,        A.LOAN_INTEREST,       A.SODUK_TAX,             A.JUMIN_TAX,          A.ETC_AMT,
                  A.BANK_LOAN_ORGAMT,    A.BANK_LOAN_INTEREST,  A.BANK_LOAN_INTEREST2,
                  A.BILL_RETURNAMT,      A.DELAY_INDEMINITY,    A.DEPOSIT_COUNT,         A.CO_CUSTCODE,        A.CO_SANGHO,
                  A.CO_CONDITION,        A.CO_CATEGORY,         A.LOANBANK,              A.LOANDEPOSIT,        A.LOANUSER,
                  A.SLIPDATE,            A.SLIPSEQ,
                  as_user,               v_sysdt ,              '',                      '',
                  'N',                   '',                    '',                      'N',                  0,
                  'N',                   0,                     A.DAYMONTH_TAG,          B.FLOOR,              A.CONT_CONDITION,
                  A.LAND_RETURN,         A.INT_CALC_DATE,       A.PREDISAMT,             A.PROXYAMT,           A.TRUSTAMT,
                  A.PREDIS_TAG,          A.PROXY_TAG,           A.TRUST_TAG,             A.VIR_YN,             A.VDEPOSIT, A.BALCONYAMT,
                  TO_CHAR(TO_DATE(as_dt, 'YYYYMMDD') + 60, 'YYYYMMDD'), 'N', NULL
             FROM HD_HOUS_SELL A,
                  HD_HOUS_SUPPLY B
            WHERE A.CUST_CODE = as_cust
              AND A.DEPT_CODE = B.DEPT_CODE
              AND A.HOUSETAG  = B.HOUSETAG
              AND B.BUILDNO   = as_newb
              AND B.HOUSENO   = as_newh
              AND A.SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_SELL 01:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SELL
         SET CHANGETAG      = '4',
             CHANGEDATE     = as_dt,
             CANCEL_REASON  = as_remark,
             CHILD_BUILDNO  = as_newb,
             CHILD_HOUSENO  = as_newh,
             RELA_CUSTCODE  = as_cust,
             RELA_SEQ       = v_nseq,
             CHG_DUTY_ID    = as_user,
             CHG_DATE       = v_sysdt
       WHERE CUST_CODE      = as_cust
         AND SEQ            = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SELL 02:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET CONTRACTYESNO = 'N',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = as_dept
         AND HOUSETAG      = as_htag
         AND BUILDNO       = as_bno
         AND HOUSENO       = as_hno;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SUPPLY 03:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET CONTRACTYESNO = 'Y',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = as_dept
         AND HOUSETAG      = as_htag
         AND BUILDNO       = as_newb
         AND HOUSENO       = as_newh;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SUPPLY 04:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      SELECT NVL(SUM(LANDAMT), 0), NVL(SUM(BUILDAMT), 0), NVL(SUM(VATAMT), 0), NVL(SUM(MANAGEAMT), 0)
        INTO v_b_lamt,             v_b_bamt,              v_b_vamt,            v_b_mamt
        FROM HD_REFER_SELLDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND BUILDNO   = as_newb
         AND HOUSENO   = as_newh;
   END;

   --변경일까지의 약정을 그대로 복사한다
   BEGIN
      INSERT INTO HD_HOUS_SELLDETAIL
                 (CUST_CODE,     SEQ,        COUNTS,      DEPT_CODE, HOUSETAG,
                  BUILDNO,       HOUSENO,    AGREEDATE,   LANDAMT,   BUILDAMT,
                  VATAMT,        BUNAMT,     DC_YN,       AC_YN,     PERPECTTAG,
                  RECEIPTAMT,    SLIPDT,     SLIPSEQ,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,  MANAGEAMT)
           SELECT as_cust,       v_nseq,     COUNTS,      DEPT_CODE, HOUSETAG,
                  as_newb,       as_newh,    AGREEDATE,   LANDAMT,   BUILDAMT,
                  VATAMT,        BUNAMT,     DC_YN,       AC_YN,     PERPECTTAG,
                  RECEIPTAMT,    SLIPDT,     SLIPSEQ,
                  as_user,       v_sysdt,    '',          '',        MANAGEAMT
             FROM HD_HOUS_SELLDETAIL
            WHERE CUST_CODE  = as_cust
              AND SEQ        = TO_NUMBER(as_seq)
              AND AGREEDATE <= as_dt;
--              AND (NVL(PERPECTTAG, 'N') = 'Y' OR NVL(RECEIPTAMT, 0) <> 0);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_SELLDETAIL 05:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   --복사한최종차수의약정이후의 약정은 세대별약정에서 복사한다
   BEGIN
      INSERT INTO HD_HOUS_SELLDETAIL
                 (CUST_CODE,     SEQ,        COUNTS,      DEPT_CODE, HOUSETAG,
                  BUILDNO,       HOUSENO,    AGREEDATE,   LANDAMT,   BUILDAMT,
                  VATAMT,        BUNAMT,     DC_YN,       AC_YN,     PERPECTTAG,
                  RECEIPTAMT,    SLIPDT,     SLIPSEQ,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,  MANAGEAMT)
           SELECT as_cust,       v_nseq,     COUNTS,      DEPT_CODE, HOUSETAG,
                  BUILDNO,       HOUSENO,    AGREEDATE,   LANDAMT,   BUILDAMT,
                  VATAMT,        AGREEAMT,   DC_YN,       AC_YN,     'N',
                  0,             NULL,       NULL,
                  as_user,       v_sysdt,    '',          '',        MANAGEAMT
             FROM HD_REFER_SELLDETAIL
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag
              AND BUILDNO   = as_newb
              AND HOUSENO   = as_newh
              AND COUNTS    > (SELECT MAX(COUNTS)
                                 FROM HD_HOUS_SELLDETAIL
                                WHERE CUST_CODE = as_cust
                                  AND SEQ       = v_nseq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_SELLDETAIL 06:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   --변경후약정금액
   BEGIN
      SELECT NVL(SUM(LANDAMT), 0), NVL(SUM(BUILDAMT), 0), NVL(SUM(VATAMT), 0), NVL(SUM(MANAGEAMT), 0)
        INTO v_a_lamt,             v_a_bamt,              v_a_vamt,            v_a_mamt
        FROM HD_HOUS_SELLDETAIL
       WHERE CUST_CODE = as_cust
         AND SEQ       = v_nseq;
   END;

   --차액만큼 최종차수에 가감
   BEGIN
      v_m_lamt := v_b_lamt - v_a_lamt;
      v_m_bamt := v_b_bamt - v_a_bamt;
      v_m_vamt := v_b_vamt - v_a_vamt;
      v_m_mamt := v_b_mamt - v_a_mamt;

      UPDATE HD_HOUS_SELLDETAIL
         SET LANDAMT   = LANDAMT   + v_m_lamt,
             BUILDAMT  = BUILDAMT  + v_m_bamt,
             VATAMT    = VATAMT    + v_m_vamt,
             MANAGEAMT = MANAGEAMT + v_m_mamt,
             BUNAMT    = BUNAMT    + v_m_lamt + v_m_bamt + v_m_vamt + v_m_mamt
       WHERE CUST_CODE = as_cust
         AND SEQ       = v_nseq
         AND COUNTS    = (SELECT MAX(COUNTS)
                            FROM HD_HOUS_SELLDETAIL
                           WHERE CUST_CODE = as_cust
                             AND SEQ       = v_nseq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SELLDETAIL 07:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SELLDETAIL
         SET PERPECTTAG = CASE WHEN BUNAMT <= RECEIPTAMT THEN 'Y' ELSE 'N' END
       WHERE CUST_CODE  = as_cust
         AND SEQ        = v_nseq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SELLDETAIL 08:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_INCOME
                 (CUST_CODE,     SEQ,            COUNTS,           TIMES,         DEPT_CODE,
                  HOUSETAG,      BUILDNO,        HOUSENO,          DEPOSIT_NO,    RECEIPTDATE,
                  RECEIPTAMT,    RECEIPTLANDAMT, RECEIPTBUILDAMT,  RECEIPTVATAMT, DELAYDAYS,
                  DELAYAMT,      DISCNTDAYS,     DISCNTAMT,        REALINCOMAMT,  REALLANDAMT,
                  REALBUILDAMT,  REALVATAMT,     BANK_CODE,        BANK_NAME,     PAYTAG,
                  INCOMTYPE,     MOD_YN,         REAL_PAY_TAG,     SLIPDT,        SLIPSEQ,
                  TAXDATE,       TAXSEQ,         INSEQ,
                  INPUT_DUTY_ID, INPUT_DATE,     CHG_DUTY_ID,      CHG_DATE,      SLIPTYPE,
                  VDEPOSIT_NO,   DETAILMOD_YN,   OUT_DT,           OUT_TM,        OUT_SEQ,
                  OUT_BANK,      REMARK,         RECEIPTMANAGEAMT, REALMANAGEAMT, CDNO,
                  CD_BANK,       CD_EDATE,       CD_STYPE )
           SELECT as_cust,       v_nseq,         COUNTS,           TIMES,         DEPT_CODE,
                  HOUSETAG,      as_newb,        as_newh,          DEPOSIT_NO,    RECEIPTDATE,
                  RECEIPTAMT,    RECEIPTLANDAMT, RECEIPTBUILDAMT,  RECEIPTVATAMT, DELAYDAYS,
                  DELAYAMT,      DISCNTDAYS,     DISCNTAMT,        REALINCOMAMT,  REALLANDAMT,
                  REALBUILDAMT,  REALVATAMT,     BANK_CODE,        BANK_NAME,     PAYTAG,
                  INCOMTYPE,     MOD_YN,         REAL_PAY_TAG,     SLIPDT,        SLIPSEQ,
                  TAXDATE,       TAXSEQ,         INSEQ,
                  as_user,       v_sysdt,        '',               '',            SLIPTYPE,
                  VDEPOSIT_NO,   DETAILMOD_YN,   OUT_DT,           OUT_TM,        OUT_SEQ,
                  OUT_BANK,      REMARK,         RECEIPTMANAGEAMT, REALMANAGEAMT, CDNO,
                  CD_BANK,       CD_EDATE,       CD_STYPE
             FROM HD_HOUS_INCOME
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_INCOME 09:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_RATE_DISCOUNT
                 (CUST_CODE,     SEQ,        STARTDATE,   ENDDATE,
                  DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT as_cust,       v_nseq,     STARTDATE,   ENDDATE,
                  DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_HOUS_RATE_DISCOUNT
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_RATE_DISCOUNT 10:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_RATE_DELAY
                 (CUST_CODE,     SEQ,        START_DAYS,  END_DAYS,
                  STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                  DELAYUNIT,     START_TAG,  END_TAG,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT as_cust,       v_nseq,     START_DAYS,  END_DAYS,
                  STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                  DELAYUNIT,     START_TAG,  END_TAG,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_HOUS_RATE_DELAY
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_RATE_DELAY 11:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 
   BEGIN
      INSERT INTO HD_HOUS_REMARK
                 (CUST_CODE,     SEQ,        REMARKSEQ,    REAMRKDATE,
                  REMARK,        USERID,     CONFIRM_DATE, END_YN,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE)
           SELECT as_cust,       v_nseq,     REMARKSEQ,    REAMRKDATE,
                  REMARK,        USERID,     CONFIRM_DATE, END_YN,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_HOUS_REMARK
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_REMARK 12:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 
   BEGIN
      INSERT INTO HD_HOUS_ETCAMT
                 (CUST_CODE, SEQ, ETC_TAG, CNT, RECEIPTDATE, RECEIPTAMT, BANK_CODE, DEPOSIT_NO, 
                  DEPT_CODE, HOUSETAG, BUILDNO, HOUSENO, 
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE   )
           SELECT as_cust,     v_nseq, ETC_TAG, CNT, RECEIPTDATE, RECEIPTAMT, BANK_CODE, DEPOSIT_NO, 
                  DEPT_CODE,     HOUSETAG,  as_newb,       as_newh,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_ETCAMT
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE(SQLERRM); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_ETCAMT 13:' || SQLERRM);
              ROLLBACK;
              RETURN;
   END;
 /*
   BEGIN
      INSERT INTO HD_SALE_ETC
                 (CUST_CODE,     SEQ,           ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID, CHG_DATE)
           SELECT as_cust,       v_nseq,        ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_SALE_ETC
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_SALE_ETC 13:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 */
 
    BEGIN
      INSERT INTO HD_LEASE_BONDSEIZURE
                 (CUST_CODE,     SEQ,             RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID,   CHG_DATE)
           SELECT CUST_CODE,     v_nseq,          RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  as_user,       v_sysdt,         '',            ''
             FROM HD_LEASE_BONDSEIZURE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq)
              AND RENT_YN       = 'N';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_SALE_ETC 13:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_REFER_GIFT
                 (DEPT_CODE,     HOUSETAG,     CUST_CODE,   SEQ,
                  GIFTCODE,      GIFTGIVEDATE,
                  INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE)
           SELECT DEPT_CODE,     HOUSETAG,     as_cust,     v_nseq,
                  GIFTCODE,      GIFTGIVEDATE,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_REFER_GIFT
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_REFER_GIFT 14:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_OPTION
                 (CUST_CODE,     SEQ,       OPTSEQ,     DEPT_CODE,  HOUSETAG,
                  BUILDNO,       HOUSENO,   OPTION_SUP, OPTION_VAT, CONT_DATE,
                  INPUT_DUTY_ID, INPUT_DATE)
           SELECT as_cust,       v_nseq,    OPTSEQ,     DEPT_CODE,  HOUSETAG,     
                  as_newb,       as_newh,   OPTION_SUP, OPTION_VAT, CONT_DATE,
                  as_user,       v_sysdt
             FROM HD_HOUS_OPTION
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_OPTION 14-1:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_LEND
                 (CUST_CODE,     SEQ,          BANK_CODE,   CNT,
                  AGREEDATE,     AGREEAMT,
                  INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE)
           SELECT as_cust,       v_nseq,       BANK_CODE,   CNT,
                  AGREEDATE,     AGREEAMT,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_LEND
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_LEND 15:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_JESE
                 (CUST_CODE,     SEQ,           DEPT_CODE,     HOUSETAG,
                  DEPOSIT1,      INDATE1,       INAMT1,        DEPOSIT2,
                  INDATE2,       INAMT2,        DEPOSIT3,      INDATE3,
                  INAMT3,        JUNGSAN_BDATE, JUNGSAN_SDATE, SISUL_BDATE,
                  SISUL_SDATE,   DUNG_BDATE,    DUNG_SDATE,    BO_BDATE,
                  BO_SDATE,      BUBMU_BUILD,   BUBMU_LAND,    ETC_SDATE,
                  ETC_ADATE,     ETC_IDATE,     REMARK,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,   CHG_DATE)
           SELECT as_cust,       v_nseq,        DEPT_CODE,     HOUSETAG,
                  DEPOSIT1,      INDATE1,       INAMT1,        DEPOSIT2,
                  INDATE2,       INAMT2,        DEPOSIT3,      INDATE3,
                  INAMT3,        JUNGSAN_BDATE, JUNGSAN_SDATE, SISUL_BDATE,
                  SISUL_SDATE,   DUNG_BDATE,    DUNG_SDATE,    BO_BDATE,
                  BO_SDATE,      BUBMU_BUILD,   BUBMU_LAND,    ETC_SDATE,
                  ETC_ADATE,     ETC_IDATE,     REMARK,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_JESE
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_JESE 16:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_INDEMINITY
                 (CUST_CODE,     SEQ,          DEPT_CODE,      HOUSETAG,
                  RECEIPTAMT,    REALINCOMAMT, INDEMINITY_TAG, DELAY_INDEMINITY,
                  ICHE_DATE,     ICHE_YN,
                  INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID,    CHG_DATE)
           SELECT as_cust,       v_nseq,       DEPT_CODE,      HOUSETAG,
                  RECEIPTAMT,    REALINCOMAMT, INDEMINITY_TAG, DELAY_INDEMINITY,
                  ICHE_DATE,     ICHE_YN,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_INDEMINITY
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_INDEMINITY 17:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_VIRTURE_DEPOSIT
         SET MAKE_SEQ      = as_newb || as_newh,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE COMPANY_CODE  = '100'
         AND BANK_CODE     = v_vbank
         AND VIR_DEPOSITNO = v_vdeposit;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE SM_TRANS_VIRTURE_DEPOSIT 18:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_DISK1;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_DISK1" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2, --분양구분
   as_dt      IN VARCHAR2  --계산일자
)
IS

/*---------------------------------------------------------------------------*/
/* system value */
v_sysdt     VARCHAR2(14);
v_cnt       NUMBER(5);

/*---------------------------------------------------------------------------*/
/* temp value */
v_i         NUMBER(4);
v_rate      FLOAT;

/*---------------------------------------------------------------------------*/
/* cursor value */
c_bno       VARCHAR2(4);
c_hno       VARCHAR2(4);
c_count     VARCHAR2(2);
c_rdt       VARCHAR2(8);
c_ramt      NUMBER(15);
c_dyamt     NUMBER(15);
c_dyday     NUMBER(5);
c_dtamt     NUMBER(15);
c_dtday     NUMBER(5);
c_deposit   VARCHAR2(20);
c_cust      VARCHAR2(13);
c_seq       NUMBER(5);
c_ptag      VARCHAR2(2);

/*---------------------------------------------------------------------------*/
/* output value */
o_data      VARCHAR2(1000);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURC(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT SUBSTRB(B.BUILDNO, 1, 4),
       SUBSTRB(B.HOUSENO, 1, 4),
       A.COUNTS,
       A.RECEIPTDATE,
       NVL(A.RECEIPTAMT, 0),
       NVL(A.DELAYAMT, 0),
       NVL(A.DELAYDAYS, 0),
       NVL(A.DISCNTAMT, 0),
       NVL(A.DISCNTDAYS, 0),
       A.DEPOSIT_NO,
       B.CUST_CODE,
       B.SEQ,
       A.PAYTAG
  FROM HD_HOUS_INCOME A,
       HD_HOUS_SELL B
 WHERE A.CUST_CODE = B.CUST_CODE
   AND A.SEQ       = B.SEQ
   AND B.DEPT_CODE = a_dept
   AND B.HOUSETAG  = a_htag
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG  = '3' AND B.CHANGEDATE   <= a_dt))
   AND B.LASTCHANGEDATE <= a_dt
   AND A.RECEIPTDATE <= a_dt
 ORDER BY B.BUILDNO, B.HOUSENO, A.COUNTS, A.TIMES;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_i     := 0;

   BEGIN
      DELETE FROM HD_HOUS_DISK_TEMP
       WHERE DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, '기존 HD_HOUS_DISK_TEMP 삭제하는중 오류가 발생했습니다.');
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /* 버전 */
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_INCOME A,
          HD_HOUS_SELL B
    WHERE A.CUST_CODE = B.CUST_CODE
      AND A.SEQ       = B.SEQ
      AND B.DEPT_CODE = as_dept
      AND B.HOUSETAG  = as_htag
      AND B.CHANGETAG IN ('1', '3')
      AND A.RECEIPTDATE <= as_dt;

   IF v_cnt > 0 THEN
      BEGIN
         INSERT INTO HD_HOUS_DISK_TEMP
                    (DEPT_CODE, HOUSETAG, SEQ, DATA1,        DATA2)
             VALUES (as_dept,   as_htag,  0,   'VERSION2.0', '');
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm); 
               RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || '0' || 'HD_HOUS_DISK_TEMP 추가시 오류가 발생했습니다.');
               ROLLBACK;
               RETURN;
      END;
   END IF;

   /*------------------------------------------------------------------------*/
   OPEN CURC(as_dept, as_htag, as_dt);
   LOOP
      FETCH CURC 
       INTO c_bno,     c_hno,   c_count, c_rdt,
            c_ramt,    c_dyamt, c_dyday, c_dtamt, c_dtday,
            c_deposit, c_cust,  c_seq,   c_ptag;
      EXIT WHEN CURC%NOTFOUND;
      
      o_data := '';
      v_i    := v_i + 1;
      
      --순번,동호
      o_data := c_bno || '|';
      o_data := o_data || c_hno || '|';
                
      --차수구분 00:계약 01~10차 11:잔금
      IF c_count = '90' THEN
         o_data := o_data || '11' || '|';
         o_data := o_data || '1' || '|';
      ELSIF c_count BETWEEN '11' AND '89' THEN
         o_data := o_data || TRIM(TO_CHAR((TO_NUMBER(c_count) - 10))) || '|';
         o_data := o_data || '1' || '|';
      ELSIF c_count = '99' THEN
         o_data := o_data || '40' || '|';
         o_data := o_data || '1' || '|';
      ELSE
         o_data := o_data || '0' || '|';
         o_data := o_data || TO_CHAR(TO_NUMBER(c_count) + 1) || '|';
      END IF;

      --입출일자
      o_data := o_data || SUBSTR(c_rdt, 1, 4) || '-' || SUBSTR(c_rdt, 5, 2) || '-' || SUBSTR(c_rdt, 7, 2) || '|';
      
      --수납원금
      o_data := o_data || TRIM(TO_CHAR(c_ramt)) || '|';

      --연체금액, 연체일수
      o_data := o_data || TRIM(TO_CHAR(c_dyamt)) || '|';
      o_data := o_data || TRIM(TO_CHAR(c_dyday)) || '|';
      
      --연체율
      v_rate := 0;
      SELECT NVL(MAX(DELAYRATE), 0)
        INTO v_rate
        FROM HD_HOUS_RATE_DELAY
       WHERE CUST_CODE = c_cust
         AND SEQ       = c_seq
         AND c_rdt BETWEEN STARTDATE AND ENDDATE
         AND (SELECT TO_DATE(c_rdt, 'YYYYMMDD') - TO_DATE(AGREEDATE, 'YYYYMMDD')
                FROM HD_HOUS_SELLDETAIL
               WHERE CUST_CODE = c_cust
                 AND SEQ       = c_seq
                 AND COUNTS    = c_count
             ) BETWEEN START_DAYS AND END_DAYS;
      o_data := o_data || TRIM(TO_CHAR(TRUNC(v_rate * 100) / 100)) || '|';

      --할인금액, 할인일수
      o_data := o_data || TRIM(TO_CHAR(c_dtamt)) || '|';
      o_data := o_data || TRIM(TO_CHAR(c_dtday)) || '|';

      --할인율
      v_rate := 0;
      SELECT NVL(MAX(DISCNTRATE), 0)
        INTO v_rate
        FROM HD_HOUS_RATE_DISCOUNT
       WHERE CUST_CODE = c_cust
         AND SEQ       = c_seq
         AND c_rdt BETWEEN STARTDATE AND ENDDATE;
      o_data := o_data || TRIM(TO_CHAR(TRUNC(v_rate * 100) / 100)) || '|';

      --주민번호,계좌번호
      o_data := o_data || REPLACE(REPLACE(c_cust, ' ', ''), '-', '') || '|';
      o_data := o_data || REPLACE(c_deposit, ' ', '') || '|';

      --납부방법
      IF c_ptag = '4' THEN
         o_data := o_data || '02';
      ELSIF c_ptag = '5' THEN
         o_data := o_data || '03';
      ELSE
         o_data := o_data || '01';
      END IF;

      BEGIN
         INSERT INTO HD_HOUS_DISK_TEMP
                    (DEPT_CODE, HOUSETAG, SEQ, DATA1,  DATA2)
             VALUES (as_dept,   as_htag,  v_i, o_data, '');
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm); 
               RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || v_i || 'HD_HOUS_DISK_TEMP 추가시 오류가 발생했습니다.');
               ROLLBACK;
               RETURN;
      END;
   END LOOP;
   CLOSE CURC;

 
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_DISK2;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_DISK2" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2  --분양구분
)
IS

/*---------------------------------------------------------------------------*/
/* system value */
v_sysdt         VARCHAR2(14);
v_cnt           NUMBER(5);

/*---------------------------------------------------------------------------*/
/* temp value */
v_i             NUMBER(4);

v_dt00          VARCHAR2(8);
v_dt01          VARCHAR2(8);
v_dt02          VARCHAR2(8);
v_dt03          VARCHAR2(8);
v_dt04          VARCHAR2(8);
v_dt05          VARCHAR2(8);
v_dt06          VARCHAR2(8);
v_dt07          VARCHAR2(8);
v_dt08          VARCHAR2(8);
v_dt09          VARCHAR2(8);
v_dt10          VARCHAR2(8);
v_dt11          VARCHAR2(8);
v_dt90          VARCHAR2(8);

v_at00          NUMBER(15);
v_at01          NUMBER(15);
v_at02          NUMBER(15);
v_at03          NUMBER(15);
v_at04          NUMBER(15);
v_at05          NUMBER(15);
v_at06          NUMBER(15);
v_at07          NUMBER(15);
v_at08          NUMBER(15);
v_at09          NUMBER(15);
v_at10          NUMBER(15);
v_at11          NUMBER(15);
v_at90          NUMBER(15);

v_yrate1        NUMBER(5,2);
v_yrate2        NUMBER(5,2);
v_yrate3        NUMBER(5,2);
v_yrate4        NUMBER(5,2);
v_trate         NUMBER(5,2);

v_indt          VARCHAR2(8);

/*---------------------------------------------------------------------------*/
/* cursor value */
c_buildno       VARCHAR2(4);
c_houseno       VARCHAR2(4);
c_cust_code     VARCHAR2(20);
c_seq           NUMBER(5);
c_cust_name     VARCHAR2(50);
c_zip           VARCHAR2(6);
c_addr1         VARCHAR2(100);
c_addr2         VARCHAR2(100);
c_tel           VARCHAR2(20);
c_comp_tel      VARCHAR2(20);
c_email         VARCHAR2(50);
c_square        NUMBER(10,4);
c_type          VARCHAR(1);
c_totalarea     NUMBER(10,4);
c_exclusivearea NUMBER(10,4);
c_indt          VARCHAR(8);
c_housetag      VARCHAR2(1);
c_totamt        NUMBER(15);

/*---------------------------------------------------------------------------*/
/* output value */
o_data          VARCHAR2(1000);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURC(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT SUBSTRB(A.BUILDNO, 1, 4),
       SUBSTRB(A.HOUSENO, 1, 4),
       A.CUST_CODE,
       A.SEQ,
       C.CUST_NAME,
       C.ZIP,
       C.ADDR1,
       C.ADDR2,
       C.TEL,
       C.COMP_TEL,
       C.EMAIL,
       A.SQUARE,
       A.TYPE,
       NVL(A.EXCLUSIVEAREA, 0) + NVL(A.COMMONAREA, 0) AS TOTALAREA,
       NVL(A.EXCLUSIVEAREA, 0),
       NVL(A.MOVEINSTARTDATE, ' '),
       A.HOUSETAG,
       SUM(B.BUNAMT) AS TOTAMT
  FROM HD_HOUS_SELL A,
       HD_HOUS_SELLDETAIL B,
       VW_HD_CODE_CUSTOMER C
 WHERE A.CUST_CODE = B.CUST_CODE
   AND A.SEQ       = B.SEQ
   AND A.CUST_CODE = C.CUST_CODE
   AND A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.CHANGETAG = '1'
 GROUP BY A.BUILDNO,       A.HOUSENO,      A.CUST_CODE,  A.SEQ,
          C.CUST_NAME,     C.ZIP,          C.ADDR1,      C.ADDR2,
          C.TEL,           C.COMP_TEL,     A.SQUARE,     C.EMAIL,
          A.TYPE,          NVL(A.EXCLUSIVEAREA, 0) + NVL(A.COMMONAREA, 0),
          NVL(A.EXCLUSIVEAREA, 0), NVL(A.MOVEINSTARTDATE, ' '), A.HOUSETAG;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_i     := 0;

   BEGIN
      DELETE FROM HD_HOUS_DISK_TEMP
       WHERE DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, '기존 HD_HOUS_DISK_TEMP 삭제하는중 오류가 발생했습니다.');
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /* 버전 */
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SELL A,
          HD_HOUS_SELLDETAIL B,
          VW_HD_CODE_CUSTOMER C
    WHERE A.CUST_CODE = B.CUST_CODE
      AND A.SEQ       = B.SEQ
      AND A.CUST_CODE = C.CUST_CODE
      AND A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.CHANGETAG = '1';
   IF v_cnt > 0 THEN
      BEGIN
         INSERT INTO HD_HOUS_DISK_TEMP
                    (DEPT_CODE, HOUSETAG, SEQ, DATA1,        DATA2)
             VALUES (as_dept,   as_htag,  0,   '',           'VERSION2.0');
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm); 
               RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || '0' || 'HD_HOUS_DISK_TEMP 추가시 오류가 발생했습니다.');
               ROLLBACK;
               RETURN;
      END;
   END IF;

   /*------------------------------------------------------------------------*/
   OPEN CURC(as_dept, as_htag);
   LOOP
      FETCH CURC 
       INTO c_buildno,   c_houseno,   c_cust_code,     c_seq,
            c_cust_name, c_zip,       c_addr1,         c_addr2,
            c_tel,       c_comp_tel,  c_email,         c_square,
            c_type,      c_totalarea, c_exclusivearea, c_indt,
            c_housetag,  c_totamt;
      EXIT WHEN CURC%NOTFOUND;
      
      o_data := '';
      v_i    := v_i + 1;

      --순번,동호, 주민번호, 이름, 우편번호, 주소
      o_data := c_buildno || '|';
      o_data := o_data || c_houseno || '|';
      o_data := o_data || REPLACE(REPLACE(c_cust_code, ' ', ''), '-', '') || '|';
      o_data := o_data || REPLACE(c_cust_name, ' ', '') || '|';
      o_data := o_data || c_zip || '|';
      o_data := o_data || REPLACE(c_addr1, ' ', '') || '|';
      o_data := o_data || REPLACE(c_addr2, ' ', '') || '|';

      --자택전화, 직장전화, 이메일
      o_data := o_data || c_tel || '|';
      o_data := o_data || c_comp_tel || '|';
      o_data := o_data || c_email || '|';


      --면적TYPE, 분양면적, 전용면적, 총분양금액
--      o_data := o_data || TRIM(TO_CHAR(TRUNC(c_square))) || c_type || '|'; --더이상사용하지않는다
      o_data := o_data || TRIM(TO_CHAR(c_totalarea)) || '|';
      o_data := o_data || TRIM(TO_CHAR(c_exclusivearea)) || '|';
      o_data := o_data || TRIM(TO_CHAR(c_totamt)) || '|';

      --옵션금액
      o_data := o_data || '0' || '|';

      --연체율
      SELECT NVL(MAX(CASE WHEN START_DAYS = 0 THEN DELAYRATE ELSE 0 END), 0) AS YR1,
             NVL(MAX(CASE WHEN START_DAYS = 1 THEN DELAYRATE ELSE 0 END), 0) AS YR2,
             NVL(MAX(CASE WHEN START_DAYS = 3 THEN DELAYRATE ELSE 0 END), 0) AS YR3,
             NVL(MAX(CASE WHEN START_DAYS = 6 THEN DELAYRATE ELSE 0 END), 0) AS YR4
        INTO v_yrate1, v_yrate2, v_yrate3, v_yrate4
        FROM (SELECT MAX(STARTDATE) AS STARTDATE
                FROM HD_HOUS_RATE_DELAY
               WHERE CUST_CODE = c_cust_code
                 AND SEQ       = c_seq
             ) A,
             HD_HOUS_RATE_DELAY B
       WHERE CUST_CODE   = c_cust_code
         AND SEQ         = c_seq
         AND A.STARTDATE = B.STARTDATE;
      o_data := o_data || v_yrate1 || '|';
      o_data := o_data || v_yrate2 || '|';
      o_data := o_data || v_yrate3 || '|';
      o_data := o_data || v_yrate4 || '|';

      --할인율
      SELECT NVL(MAX(DISCNTRATE), 0)
        INTO v_trate
        FROM (SELECT MAX(STARTDATE) AS STARTDATE
                FROM HD_HOUS_RATE_DISCOUNT
               WHERE CUST_CODE = c_cust_code
                 AND SEQ       = c_seq
             ) A,
             HD_HOUS_RATE_DISCOUNT B
       WHERE CUST_CODE = c_cust_code
         AND SEQ       = c_seq
         AND A.STARTDATE = B.STARTDATE;
      o_data := o_data || v_trate || '|';

      --분양구분
      IF c_housetag = '1' THEN --아파트
         o_data := o_data || '01' || '|';
      ELSIF c_housetag = '2' THEN --오피스텔
         o_data := o_data || '05' || '|';
      ELSIF c_housetag = '3' THEN --상가
         o_data := o_data || '03' || '|';
      ELSIF c_housetag = '4' THEN --빌라
         o_data := o_data || '04' || '|';
      ELSIF c_housetag = '5' THEN --임대아파트
         o_data := o_data || '02' || '|';
      ELSIF c_housetag = '6' THEN --주상복합
         o_data := o_data || '04' || '|';
      ELSE --기타
         o_data := o_data || '07' || '|';
      END IF;

      --입주예정일
      IF LENGTH(c_indt) < 8 THEN
         SELECT NVL(MAX(AGREEDATE), ' ')
           INTO v_indt
           FROM HD_HOUS_SELLDETAIL A,
                (SELECT MAX(COUNTS) AS COUNTS
                   FROM HD_HOUS_SELLDETAIL
                  WHERE CUST_CODE = c_cust_code
                    AND SEQ       = c_seq
                ) B
          WHERE A.CUST_CODE = c_cust_code
            AND A.SEQ       = c_seq
            AND A.COUNTS    = B.COUNTS;
         o_data := o_data || SUBSTR(v_indt, 1, 4) || '-' || SUBSTR(v_indt, 5, 2) || '-' || SUBSTR(v_indt, 7, 2) ||'|';
      ELSE
         o_data := o_data || SUBSTR(c_indt, 1, 4) || '-' || SUBSTR(c_indt, 5, 2) || '-' || SUBSTR(c_indt, 7, 2) ||'|';
      END IF;

      --차수별약정
      SELECT NVL(MAX(DECODE(COUNTS, '00', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '00', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '01', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '01', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '11', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '11', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '12', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '12', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '13', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '13', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '14', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '14', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '15', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '15', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '16', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '16', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '17', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '17', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '18', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '18', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '19', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '19', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '20', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '20', BUNAMT, 0)), 0),
             NVL(MAX(DECODE(COUNTS, '90', AGREEDATE, '')), ' '), NVL(MAX(DECODE(COUNTS, '90', BUNAMT, 0)), 0)
        INTO v_dt00, v_at00,
             v_dt01, v_at01, 
             v_dt02, v_at02, 
             v_dt03, v_at03, 
             v_dt04, v_at04, 
             v_dt05, v_at05, 
             v_dt06, v_at06, 
             v_dt07, v_at07, 
             v_dt08, v_at08, 
             v_dt09, v_at09, 
             v_dt10, v_at10, 
             v_dt11, v_at11, 
             v_dt90, v_at90 
        FROM HD_HOUS_SELLDETAIL
       WHERE CUST_CODE = c_cust_code
         AND SEQ       = c_seq
         AND (COUNTS IN ('00', '01', '90') OR COUNTS BETWEEN '11' AND '20')
       GROUP BY CUST_CODE, SEQ;

      --계약, 2차계약
      IF LENGTH(v_dt00) = 8 THEN
         o_data := o_data || SUBSTR(v_dt00, 1, 4) || '-' || SUBSTR(v_dt00, 5, 2) || '-' || SUBSTR(v_dt00, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at00)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt01) = 8 THEN
         o_data := o_data || SUBSTR(v_dt01, 1, 4) || '-' || SUBSTR(v_dt01, 5, 2) || '-' || SUBSTR(v_dt01, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at01)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      --중도금1~10차 
      IF LENGTH(v_dt02) = 8 THEN
         o_data := o_data ||SUBSTR(v_dt02, 1, 4) || '-' || SUBSTR(v_dt02, 5, 2) || '-' || SUBSTR(v_dt02, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at02)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt03) = 8 THEN
         o_data := o_data || SUBSTR(v_dt03, 1, 4) || '-' || SUBSTR(v_dt03, 5, 2) || '-' || SUBSTR(v_dt03, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at03)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt04) = 8 THEN
         o_data := o_data || SUBSTR(v_dt04, 1, 4) || '-' || SUBSTR(v_dt04, 5, 2) || '-' || SUBSTR(v_dt04, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at04)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt05) = 8 THEN
         o_data := o_data || SUBSTR(v_dt05, 1, 4) || '-' || SUBSTR(v_dt05, 5, 2) || '-' || SUBSTR(v_dt05, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at05)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt06) = 8 THEN
         o_data := o_data || SUBSTR(v_dt06, 1, 4) || '-' || SUBSTR(v_dt06, 5, 2) || '-' || SUBSTR(v_dt06, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at06)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt07) = 8 THEN
         o_data := o_data || SUBSTR(v_dt07, 1, 4) || '-' || SUBSTR(v_dt07, 5, 2) || '-' || SUBSTR(v_dt07, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at07)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt08) = 8 THEN
         o_data := o_data || SUBSTR(v_dt08, 1, 4) || '-' || SUBSTR(v_dt08, 5, 2) || '-' || SUBSTR(v_dt08, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at08)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt09) = 8 THEN
         o_data := o_data || SUBSTR(v_dt09, 1, 4) || '-' || SUBSTR(v_dt09, 5, 2) || '-' || SUBSTR(v_dt09, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at09)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt10) = 8 THEN
         o_data := o_data || SUBSTR(v_dt10, 1, 4) || '-' || SUBSTR(v_dt10, 5, 2) || '-' || SUBSTR(v_dt10, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at10)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      IF LENGTH(v_dt11) = 8 THEN
         o_data := o_data || SUBSTR(v_dt11, 1, 4) || '-' || SUBSTR(v_dt11, 5, 2) || '-' || SUBSTR(v_dt11, 7, 2) ||'|';
         o_data := o_data || TRIM(TO_CHAR(v_at11)) || '|';
      ELSE
         o_data := o_data || '' || '|' || '' || '|';
      END IF;

      --잔금
      o_data := o_data || TRIM(TO_CHAR(v_at90));
  
      BEGIN
         INSERT INTO HD_HOUS_DISK_TEMP
                    (DEPT_CODE, HOUSETAG, SEQ, DATA1,  DATA2)
             VALUES (as_dept,   as_htag,  v_i, '',     o_data);
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm); 
               RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || v_i || 'HD_HOUS_DISK_TEMP 추가시 오류가 발생했습니다.');
               ROLLBACK;
               RETURN;
      END;
   END LOOP;
   CLOSE CURC;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_HEYAK;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_HEYAK" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2, --분양구분
   as_bno     IN VARCHAR2, --동
   as_hno     IN VARCHAR2, --호
   as_cust    IN VARCHAR2, --해약자
   as_seq     IN VARCHAR2, --해약자순번
   as_remark  IN VARCHAR2, --사유
   as_dt      IN VARCHAR2, --해약일
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt     VARCHAR2(14);
v_dept      VARCHAR2(12);
v_htag      VARCHAR2(1);
v_bno       VARCHAR2(10);
v_hno       VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   SELECT DEPT_CODE, HOUSETAG, BUILDNO, HOUSENO
     INTO v_dept,    v_htag,   v_bno,   v_hno
     FROM HD_HOUS_SELL
    WHERE CUST_CODE = as_cust
      AND SEQ       = TO_NUMBER(as_seq); 

   BEGIN
      UPDATE HD_HOUS_SELL
         SET CHANGETAG     = '3',
             CHANGEDATE    = as_dt,
             CANCEL_REASON = as_remark,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE CUST_CODE     = as_cust
         AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || '세대별 분양대장 저장중 오류가 발생했습니다.');
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET CONTRACTYESNO  = 'N',
             CHG_DUTY_ID    = as_user,
             CHG_DATE       = v_sysdt
       WHERE DEPT_CODE      = v_dept
         AND HOUSETAG       = v_htag
         AND BUILDNO        = v_bno
         AND HOUSENO        = v_hno;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '공급내역 저장중 오류가 발생했습니다.');
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_JICHE;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_JICHE" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2, --분양구분
   as_nbno    IN VARCHAR2, --시작동
   as_nhno    IN VARCHAR2, --시작호
   as_xbno    IN VARCHAR2, --종료동
   as_xhno    IN VARCHAR2, --종료호
   as_cdt     IN VARCHAR2, --지체대상금대상자
   as_rdt     IN VARCHAR2, --지체대상금계산
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_cnt      NUMBER(5);
v_sysdt    VARCHAR2(14);
v_idt      VARCHAR2(8);
v_itag     VARCHAR2(1);
v_rate     FLOAT;
v_dday     NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_INDEMINITY
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND ICHE_YN   = 'Y';
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당현장으로 이체된 지체보상금처리 내역이 존재합니다');
      ROLLBACK;
      RETURN;
   END IF; 

   /*------------------------------------------------------------------------*/
   SELECT DELAYDAY, DELAYRATE, INDEMINITY_TAG
     INTO v_dday,   v_rate,    v_itag
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_idt   := TO_CHAR(SYSDATE, 'YYYYMMDD');

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_INDEMINITY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'DELETE HD_HOUS_INDEMINITY 01');
              ROLLBACK;
              RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_INDEMINITY
                 (CUST_CODE,    SEQ,           DEPT_CODE,   HOUSETAG,
                  RECEIPTAMT,   REALINCOMAMT )
           SELECT A.CUST_CODE,  A.SEQ,         A.DEPT_CODE, A.HOUSETAG,
                  B.RECEIPTAMT, B.REALINCOMAMT
             FROM HD_HOUS_SELL A,
                  (SELECT CUST_CODE,
                          SEQ,
                          SUM(RECEIPTAMT) AS RECEIPTAMT,
                          SUM(REALINCOMAMT) AS REALINCOMAMT
                     FROM HD_HOUS_INCOME
                    WHERE DEPT_CODE    = as_dept
                      AND HOUSETAG     = as_htag
                      AND RECEIPTDATE <= as_rdt
                      AND BUILDNO BETWEEN LPAD(as_nbno, 4, ' ') AND LPAD(as_xbno, 4, ' ')
                      AND HOUSENO BETWEEN LPAD(as_nhno, 4, ' ') AND LPAD(as_xhno, 4, ' ')
                    GROUP BY CUST_CODE, SEQ
                  ) B
            WHERE A.DEPT_CODE = as_dept
              AND A.HOUSETAG  = as_htag
              AND A.CUST_CODE = B.CUST_CODE
              AND A.SEQ       = B.SEQ
              AND A.BUILDNO BETWEEN LPAD(as_nbno, 4, ' ') AND LPAD(as_xbno, 4, ' ')
              AND A.HOUSENO BETWEEN LPAD(as_nhno, 4, ' ') AND LPAD(as_xhno, 4, ' ')
              AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_cdt) OR
                   (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_cdt))
              AND A.LASTCHANGEDATE <= as_cdt;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'INSERT HD_HOUS_INDEMINITY 01');
              ROLLBACK;
              RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_INDEMINITY
         SET INDEMINITY_TAG   = v_itag,
             DELAY_INDEMINITY = TRUNC((CASE WHEN v_itag = '1' THEN RECEIPTAMT ELSE REALINCOMAMT END) * (v_dday / 365) * (v_rate / 100)),
             ICHE_DATE        = v_idt,
             ICHE_YN          = 'N',
             INPUT_DUTY_ID    = as_user,
             INPUT_DATE       = v_sysdt
       WHERE DEPT_CODE        = as_dept
         AND HOUSETAG         = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'UPDATE HD_HOUS_INDEMINITY 01');
              ROLLBACK;
              RETURN;
   END;
 
   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_JICHE_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_JICHE_CONV" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2, --분양구분
   as_cdt     IN VARCHAR2, --지체대상금대상자
   as_rdt     IN VARCHAR2, --지체대상금계산
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt      VARCHAR2(14);
v_itag       VARCHAR2(1);
v_cnt        NUMBER(5);

c_cust       VARCHAR2(20);
c_seq        NUMBER(5);
c_bno        VARCHAR2(10);
c_hno        VARCHAR2(10);
c_ramt       NUMBER(15);
c_iamt       NUMBER(15);
c_damt       NUMBER(15);
c_idate      VARCHAR2(8);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURCONV(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
   SELECT A.CUST_CODE,  A.SEQ, A.BUILDNO, A.HOUSENO, B.RECEIPTAMT, B.REALINCOMAMT, C.DELAY_INDEMINITY, C.ICHE_DATE
     FROM HD_HOUS_SELL A,
          (SELECT CUST_CODE,
                  SEQ,
                  SUM(RECEIPTAMT) AS RECEIPTAMT,
                  SUM(REALINCOMAMT) AS REALINCOMAMT
             FROM HD_HOUS_INCOME
            WHERE DEPT_CODE    = a_dept
              AND HOUSETAG     = a_htag
              AND RECEIPTDATE <= as_rdt
            GROUP BY CUST_CODE, SEQ
          ) B,
          HD_HOUS_INDEMINITY_CONV C
    WHERE A.DEPT_CODE = a_dept
      AND A.HOUSETAG  = a_htag
      AND A.CUST_CODE = B.CUST_CODE
      AND A.SEQ       = B.SEQ
      AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_cdt) OR
           (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_cdt))
      AND A.LASTCHANGEDATE <= as_cdt
      AND A.BUILDNO   = LPAD(C.BUILDNO, 4, ' ')
      AND A.HOUSENO   = LPAD(C.HOUSENO, 4, ' ')
      AND C.DEPT_CODE = a_dept
      AND C.HOUSETAG  = a_htag;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_INDEMINITY
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND ICHE_YN   = 'Y';
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당현장으로 이체된 지체보상금처리 내역이 존재합니다');
      ROLLBACK;
      RETURN;
   END IF; 

   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   SELECT NVL(INDEMINITY_TAG, '1')
     INTO v_itag
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_INDEMINITY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'DELETE HD_HOUS_INDEMINITY 01');
            ROLLBACK;
            RETURN;
   END;

   /*------------------------------------------------------------------------*/
   OPEN CURCONV(as_dept, as_htag);
   LOOP
      FETCH CURCONV 
       INTO c_cust, c_seq, c_bno, c_hno, c_ramt, c_iamt, c_damt, c_idate;
      EXIT WHEN CURCONV%NOTFOUND;

      BEGIN
         INSERT INTO HD_HOUS_INDEMINITY
                   ( CUST_CODE,     SEQ,          DEPT_CODE,      HOUSETAG,
                     RECEIPTAMT,    REALINCOMAMT, INDEMINITY_TAG, DELAY_INDEMINITY,
                     ICHE_YN,       ICHE_DATE,
                     INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID,    CHG_DATE )
            VALUES ( c_cust,        c_seq,        as_dept,        as_htag,
                     c_ramt,        c_iamt,       v_itag,         c_damt,
                     'N',           c_idate,
                     as_user,       v_sysdt,      '',             '' );
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'INSERT HD_HOUS_INDEMINITY 02');
               ROLLBACK;
               RETURN;
      END;

      BEGIN
         UPDATE HD_HOUS_INDEMINITY_CONV
            SET CONV_YN     = 'Y'
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag
            AND LPAD(BUILDNO, 4, ' ') = c_bno
            AND LPAD(HOUSENO, 4, ' ') = c_hno;
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'UPDATE HD_HOUS_INDEMINITY_CONV 03');
               ROLLBACK;
               RETURN;
      END;
   END LOOP;
   CLOSE CURCONV;
 
   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_JUNME;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_JUNME" (
   as_dept     IN VARCHAR2, --현장
   as_htag     IN VARCHAR2, --분양구분
   as_bno      IN VARCHAR2, --동
   as_hno      IN VARCHAR2, --호
   as_cust     IN VARCHAR2, --매도자
   as_seq      IN VARCHAR2, --매도자순번
   as_ncust    IN VARCHAR2, --매수자
   as_ncustnm  IN VARCHAR2, --매수자
   as_dt       IN VARCHAR2, --매수일
   as_cont     IN VARCHAR2, --계약번호
   as_remark   IN VARCHAR2, --사유
   as_viryn    IN VARCHAR2, --가상계좌사용여부
   as_vdeposit IN VARCHAR2, --가상계좌번호
   as_user     IN VARCHAR2  --실행자
   
   --가상계좌사용여부와 가상계좌번호 받을것
   
)
IS

/*---------------------------------------------------------------------------*/
v_nseq      NUMBER(5);
v_sysdt     VARCHAR2(14);

v_vbank     VARCHAR(10);
v_vdeposit  VARCHAR(50);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   SELECT NVL(MAX(SEQ), 0) + 1, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
     INTO v_nseq,               v_sysdt
     FROM HD_HOUS_SELL
    WHERE CUST_CODE = as_ncust;

   SELECT A.VIRBANK_CODE, B.VDEPOSIT 
     INTO v_vbank,        v_vdeposit
     FROM HD_CODE_HOUSE A,
          HD_HOUS_SELL B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND B.CUST_CODE = as_cust
      AND B.SEQ       = TO_NUMBER(as_seq); 

   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET CONTRACTYESNO = 'N'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND BUILDNO   = as_bno
         AND HOUSENO   = as_hno;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SUPPLY 01:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_SELL
                 (CUST_CODE,           SEQ,              DEPT_CODE,       HOUSETAG,         BUILDNO,
                  HOUSENO,             DONGHO,           CUST_NAME,       SQUARE,           PRTSQUARE,           TYPE,
                  CLASS,               OPTIONCODE,       CONTRACTTAG,     CONTRACTDATE,     CONTRACTNO,
                  LOAN_TAG,            LEASETAG,         LASTCHANGEDATE,  CHANGETAG,        CHANGEDATE,
                  CANCEL_REASON,       CHILD_BUILDNO,    CHILD_HOUSENO,   RELA_CUSTCODE,    RELA_SEQ,
                  VATTAG,              EXCLUSIVEAREA,    COMMONAREA,      ETCCOMMONAREA,    PARKINGAREA,
                  SERVICEAREA,         SITEAREA,         MOVEINSTARTDATE, MOVEINENDDATE,    UNION_CNT,
                  REMARK,              REFUNDMENTDATE,   REFUNDMENTAMT,   PENALTYAMT,       COMP_LOANAMT,
                  LOAN_INTEREST,       SODUK_TAX,        JUMIN_TAX,       BANK_LOAN_ORGAMT, BANK_LOAN_INTEREST,
                  BANK_LOAN_INTEREST2, ETC_AMT,
                  BILL_RETURNAMT,      DELAY_INDEMINITY, DEPOSIT_COUNT,   CO_CUSTCODE,      CO_SANGHO,
                  CO_CONDITION,        CO_CATEGORY,      LOANBANK,        LOANDEPOSIT,      LOANUSER,
                  SLIPDATE,            SLIPSEQ,
                  INPUT_DUTY_ID,       INPUT_DATE,       CHG_DUTY_ID,     CHG_DATE,
                  APPLY_YN,            APPLY_EMPNO,      APPLY_DATE,      RENTHD_YN,        RENTHD_SEQ,
                  BALCONY_TAG,         BALCONYAREA,      DAYMONTH_TAG,    FLOOR,            CONT_CONDITION,
                  LAND_RETURN,         INT_CALC_DATE,    PREDISAMT,       PROXYAMT,         TRUSTAMT,
                  PREDIS_TAG,          PROXY_TAG,        TRUST_TAG,       VIR_YN,           VDEPOSIT, BALCONYAMT,
                  REP_LIMITDT,         REP_YN,           REP_DATE )
           SELECT as_ncust,            v_nseq,           DEPT_CODE,       HOUSETAG,         BUILDNO,
                  HOUSENO,             DONGHO,           as_ncustnm,      SQUARE,           PRTSQUARE,           TYPE,
                  CLASS,               OPTIONCODE,       CONTRACTTAG,     CONTRACTDATE,     as_cont,
                  LOAN_TAG,            LEASETAG,         as_dt,           '1',              '29991231',
                  '',                  '',               '',              '',               NULL,
                  VATTAG,              EXCLUSIVEAREA,    COMMONAREA,      ETCCOMMONAREA,    PARKINGAREA,
                  SERVICEAREA,         SITEAREA,         MOVEINSTARTDATE, MOVEINENDDATE,    0,
                  REMARK,              REFUNDMENTDATE,   REFUNDMENTAMT,   PENALTYAMT,       COMP_LOANAMT,
                  LOAN_INTEREST,       SODUK_TAX,        JUMIN_TAX,       BANK_LOAN_ORGAMT, BANK_LOAN_INTEREST,
                  BANK_LOAN_INTEREST2, ETC_AMT,
                  BILL_RETURNAMT,      DELAY_INDEMINITY, DEPOSIT_COUNT,   as_ncust,         as_ncustnm,
                  '',                  '',               LOANBANK,        LOANDEPOSIT,      LOANUSER,
                  SLIPDATE,            SLIPSEQ,
                  as_user,             v_sysdt ,         '',              '',
                  'N',                 '',               '',              'N',              0,
                  BALCONY_TAG,         BALCONYAREA,      DAYMONTH_TAG,    FLOOR,            CONT_CONDITION,
                  LAND_RETURN,         INT_CALC_DATE,    PREDISAMT,       PROXYAMT,         TRUSTAMT,
                  PREDIS_TAG,          PROXY_TAG,        TRUST_TAG,       as_viryn,         as_vdeposit, BALCONYAMT,
                  REP_LIMITDT,         REP_YN,           REP_DATE
             FROM HD_HOUS_SELL
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_SELL 02:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SELL
         SET CHANGETAG     = '2',
             CHANGEDATE    = as_dt,
             CANCEL_REASON = as_remark,
             RELA_CUSTCODE = as_ncust,
             RELA_SEQ      = v_nseq,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE CUST_CODE     = as_cust
         AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SELL 03:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET CONTRACTYESNO = 'Y'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND BUILDNO   = as_bno
         AND HOUSENO   = as_hno;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE HD_HOUS_SUPPLY 04:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_SELLDETAIL
                 (CUST_CODE,     SEQ,        COUNTS,      DEPT_CODE, HOUSETAG,
                  BUILDNO,       HOUSENO,    AGREEDATE,   LANDAMT,   BUILDAMT,
                  VATAMT,        BUNAMT,     DC_YN,       AC_YN,     PERPECTTAG,
                  RECEIPTAMT,    SLIPDT,     SLIPSEQ,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,  MANAGEAMT)
           SELECT as_ncust,      v_nseq,     COUNTS,      DEPT_CODE, HOUSETAG,
                  BUILDNO,       HOUSENO,    AGREEDATE,   LANDAMT,   BUILDAMT,
                  VATAMT,        BUNAMT,     DC_YN,       AC_YN,     PERPECTTAG,
                  RECEIPTAMT,    SLIPDT,     SLIPSEQ,
                  as_user,       v_sysdt,    '',          '',        MANAGEAMT
             FROM HD_HOUS_SELLDETAIL
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_SELLDETAIL 05:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_INCOME
                 (CUST_CODE,     SEQ,            COUNTS,           TIMES,         DEPT_CODE,
                  HOUSETAG,      BUILDNO,        HOUSENO,          DEPOSIT_NO,    RECEIPTDATE,
                  RECEIPTAMT,    RECEIPTLANDAMT, RECEIPTBUILDAMT,  RECEIPTVATAMT, DELAYDAYS,
                  DELAYAMT,      DISCNTDAYS,     DISCNTAMT,        REALINCOMAMT,  REALLANDAMT,
                  REALBUILDAMT,  REALVATAMT,     BANK_CODE,        BANK_NAME,     PAYTAG,
                  INCOMTYPE,     MOD_YN,         REAL_PAY_TAG,     SLIPDT,        SLIPSEQ,
                  TAXDATE,       TAXSEQ,         INSEQ,
                  INPUT_DUTY_ID, INPUT_DATE,     CHG_DUTY_ID,      CHG_DATE,      SLIPTYPE,
                  VDEPOSIT_NO,   DETAILMOD_YN,   OUT_DT,           OUT_TM,        OUT_SEQ,
                  OUT_BANK,      REMARK,         RECEIPTMANAGEAMT, REALMANAGEAMT, CDNO,
                  CD_BANK,       CD_EDATE,       CD_STYPE )
           SELECT as_ncust,      v_nseq,         COUNTS,           TIMES,         DEPT_CODE,
                  HOUSETAG,      BUILDNO,        HOUSENO,          DEPOSIT_NO,    RECEIPTDATE,
                  RECEIPTAMT,    RECEIPTLANDAMT, RECEIPTBUILDAMT,  RECEIPTVATAMT, DELAYDAYS,
                  DELAYAMT,      DISCNTDAYS,     DISCNTAMT,        REALINCOMAMT,  REALLANDAMT,
                  REALBUILDAMT,  REALVATAMT,     BANK_CODE,        BANK_NAME,     PAYTAG,
                  INCOMTYPE,     MOD_YN,         'N',              SLIPDT,        SLIPSEQ,
                  TAXDATE,       TAXSEQ,         INSEQ,
                  as_user,       v_sysdt,        '',               '',            SLIPTYPE,
                  VDEPOSIT_NO,   DETAILMOD_YN,   OUT_DT,           OUT_TM,        OUT_SEQ,
                  OUT_BANK,      REMARK,         RECEIPTMANAGEAMT, REALMANAGEAMT, CDNO,
                  CD_BANK,       CD_EDATE,       CD_STYPE
             FROM HD_HOUS_INCOME
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_INCOME 06:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_RATE_DISCOUNT
                 (CUST_CODE,     SEQ,        STARTDATE,   ENDDATE,
                  DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,     STARTDATE,   ENDDATE,
                  DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_HOUS_RATE_DISCOUNT
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_RATE_DISCOUNT 07:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_RATE_DELAY
                 (CUST_CODE,     SEQ,        START_DAYS,  END_DAYS,
                  STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                  DELAYUNIT,     START_TAG,  END_TAG,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,     START_DAYS,  END_DAYS,
                  STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                  DELAYUNIT,     START_TAG,  END_TAG,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_HOUS_RATE_DELAY
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_RATE_DELAY 08:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 
   BEGIN
      INSERT INTO HD_HOUS_REMARK
                 (CUST_CODE,     SEQ,        REMARKSEQ,    REAMRKDATE,
                  REMARK,        USERID,     CONFIRM_DATE, END_YN,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE)
           SELECT as_ncust,      v_nseq,     REMARKSEQ,    REAMRKDATE,
                  REMARK,        USERID,     CONFIRM_DATE, END_YN,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_HOUS_REMARK
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_REMARK 09:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
   
   BEGIN
      INSERT INTO HD_HOUS_ETCAMT
                 (CUST_CODE, SEQ, ETC_TAG, CNT, RECEIPTDATE, RECEIPTAMT, BANK_CODE, DEPOSIT_NO, 
                  DEPT_CODE, HOUSETAG, BUILDNO, HOUSENO, 
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE   )
           SELECT as_ncust,      v_nseq, ETC_TAG, CNT, RECEIPTDATE, RECEIPTAMT, BANK_CODE, DEPOSIT_NO, 
                  DEPT_CODE,     HOUSETAG,  BUILDNO, HOUSENO,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_ETCAMT
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE(SQLERRM); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_ETCAMT 10:' || SQLERRM);
              ROLLBACK;
              RETURN;
   END;
/* 
   BEGIN
      INSERT INTO HD_SALE_ETC
                 (CUST_CODE,     SEQ,           ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,        ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_SALE_ETC
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_SALE_ETC 10:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 */
 
    BEGIN
      INSERT INTO HD_LEASE_BONDSEIZURE
                 (CUST_CODE,     SEQ,             RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID,   CHG_DATE)
           SELECT as_ncust,      v_nseq,          RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  as_user,       v_sysdt,         '',            ''
             FROM HD_LEASE_BONDSEIZURE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq)
              AND RENT_YN       = 'N';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_SALE_ETC 10:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 
   BEGIN
      INSERT INTO HD_REFER_GIFT
                 (DEPT_CODE,     HOUSETAG,     CUST_CODE,   SEQ,
                  GIFTCODE,      GIFTGIVEDATE,
                  INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE)
           SELECT DEPT_CODE,     HOUSETAG,     as_ncust,    v_nseq,
                  GIFTCODE,      GIFTGIVEDATE,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_REFER_GIFT
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_REFER_GIFT 11:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 
   BEGIN
      INSERT INTO HD_HOUS_OPTION
                 (CUST_CODE,     SEQ,       OPTSEQ,     DEPT_CODE,  HOUSETAG,
                  BUILDNO,       HOUSENO,   OPTION_SUP, OPTION_VAT, CONT_DATE,
                  INPUT_DUTY_ID, INPUT_DATE)
           SELECT as_ncust,      v_nseq,    OPTSEQ,     DEPT_CODE,  HOUSETAG,     
                  BUILDNO,       HOUSENO,   OPTION_SUP, OPTION_VAT, CONT_DATE,
                  as_user,       v_sysdt
             FROM HD_HOUS_OPTION
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_OPTION 11-1:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
 
   BEGIN
      INSERT INTO HD_HOUS_LEND
                 (CUST_CODE,     SEQ,          BANK_CODE,   CNT,
                  AGREEDATE,     AGREEAMT,
                  INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,       BANK_CODE,   CNT,
                  AGREEDATE,     AGREEAMT,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_LEND
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_LEND 12:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_JESE
                 (CUST_CODE,     SEQ,           DEPT_CODE,     HOUSETAG,
                  DEPOSIT1,      INDATE1,       INAMT1,        DEPOSIT2,
                  INDATE2,       INAMT2,        DEPOSIT3,      INDATE3,
                  INAMT3,        JUNGSAN_BDATE, JUNGSAN_SDATE, SISUL_BDATE,
                  SISUL_SDATE,   DUNG_BDATE,    DUNG_SDATE,    BO_BDATE,
                  BO_SDATE,      BUBMU_BUILD,   BUBMU_LAND,    ETC_SDATE,
                  ETC_ADATE,     ETC_IDATE,     REMARK,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,   CHG_DATE)
           SELECT as_ncust,      v_nseq,        DEPT_CODE,     HOUSETAG,
                  DEPOSIT1,      INDATE1,       INAMT1,        DEPOSIT2,
                  INDATE2,       INAMT2,        DEPOSIT3,      INDATE3,
                  INAMT3,        JUNGSAN_BDATE, JUNGSAN_SDATE, SISUL_BDATE,
                  SISUL_SDATE,   DUNG_BDATE,    DUNG_SDATE,    BO_BDATE,
                  BO_SDATE,      BUBMU_BUILD,   BUBMU_LAND,    ETC_SDATE,
                  ETC_ADATE,     ETC_IDATE,     REMARK,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_JESE
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_JESE 13:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_INDEMINITY
                 (CUST_CODE,     SEQ,          DEPT_CODE,      HOUSETAG,
                  RECEIPTAMT,    REALINCOMAMT, INDEMINITY_TAG, DELAY_INDEMINITY,
                  ICHE_DATE,     ICHE_YN,
                  INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID,    CHG_DATE)
           SELECT as_ncust,      v_nseq,       DEPT_CODE,      HOUSETAG,
                  RECEIPTAMT,    REALINCOMAMT, INDEMINITY_TAG, DELAY_INDEMINITY,
                  ICHE_DATE,     ICHE_YN,
                  as_user,       v_sysdt,      '',          ''
             FROM HD_HOUS_INDEMINITY
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-INSERT HD_HOUS_INDEMINITY 14:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_VIRTURE_DEPOSIT
         SET USE_YN        = 'Y',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE COMPANY_CODE  = '100'
         AND BANK_CODE     = v_vbank
         AND VIR_DEPOSITNO = v_vdeposit;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE SM_TRANS_VIRTURE_DEPOSIT 15:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_VIRTURE_DEPOSIT
         SET USE_YN        = 'N',
             MAKE_SEQ      = as_bno || as_hno,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE COMPANY_CODE  = '100'
         AND BANK_CODE     = v_vbank
         AND VIR_DEPOSITNO = as_vdeposit;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR-UPDATE SM_TRANS_VIRTURE_DEPOSIT 16:' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_REGIST_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_REGIST_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_seq  IN VARCHAR2  --올린횟수
)
IS

/*---------------------------------------------------------------------------*/
c_sn          NUMBER(5);
c_buildno     VARCHAR2(10);
c_houseno     VARCHAR2(10);
c_cust_code   VARCHAR2(20);
c_contdate    VARCHAR2(8);
c_receiptdate VARCHAR2(8);
c_receiptamt  NUMBER(15);
c_user        VARCHAR2(12);

/*---------------------------------------------------------------------------*/
v_cnt         NUMBER(10);
v_sysdt       VARCHAR2(14);

v_cseq        NUMBER(5);
v_iseq        NUMBER(5);
v_cnm         VARCHAR2(50);
v_msdt        VARCHAR2(8);
v_medt        VARCHAR2(8);
v_dmt         VARCHAR2(1);

v_c_cnt       VARCHAR2(2);
v_c_date      VARCHAR2(8);
v_c_amt       NUMBER(15);
v_c_lamt      NUMBER(15);
v_c_bamt      NUMBER(15);
v_c_vamt      NUMBER(15);
v_c_mamt      NUMBER(15);

v_rc_amt      NUMBER(15);
v_rc_lamt     NUMBER(15);
v_rc_bamt     NUMBER(15);
v_rc_vamt     NUMBER(15);
v_rc_mamt     NUMBER(15);

v_lc_amt      NUMBER(15);
v_lc_lamt     NUMBER(15);
v_lc_bamt     NUMBER(15);
v_lc_vamt     NUMBER(15);
v_lc_mamt     NUMBER(15);

v_deposit     VARCHAR2(30);
v_bank        VARCHAR2(8);
v_banknm      VARCHAR2(30);

v_viryn       VARCHAR2(1);
v_vdeposit    VARCHAR2(30);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_seq IN VARCHAR2) IS
SELECT A.SN,
       A.BUILDNO,
       A.HOUSENO,
       A.CUST_CODE,
       A.CONTDATE,
       A.RECEIPTDATE,
       A.RECEIPTAMT,
       A.INPUT_DUTY_ID
  FROM HD_HOUS_SELL_TXTUP A
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.SEQ       = TO_NUMBER(a_seq)
   AND A.CONT_YN   = 'C';
   
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_deposit  := '';

   SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND RECEIPTTAG NOT IN ('8', '9')
      AND ROWNUM < 2
    ORDER BY LISTORDER;
   IF v_deposit = 'XXXXX' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 입금계좌를 등록하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   SELECT MAX(BANK_CODE), MAX(BANK_NAME)
     INTO v_bank, v_banknm
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE  = as_dept
      AND HOUSETAG   = as_htag
      AND DEPOSIT_NO = v_deposit;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '올린내용중 중복되는 동호가 있습니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SEQ       = TO_NUMBER(as_seq)
         AND CONT_YN   = 'C'
         AND EXISTS (SELECT 1
                       FROM (SELECT BUILDNO, HOUSENO, COUNT(*)
                               FROM HD_HOUS_SELL
                              WHERE DEPT_CODE = as_dept
                                AND HOUSETAG  = as_htag
                                AND SEQ       = TO_NUMBER(as_seq)
                              GROUP BY BUILDNO, HOUSENO
                             HAVING COUNT(*) > 1
                            ) B
                      WHERE B.BUILDNO = HD_HOUS_SELL_TXTUP.BUILDNO
                        AND B.HOUSENO = HD_HOUS_SELL_TXTUP.HOUSENO);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 01 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '공급내역에 존재하지 않는 동호 입니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SEQ       = TO_NUMBER(as_seq)
         AND CONT_YN   = 'C'
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SUPPLY B
                          WHERE B.DEPT_CODE = HD_HOUS_SELL_TXTUP.DEPT_CODE
                            AND B.HOUSETAG  = HD_HOUS_SELL_TXTUP.HOUSETAG
                            AND B.BUILDNO   = HD_HOUS_SELL_TXTUP.BUILDNO
                            AND B.HOUSENO   = HD_HOUS_SELL_TXTUP.HOUSENO);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 02 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '이미 계약된 동호입니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SEQ       = TO_NUMBER(as_seq)
         AND CONT_YN   = 'C'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL B
                      WHERE B.DEPT_CODE = HD_HOUS_SELL_TXTUP.DEPT_CODE
                        AND B.HOUSETAG  = HD_HOUS_SELL_TXTUP.HOUSETAG
                        AND B.BUILDNO   = HD_HOUS_SELL_TXTUP.BUILDNO
                        AND B.HOUSENO   = HD_HOUS_SELL_TXTUP.HOUSENO
                        AND B.CHANGETAG = 1);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 03 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '등록되어있지않은 고객입니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SEQ       = TO_NUMBER(as_seq)
         AND CONT_YN   = 'C'
         AND NOT EXISTS (SELECT 1
                           FROM SM_CODE_CUST B
                          WHERE B.CUST_CODE = HD_HOUS_SELL_TXTUP.CUST_CODE
                            AND B.HD_YN = 'Y');
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 04 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
/*
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '납입일이 계약일보다 빠릅니다'
       WHERE DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag
         AND SEQ        = TO_NUMBER(as_seq)
         AND CONT_YN    = 'C'
         AND RECEIPTAMT > 0
         AND CONTDATE   > RECEIPTDATE;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 05 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;
*/

   /*------------------------------------------------------------------------*/
   /** 계약금과 계약약정 금액 체크 *******/
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '계약약정금액보다 입금금액이 큽니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SEQ       = TO_NUMBER(as_seq)
         AND CONT_YN   = 'C'
         AND EXISTS (SELECT 1
                       FROM HD_REFER_SELLDETAIL B
                      WHERE B.DEPT_CODE = HD_HOUS_SELL_TXTUP.DEPT_CODE
                        AND B.HOUSETAG  = HD_HOUS_SELL_TXTUP.HOUSETAG
                        AND B.BUILDNO   = HD_HOUS_SELL_TXTUP.BUILDNO
                        AND B.HOUSENO   = HD_HOUS_SELL_TXTUP.HOUSENO
                        AND B.AGREEAMT  < c_receiptamt
                        AND B.COUNTS    = (SELECT MIN(C.COUNTS)
                                             FROM HD_REFER_SELLDETAIL C
                                            WHERE C.DEPT_CODE = B.DEPT_CODE
                                              AND C.HOUSETAG  = B.HOUSETAG
                                              AND C.BUILDNO   = B.BUILDNO
                                              AND C.HOUSENO   = B.HOUSENO
                                          )
                    );

      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 06 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /** 계약금이 있으면서 가상계좌인경우 가상계좌 할당이 안되어있으면 오류 */
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '해당 동호에 가상계좌가 등록되어있지 않습니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SEQ       = TO_NUMBER(as_seq)
         AND CONT_YN   = 'C'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_HOUSE B
                      WHERE B.DEPT_CODE     = HD_HOUS_SELL_TXTUP.DEPT_CODE
                        AND B.HOUSETAG      = HD_HOUS_SELL_TXTUP.HOUSETAG
                        AND B.VIRDEPOSIT_YN = 'Y'
                    )
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SUPPLY C
                      WHERE C.DEPT_CODE                = HD_HOUS_SELL_TXTUP.DEPT_CODE
                        AND C.HOUSETAG                 = HD_HOUS_SELL_TXTUP.HOUSETAG
                        AND C.BUILDNO                  = HD_HOUS_SELL_TXTUP.BUILDNO
                        AND C.HOUSENO                  = HD_HOUS_SELL_TXTUP.HOUSENO
                        AND NVL(C.VIRDEPOSIT, 'XXXXX') = 'XXXXX'
                    );
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 07 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /** 계약금과 계약약정 금액 체크 *******/
   BEGIN
      UPDATE HD_HOUS_SELL_TXTUP
         SET CONT_YN = 'N',
             ERR_MESSAGE = '납입일이 잘못되었습니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SEQ       = TO_NUMBER(as_seq)
         AND CONT_YN   = 'C'
         AND RECEIPTAMT > 0
         AND NVL(RECEIPTDATE, 'X') = 'X';

      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 08 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
    -- HD_HOUS_SELL UPDATE
    -- HD_HOUS_SELLDETAIL UPDATE
    -- HD_HOUS_RATE_DISCOUNT UPDATE
    -- HD_HOUS_RATE_DELAY UPDATE

 -- HD_REFER_GIFT UPDATE
 -- HD_HOUS_REMARK UPDATE
 -- HD_HOUS_SUPPLY UPDATE
 -- HD_HOUS_DAY_INCOME UPDATE
 -- HD_HOUS_INCOME UPDATE
 -- HD_HOUS_DAY INCOME UPDATE
 -- HD_HOUS_SUPPLY UPDATE

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   OPEN CURMAKE(as_dept, as_htag, as_seq);
   LOOP
      FETCH CURMAKE 
       INTO c_sn,         c_buildno,  c_houseno,
            c_cust_code,  c_contdate, c_receiptdate,
            c_receiptamt, c_user;
      EXIT WHEN CURMAKE%NOTFOUND;

      SELECT NVL(MAX(SEQ), 0) + 1
        INTO v_cseq
        FROM HD_HOUS_SELL
       WHERE CUST_CODE = c_cust_code;

      SELECT CUST_NAME
        INTO v_cnm
        FROM SM_CODE_CUST
       WHERE CUST_CODE = c_cust_code;

      SELECT MOVEINSTARTDATE, MOVEINENDDATE, HD_DAYMONTH_TAG, VIRDEPOSIT_YN
        INTO v_msdt,          v_medt,        v_dmt,           v_viryn
        FROM HD_CODE_HOUSE
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;

      v_vdeposit := '';
      IF v_viryn = 'Y' THEN
         SELECT VIRDEPOSIT
           INTO v_vdeposit
           FROM HD_HOUS_SUPPLY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND BUILDNO   = c_buildno
            AND HOUSENO   = c_houseno;
      END IF;

      SELECT COUNTS,  AGREEDATE, AGREEAMT, LANDAMT,  BUILDAMT, VATAMT,   MANAGEAMT
        INTO v_c_cnt, v_c_date,  v_c_amt,  v_c_lamt, v_c_bamt, v_c_vamt, v_c_mamt
        FROM HD_REFER_SELLDETAIL
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND BUILDNO   = c_buildno
         AND HOUSENO   = c_houseno
         AND COUNTS    = (SELECT MIN(COUNTS)
                            FROM HD_REFER_SELLDETAIL
                           WHERE DEPT_CODE = as_dept
                             AND HOUSETAG  = as_htag
                             AND BUILDNO   = c_buildno
                             AND HOUSENO   = c_houseno);

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_SELL
                   ( CUST_CODE,             SEQ,                   DEPT_CODE,               HOUSETAG,             BUILDNO,
                     HOUSENO,               DONGHO,                                         CUST_NAME,            SQUARE,
                     PRTSQUARE,             TYPE,                  CLASS,                   OPTIONCODE,           CONTRACTTAG,
                     CONTRACTDATE,          CONTRACTNO,
                     LOAN_TAG,              LEASETAG,              LASTCHANGEDATE,          CHANGETAG,
                     CHANGEDATE,            CANCEL_REASON,         CHILD_BUILDNO,           CHILD_HOUSENO,        RELA_CUSTCODE,
                     RELA_SEQ,              VATTAG,                EXCLUSIVEAREA,           COMMONAREA,           ETCCOMMONAREA,
                     PARKINGAREA,           SERVICEAREA,           SITEAREA,                MOVEINSTARTDATE,      MOVEINENDDATE,
                     UNION_CNT,             REMARK,                REFUNDMENTDATE,          REFUNDMENTAMT,        PENALTYAMT,
                     COMP_LOANAMT,          LOAN_INTEREST,         SODUK_TAX,               JUMIN_TAX,            ETC_AMT,
                     BANK_LOAN_ORGAMT,      BANK_LOAN_INTEREST,    BANK_LOAN_INTEREST2,
                     BILL_RETURNAMT,        DELAY_INDEMINITY,      DEPOSIT_COUNT,           CO_CUSTCODE,          CO_SANGHO,
                     CO_CONDITION,          CO_CATEGORY,           LOANBANK,                LOANDEPOSIT,          LOANUSER,
                     SLIPDATE,              SLIPSEQ,
                     INPUT_DUTY_ID,         INPUT_DATE,            CHG_DUTY_ID,             CHG_DATE,
                     APPLY_YN,              APPLY_EMPNO,           APPLY_DATE,              RENTHD_YN,            RENTHD_SEQ,
                     BALCONY_TAG,           BALCONYAREA,           DAYMONTH_TAG,            FLOOR,                CONT_CONDITION,
                     LAND_RETURN,           INT_CALC_DATE,         PREDISAMT,               PROXYAMT,
                     INCONT_DATE,
                     TRUSTAMT,              PREDIS_TAG,            PROXY_TAG,               TRUST_TAG,            VIR_YN,
                     VDEPOSIT,              REP_LIMITDT,           REP_YN,                  REP_DATE )
              SELECT c_cust_code,           v_cseq,                as_dept,                 as_htag,              BUILDNO,
                     HOUSENO,               BUILDNO || '-' || HOUSENO,                      v_cnm,                SQUARE,
                     PRTSQUARE,             TYPE,                  CLASS,                   OPTIONCODE,           '1',
                     c_contdate,            '0',
                     'N',                   'N',                   c_contdate,              '1',
                     '29991231',            '',                    '',                      '',                   '',
                     0,                     NVL(VATTAG, 'N'),      NVL(EXCLUSIVEAREA, 0),   NVL(COMMONAREA, 0),   NVL(ETCCOMMONAREA, 0),
                     NVL(PARKINGAREA, 0),   NVL(SERVICEAREA, 0),   NVL(SITEAREA, 0),        v_msdt,               v_medt,
                     0,                     '',                    '',                      0,                    0,
                     0,                     0,                     0,                       0,                    0,
                     0,                     0,                     0,
                     0,                     0,                     0,                       c_cust_code,          v_cnm,
                     '',                    '',                    '',                      '',                   '',
                     '',                    0,
                     c_user,                v_sysdt ,              '',                      '',
                     'N',                   '',                    '',                      'N',                  0,
                     'N',                   0,                     v_dmt,                   FLOOR,                '00',
                     '00',                  '',                    0,                       0,
                     CASE WHEN c_receiptamt = 0 OR c_contdate <= c_receiptdate THEN c_contdate ELSE c_receiptdate END,
                     0,                     'N',                   'N',                     'N',                  v_viryn,
                     v_vdeposit,            TO_CHAR(TO_DATE(c_contdate, 'YYYYMMDD') + 60, 'YYYYMMDD'), 'N',       NULL
                FROM HD_HOUS_SUPPLY
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND BUILDNO   = c_buildno
                 AND HOUSENO   = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_SELL 09 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_SELLDETAIL
                   ( CUST_CODE,     SEQ,             COUNTS,      DEPT_CODE,
                     HOUSETAG,      BUILDNO,         HOUSENO,     AGREEDATE,
                     LANDAMT,       BUILDAMT,        VATAMT,      MANAGEAMT, BUNAMT,
                     DC_YN,         AC_YN,           PERPECTTAG,
                     RECEIPTAMT,    DISTRIBUTE_RATE, SLIPDT,      SLIPSEQ,
                     INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID, CHG_DATE )
              SELECT c_cust_code,   v_cseq,          COUNTS,      DEPT_CODE,
                     HOUSETAG,      BUILDNO,         HOUSENO,     CASE WHEN COUNTS = '00' THEN c_contdate ELSE AGREEDATE END,
                     LANDAMT,       BUILDAMT,        VATAMT,      MANAGEAMT, AGREEAMT,
                     DC_YN,         AC_YN,           'N',
                     0,             DISTRIBUTE_RATE, '',          NULL,
                     c_user,        v_sysdt,         '',          ''
                FROM HD_REFER_SELLDETAIL
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND BUILDNO   = c_buildno
                 AND HOUSENO   = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_SELLDETAIL 10 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;
      
      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SELLDETAIL
            SET RECEIPTAMT = c_receiptamt,
                PERPECTTAG = CASE WHEN BUNAMT <= c_receiptamt THEN 'Y' ELSE 'N' END
          WHERE CUST_CODE  = c_cust_code
            AND SEQ        = v_cseq
            AND COUNTS     = v_c_cnt;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELLDETAIL 10 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_RATE_DISCOUNT
                    (CUST_CODE,     SEQ,        STARTDATE,   ENDDATE,
                     DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
              SELECT c_cust_code,   v_cseq,     STARTDATE,   ENDDATE,
                     DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                     c_user,        v_sysdt,         '',          ''
                FROM HD_REFER_RATE_DISCOUNT
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND RATE_TAG  = '1';
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_RATE_DISCOUNT 11 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_RATE_DELAY
                    (CUST_CODE,     SEQ,        START_DAYS,  END_DAYS,
                     STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                     DELAYUNIT,     START_TAG,  END_TAG,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
              SELECT c_cust_code,   v_cseq,     START_DAYS,  END_DAYS,
                     STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                     DELAYUNIT,     START_TAG,  END_TAG,
                     c_user,        v_sysdt,         '',          ''
                FROM HD_REFER_RATE_DELAY
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND RATETAG   = '1';
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_RATE_DELAY 12 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
/*
      BEGIN
         INSERT INTO HD_REFER_GIFT
                   ( DEPT_CODE,     HOUSETAG,     CUST_CODE,   SEQ,
                     GIFTCODE,      GIFTGIVEDATE,
                     INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE )
*/

      /*---------------------------------------------------------------------*/
/*
      BEGIN
         INSERT INTO HD_HOUS_REMARK
                   ( CUST_CODE,     SEQ,        REMARKSEQ,    REAMRKDATE,
                     REMARK,        USERID,     CONFIRM_DATE, END_YN,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE )
*/
         
      /*---------------------------------------------------------------------*/
      IF c_receiptamt > 0 THEN
         BEGIN
            v_iseq := 0;
            SELECT NVL(MAX(INSEQ), 0) + 1
              INTO v_iseq
              FROM HD_HOUS_DAY_INCOME
             WHERE DEPT_CODE = as_dept
               AND HOUSETAG  = as_htag
               AND INDT      = c_receiptdate;

            /*---------------------------------------------------------------*/
            BEGIN
               INSERT INTO HD_HOUS_DAY_INCOME
                         ( DEPT_CODE,     HOUSETAG,   INDT,          INSEQ,
                           BUILDNO,       HOUSENO,    CUST_CODE,     SEQ,
                           CUST_NAME,     DEPOSIT_NO, INAMT,         INGUBUN,
                           INTYPE,        IHE_YN,     CDNO,          MOD_YN,
                           MOD_RAMT,      MOD_DAMT,
                           INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,   CHG_DATE,
                           VDEPOSIT_NO,   OUT_DT,     OUT_TM,        OUT_SEQ,
                           OUT_BANK,      REMARK )
                   VALUES (as_dept,       as_htag,    c_receiptdate, v_iseq,
                           c_buildno,     c_houseno,  c_cust_code,   v_cseq,
                           v_cnm,         v_deposit,  c_receiptamt,  '1',
                           '1',           'Y',        '',            'N',
                           0,             0,
                           c_user,        v_sysdt,    '',            '',
                           '',            '',         '',            0,
                           '',            '' );
               EXCEPTION
                  WHEN OTHERS THEN
                       dbms_output.put_line(sqlerrm); 
                       RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME 15 ' || sqlerrm);
                       ROLLBACK;
                       RETURN;
            END;

            /*---------------------------------------------------------------*/
            IF c_receiptamt = v_c_amt THEN
               BEGIN
                  v_rc_amt  := v_c_amt;
                  v_rc_lamt := v_c_lamt;
                  v_rc_bamt := v_c_bamt;
                  v_rc_vamt := v_c_vamt;
                  v_rc_mamt := v_c_mamt;
                  v_lc_amt  := v_c_amt;
                  v_lc_lamt := v_c_lamt;
                  v_lc_bamt := v_c_bamt;
                  v_lc_vamt := v_c_vamt;
                  v_lc_mamt := v_c_mamt;
               END;
            ELSE
               BEGIN
                  v_rc_amt := c_receiptamt;

                  v_rc_mamt := TRUNC((v_rc_amt * (v_c_mamt / v_c_amt)) / 10) * 10;
                  v_rc_bamt := TRUNC(((v_rc_amt - v_rc_mamt) * (v_c_bamt / (v_c_amt - v_c_mamt))) / 10) * 10;
                  IF v_c_vamt <> 0 THEN
                     v_rc_vamt := v_rc_bamt / 10;
                  ELSE
                     v_rc_vamt := 0;
                  END IF;
                  v_rc_lamt := v_rc_amt - v_rc_mamt - v_rc_bamt - v_rc_vamt;
                            
                  v_lc_amt  := v_rc_amt;
                  v_lc_lamt := v_rc_lamt;
                  v_lc_bamt := v_rc_bamt;
                  v_lc_vamt := v_rc_vamt;
                  v_lc_mamt := v_rc_mamt;
               END;
            END IF;

            BEGIN
               INSERT INTO HD_HOUS_INCOME
                         ( CUST_CODE,       SEQ,           COUNTS,           TIMES,
                           DEPT_CODE,       HOUSETAG,      BUILDNO,          HOUSENO,
                           DEPOSIT_NO,      RECEIPTDATE,   RECEIPTAMT,       RECEIPTLANDAMT,
                           RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT, DELAYDAYS,       DELAYAMT,
                           DISCNTDAYS,      DISCNTAMT,     REALINCOMAMT,     REALLANDAMT,
                           REALBUILDAMT,    REALVATAMT,    REALMANAGEAMT,    BANK_CODE,       BANK_NAME,
                           PAYTAG,          INCOMTYPE,     MOD_YN,           REAL_PAY_TAG,
                           SLIPDT,          SLIPSEQ,       TAXDATE,          TAXSEQ,
                           INSEQ,
                           INPUT_DUTY_ID,   INPUT_DATE,    CHG_DUTY_ID,      CHG_DATE,
                           SLIPTYPE,        VDEPOSIT_NO,   DETAILMOD_YN,     OUT_DT,
                           OUT_TM,          OUT_SEQ,       OUT_BANK,         REMARK )
                   VALUES (c_cust_code,     v_cseq,        v_c_cnt,          1,
                           as_dept,         as_htag,       c_buildno,        c_houseno,
                           v_deposit,       c_receiptdate, v_rc_amt,         v_rc_lamt,
                           v_rc_bamt,       v_rc_vamt,     v_rc_mamt,        0,               0,
                           0,               0,             v_lc_amt,         v_lc_lamt,
                           v_lc_bamt,       v_lc_vamt,     v_lc_mamt,        v_bank,          v_banknm,
                           '1',             '1',           'N',              'Y',
                           '',              NULL,          '',               NULL,
                           v_iseq,
                           c_user,          v_sysdt,       '',               '',
                           NULL,            '',            'N',              '',
                           '',              0,             '',               '' );
               EXCEPTION
                  WHEN OTHERS THEN
                       dbms_output.put_line(sqlerrm); 
                       RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_INCOME 16 ' || sqlerrm);
                       ROLLBACK;
                       RETURN;
            END;
         END;
      END IF;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SUPPLY
            SET CONTRACTYESNO = 'Y',
                VIRDEPOSIT    = '',
                BANK_CODE    = '',
                BANK_NAME    = '',
                CHG_DUTY_ID   = c_user,
                CHG_DATE      = v_sysdt
          WHERE DEPT_CODE     = as_dept
            AND HOUSETAG      = as_htag
            AND BUILDNO       = c_buildno
            AND HOUSENO       = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUPPLY 17 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SELL_TXTUP
            SET CONT_YN = 'Y'
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND SEQ       = TO_NUMBER(as_seq)
            AND SN        = c_sn;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL_TXTUP 18 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_SUBSCRIBE_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_SUBSCRIBE_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --올린사람
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt       VARCHAR2(14);
v_seq         NUMBER(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   BEGIN
      UPDATE HD_HOUS_SUBSCRIBE_TXTUP
         SET SUB_YN = 'N',
             ERR_MESSAGE = '청약일자가 잘못되었습니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SUB_YN    = 'C'
         AND LENGTH(NVL(SUBSCRIBE_DATE, 'X')) <> 8;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUBSCRIBE_TXTUP 01 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   SELECT NVL(MAX(SEQ), 0)
     INTO v_seq
     FROM HD_HOUS_SUBSCRIBE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;

   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_SUBSCRIBE
                ( DEPT_CODE,      HOUSETAG,              SEQ,
                  CUST_CODE,      CUST_SEQ,              CUST_NAME,
                  SUBSCRIBE_TAG,  SUBSCRIBE_DATE,        SUBSCRIBE_AMT,
                  WIN_DATE,       BUILDNO,               HOUSENO,
                  RETURN_TAG,     RETURN_DATE,           RETURN_AMT,
                  VIR_YN,         VDEPOSIT_NO,           INCOM_YN,
                  CONT_NO,        REGIST_YN,
                  INPUT_DUTY_ID,  INPUT_DATE,            CHG_DUTY_ID,
                  CHG_DATE,       ERR_TEXT,              ACT_YN )
           SELECT DEPT_CODE,      HOUSETAG,              v_seq + ROWNUM,
                  CUST_CODE,      0,                     CUST_NAME,
                  '0',            SUBSCRIBE_DATE,        NVL(SUBSCRIBE_AMT, 0),
                  '',             '',                    '',
                  'N',            '',                    0,
                  'N',            '',                    'Y',
                  '',             'N',
                  as_user,        v_sysdt,               '',
                  '',             '',                    'N'
             FROM HD_HOUS_SUBSCRIBE_TXTUP
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag
              AND SUB_YN    = 'C';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_SUBSCRIBE 02 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SUBSCRIBE_TXTUP
         SET SUB_YN = 'Y'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND SUB_YN    = 'C';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUBSCRIBE_TXTUP 03 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_HOUS_LEND_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_HOUS_LEND_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --올린사원
)
IS

/*---------------------------------------------------------------------------*/
c_cust       VARCHAR2(20);
c_seq        NUMBER(5);
c_upseq      NUMBER(5);
c_bank       VARCHAR2(8);
c_agreedate  VARCHAR2(8);
c_agreeamt   NUMBER(15);

/*---------------------------------------------------------------------------*/
v_cnt         NUMBER(10);
v_sysdt       VARCHAR2(14);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT B.CUST_CODE,
       B.SEQ,
       A.SEQ,
       A.BANK_CODE,
       A.AGREEDATE,
       A.AGREEAMT
  FROM HD_HOUS_LEND_TXTUP A,
       HD_HOUS_SELL B
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.LEND_YN   = 'C'
   AND A.DEPT_CODE = B.DEPT_CODE
   AND A.HOUSETAG  = B.HOUSETAG
   AND A.BUILDNO   = B.BUILDNO
   AND A.HOUSENO   = B.HOUSENO
   AND B.CHANGETAG = '1'
   AND B.LOAN_TAG  = 'Y';

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   BEGIN
      UPDATE HD_HOUS_LEND_TXTUP
         SET LEND_YN = 'N',
             ERR_MESSAGE = '계약되지 않은세대이거나 대출관리를 하지않는 세대입니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND LEND_YN   = 'C'
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL B
                          WHERE B.DEPT_CODE = HD_HOUS_LEND_TXTUP.DEPT_CODE
                            AND B.HOUSETAG  = HD_HOUS_LEND_TXTUP.HOUSETAG
                            AND B.BUILDNO   = HD_HOUS_LEND_TXTUP.BUILDNO
                            AND B.HOUSENO   = HD_HOUS_LEND_TXTUP.HOUSENO
                            AND B.CHANGETAG = '1'
                            AND B.LOAN_TAG  = 'Y');
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_LEND_TXTUP 01 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_LEND_TXTUP
         SET LEND_YN = 'N',
             ERR_MESSAGE = '등록되어있지않은 은행코드입니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND LEND_YN   = 'C'
         AND NOT EXISTS (SELECT 1
                           FROM TM_CODE_BANK B
                          WHERE B.BANK_CODE = HD_HOUS_LEND_TXTUP.BANK_CODE);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_LEND_TXTUP 02 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_LEND_TXTUP
         SET LEND_YN = 'N',
             ERR_MESSAGE = '잘못된 대출일자입니다'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND LEND_YN   = 'C'
         AND LENGTH(NVL(AGREEDATE, ' ')) <> 8;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_LEND_TXTUP 03 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   OPEN CURMAKE(as_dept, as_htag);
   LOOP
      FETCH CURMAKE 
       INTO c_cust, c_seq, c_upseq,
            c_bank, c_agreedate, c_agreeamt;
      EXIT WHEN CURMAKE%NOTFOUND;

      BEGIN
         INSERT INTO HD_HOUS_LEND
                   ( CUST_CODE,     SEQ,               CNT,
                     BANK_CODE,     AGREEDATE,         AGREEAMT,
                     LEND_TAG,      LENDDATE,          PERPECTTAG,       REAL_RECEIPTAMT,
                     STAMP_AMT,     GUARANTEE_AMT,     LEND_INTEREST,    RATE,
                     REAL_DATE,     EXCHANGE_PLANDATE, EXCHANGE_PLANAMT, EXCHANGE_DATE,
                     EXCHANGE_AMT,
                     INPUT_DUTY_ID, INPUT_DATE,        CHG_DUTY_ID,      CHG_DATE )
              SELECT c_cust,        c_seq,             NVL(MAX(CNT), 0) +1,
                     c_bank,        c_agreedate,       c_agreeamt,
                     '',            '',                '',               0,
                     0,             0,                 0,                0,
                     '',            '',                0,                '',
                     0,
                     as_user,       v_sysdt ,          '',               ''
                FROM HD_HOUS_LEND
               WHERE CUST_CODE = c_cust
                 AND SEQ       = c_seq;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_LEND 04 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_LEND_TXTUP
            SET LEND_YN = 'Y'
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND SEQ       = c_upseq;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_LEND_TXTUP 05 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCOME_CALC;

CREATE OR REPLACE PROCEDURE proc_hd_income_calc (
  as_custcode       IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_input_date     IN VARCHAR2,   -- 입금일
  ai_inseq          IN INTEGER     -- 입금순번
) IS

CURSOR DELAY_CUR (V_AGREEDATE VARCHAR2, V_MONTHS INTEGER )IS
  SELECT delayrate,delaycut,delayunit,startdate,enddate
    FROM hd_hous_rate_delay
    WHERE cust_code  = as_custcode
      AND seq        = ai_seq
      AND enddate   >= V_AGREEDATE
      AND startdate  <= as_input_date
      AND ((end_tag = '1' and end_days >= V_MONTHS) or (end_tag = '2' and end_days > V_MONTHS))
      AND ((start_tag = '1' and start_days <= V_MONTHS) or (start_tag = '2' and start_days < V_MONTHS));

CURSOR DISCOUNT_CUR (V_AGREEDATE VARCHAR2 )IS
  SELECT discntrate,discntcut,discntunit,startdate,enddate
    FROM hd_hous_rate_discount
    WHERE cust_code  = as_custcode
      AND seq        = ai_seq
      AND enddate >= as_input_date
      AND startdate <= V_AGREEDATE;
-------------------------------------------------------------
-- 변수선언
-------------------------------------------------------------
-- 공통 변수
   C_DEPT_CODE         VARCHAR2(12);  -- 부서코드
   C_HOUSETAG          VARCHAR2(1);   -- 분양구분
   C_BUILDNO           VARCHAR2(10);   -- 동
   C_HOUSENO           VARCHAR2(10);   -- 호
   C_DELAYBLOCK        VARCHAR2(1);   --연체율적용구간 1:해당구간중최대 2:구간별계산

   C_DEPOSIT_NO        VARCHAR2(30);  -- 계좌번호
   C_VDEPOSIT_NO       VARCHAR2(30);  -- 가상계좌번호
   C_INAMT             NUMBER(30,9);  -- 입금액
   C_INGUBUN           VARCHAR2(2);   -- 입금구분
   C_INTYPE            VARCHAR2(2);   -- 입금형태
   C_MOD_YN            VARCHAR2(1);   -- 조정여부
   C_MOD_RAMT          NUMBER(30,9);  -- 조정연체료
   C_MOD_DAMT          NUMBER(30,9);  -- 조정할인료
   C_INPUT_DUTY_ID     VARCHAR2(12);  -- 입력담당
   C_OUT_DT            VARCHAR2(8);   -- 외부입력일자
   C_OUT_TM            VARCHAR2(6);   -- 외부입력시간
   C_OUT_SEQ           FLOAT;         -- 외부입력순번
   C_OUT_BANK          VARCHAR2(6);   -- 외부입력은행
   C_REMARK            VARCHAR2(200); -- 비고
   
   C_BANK_CODE         VARCHAR2(8);   -- 은행코드
   C_BANK_NAME         VARCHAR2(30);  -- 은행명칭
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_INSEQ             NUMBER;   -- 입금순번
   C_LAST_COUNTS       VARCHAR2(2);  -- 미납입된 마지막약정차수
   C_MAX_COUNTS        VARCHAR2(2);  -- 마지막약정차수
   C_LAST_TIMES        INTEGER;  -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_BUNAMT            NUMBER(30,9);   -- 약정분양금액
   C_LANDAMT           NUMBER(30,9);   -- 약정토지가
   C_BUILDAMT          NUMBER(30,9);   -- 약정건물가
   C_VATAMT            NUMBER(30,9);   -- 약정부가세
   C_MANAGEAMT         NUMBER(30,9);   -- 약정관리비
   C_C_LANDAMT         NUMBER(30,9);   -- 납입인정토지가
   C_C_BUILDAMT        NUMBER(30,9);   -- 납입인정건물가
   C_C_VATAMT          NUMBER(30,9);   -- 납입인정부가세
   C_C_MANAGEAMT       NUMBER(30,9);   -- 납입인정관리비
   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_R_LANDAMT         NUMBER(30,9);   -- 실납입토지가
   C_R_BUILDAMT        NUMBER(30,9);   -- 실납입건물가
   C_R_VATAMT          NUMBER(30,9);   -- 실납입부가세
   C_R_MANAGEAMT       NUMBER(30,9);   -- 실납입관리비
   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_RECEIPTLANDAMT    NUMBER(30,9);   -- 납입토지가
   C_RECEIPTBUILDAMT   NUMBER(30,9);   -- 납입건물가
   C_RECEIPTVATAMT     NUMBER(30,9);   -- 납입부가세
   C_RECEIPTMANAGEAMT  NUMBER(30,9);   -- 납입관리비
   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 약정계산금액
--   C_TEMP_RATE         NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   -- 
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_MOVEINSTARTDATE   VARCHAR2(8);
   C_MOVEINENDDATE     VARCHAR2(8);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분
   C_TEMP__AMT         NUMBER(30,9);

   C_TEMPDT            VARCHAR2(8);
   C_BLOCKDT           VARCHAR2(8);

   v_modapply          VARCHAR(1);
   v_contdt            VARCHAR(8);
   v_indt              VARCHAR(8);
   v_incontdt          VARCHAR(8);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr         EXCEPTION;                  -- Select Data Not Found

BEGIN
   BEGIN
      -----------------------------------------------------
      -- 사업코드, 분양구분, 동호를 구한다.
      select dept_code, housetag, buildno, houseno, moveinstartdate, moveinenddate, daymonth_tag, contractdate
        into C_DEPT_CODE,C_HOUSETAG,C_BUILDNO,C_HOUSENO,C_MOVEINSTARTDATE,C_MOVEINENDDATE, C_DAYMONTH, v_contdt
        from hd_hous_sell
        where cust_code = as_custcode
          and seq = ai_seq;

      select deposit_no, vdeposit_no, inamt, ingubun, intype, mod_yn, mod_ramt, mod_damt, input_duty_id, OUT_DT,
             OUT_TM, OUT_SEQ, OUT_BANK, REMARK
        into C_DEPOSIT_NO, C_VDEPOSIT_NO, C_INAMT, C_INGUBUN, C_INTYPE, C_MOD_YN, C_MOD_RAMT, C_MOD_DAMT, C_INPUT_DUTY_ID,
             C_OUT_DT, C_OUT_TM, C_OUT_SEQ, C_OUT_BANK, C_REMARK
        from hd_hous_day_income
        where dept_code = C_DEPT_CODE
          and housetag = C_HOUSETAG
          and indt = as_input_date
          and inseq = ai_inseq;

      SELECT NVL(DELAY_BLOCK, '1')
        INTO C_DELAYBLOCK
        FROM HD_CODE_HOUSE
       WHERE DEPT_CODE = C_DEPT_CODE
         AND HOUSETAG  = C_HOUSETAG;

      v_modapply := C_MOD_YN;

--    입금예정금액 = 납입금액 - 조정연체료 + 조정할인료
      c_input_amt := C_INAMT - C_MOD_RAMT + C_MOD_DAMT;

      -----------------------------------------------------
      -- 은행코드,은행명칭을 구한다.
      select bank_code,bank_name
        into C_BANK_CODE,C_BANK_NAME
        from hd_code_deposit
        where dept_code  = C_DEPT_CODE
          and housetag   = C_HOUSETAG
          and deposit_no = C_DEPOSIT_NO;

      -----------------------------------------------------
      -- 마지막 약정차수
      select NVL(max(counts), '90')
        into C_MAX_COUNTS
        from HD_HOUS_SELLDETAIL
        where cust_code = as_custcode
          and seq = ai_seq;

      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      select COUNT(*) into C_CNT
        from hd_hous_selldetail
        where cust_code = as_custcode
          and seq = ai_seq
          and perpecttag = 'N';

      IF C_CNT > 0 THEN
         select min(counts) into C_LAST_COUNTS
           from hd_hous_selldetail
           where cust_code = as_custcode
             and seq = ai_seq
             and perpecttag = 'N';

         select NVL(MAX(times),0) into C_LAST_TIMES
           from hd_hous_income
           where cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         C_LAST_TIMES := C_LAST_TIMES + 1;
      ELSE
         select count(*) into C_CNT
           from hd_hous_selldetail
           where cust_code = as_custcode
             and seq = ai_seq ;
         IF C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다. 동호==>' || C_BUILDNO || '-' || C_HOUSENO;
            GOTO EXIT_ROUTINE;
         END IF;
  
         select max(counts) into C_LAST_COUNTS
           from hd_hous_selldetail
           where cust_code = as_custcode
             and seq = ai_seq;

         select NVL(MAX(times),0) into C_LAST_TIMES
           from hd_hous_income
           where cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;

         SELECT NVL(BUNAMT, 0)
           INTO C_BUNAMT
           FROM HD_HOUS_SELLDETAIL
          WHERE CUST_CODE = as_custcode
            AND SEQ       = ai_seq
            AND COUNTS    = C_LAST_COUNTS;

         SELECT NVL(SUM(RECEIPTAMT), 0)
           INTO C_RECEIPTAMT
           FROM HD_HOUS_INCOME
          WHERE CUST_CODE = as_custcode
            AND SEQ       = ai_seq
            AND COUNTS    = C_LAST_COUNTS;

         IF C_BUNAMT > C_RECEIPTAMT + C_INAMT THEN
            C_LAST_TIMES := C_LAST_TIMES + 1;
         ELSE
             if C_LAST_TIMES < 90 THEN
                C_LAST_TIMES := 90;
             else
                C_LAST_TIMES := C_LAST_TIMES + 1;
             end if;
         END IF;
      END IF;

      -- LOOP 시작
      LOOP
         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
          select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0),
                 nvl(bunamt,0),nvl(landamt,0),nvl(buildamt,0),nvl(vatamt,0),nvl(manageamt,0),
                 agreedate,dc_yn,ac_yn
            into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT,
                 C_AGREEDATE,C_DC_YN,C_AC_YN
            from hd_hous_selldetail
           where cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;

         IF C_DAYS > 0 THEN -- 연체료일 경우
            -- 잔금일경우 입주기간만큼 일수제외
            IF C_LAST_COUNTS = '90' THEN
               IF nvl(C_MOVEINENDDATE, 'X') <> 'X' and C_AGREEDATE < C_MOVEINENDDATE THEN
                  C_TEMP_DAYS := nvl((to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_MOVEINENDDATE, 'YYYYMMDD')) * -1,0);
                  IF C_DAYS <= C_TEMP_DAYS THEN
                     C_DAYS := 0;
                  ELSE 
                     C_AGREEDATE := C_MOVEINENDDATE;
                     C_DAYS := nvl((to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0);
                  END IF;
               END IF;
            END IF;

            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'Y');
            IF C_TEMPDT >= as_input_date THEN
               C_DAYS := 0;
            END IF;
         END IF;

         if C_DAYS < 0 THEN -- 할인료일 경우
            if C_LAST_COUNTS = '90' and
               nvl(C_MOVEINSTARTDATE, 'X') <> 'X' and nvl(C_MOVEINENDDATE, 'X') <> 'X' and
               as_input_date >= C_MOVEINSTARTDATE and as_input_date <= C_MOVEINENDDATE then begin
               C_CNT := 0;
               C_DAYS := 0;
            end; else begin
               select count(*),nvl(max(gong_days),0) into C_CNT,C_TEMP_CNT
                 from hd_refer_holiday
                 where dept_code = C_DEPT_CODE
                   and housetag = C_HOUSETAG
                   and ad_tag = '2'
                   and rate_tag = '1'
                   and holiday = C_AGREEDATE;
               if C_CNT > 0 then
                  C_CNT := C_DAYS * -1;
                  if C_CNT <= C_TEMP_CNT then
                     C_DAYS := 0;
                  end if;
               end if;
            end; end if;   
         end if;

         -- 기납입금액누계를 구한다.
         select nvl(sum(receiptamt),0),nvl(sum(receiptlandamt),0),nvl(sum(receiptbuildamt),0),nvl(sum(receiptvatamt),0),nvl(sum(receiptmanageamt),0)
           into C_RECEIPTAMT,C_RECEIPTLANDAMT,C_RECEIPTBUILDAMT,C_RECEIPTVATAMT,C_RECEIPTMANAGEAMT
           from hd_hous_income
           where cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_BUNAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         IF C_LAST_TIMES > 89 THEN
            C_TEMP_AMT := c_input_amt;
            c_input_amt := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF C_MOD_YN = 'Y' THEN BEGIN
               ---------------------------------------------------------------------
               -- 입금수정인경우 최초 한번만 할인및 연체료 강제 적용
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN
                  C_DELAY_DAY    := C_DAYS;
                  C_DISCOUNT_DAY := 0;
               ELSE
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := C_DAYS * -1;
               END IF;

               IF C_WORK_AMT < c_input_amt THEN
                  C_TEMP_AMT  := C_WORK_AMT;
                  c_input_amt := c_input_amt - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT  := c_input_amt;
                  c_input_amt := 0;
               END IF;

               IF v_modapply = 'Y' THEN BEGIN
                  C_DELAY_AMT    := C_MOD_RAMT;
                  C_DISCOUNT_AMT := C_MOD_DAMT;
               END; ELSE BEGIN
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
               END; END IF;
               v_modapply := 'N';
            END; ELSIF (C_DAYS = 0) THEN BEGIN
               ---------------------------------------------------------------------
               -- 정상일 경우
               ---------------------------------------------------------------------
               IF C_WORK_AMT < c_input_amt THEN
                  C_TEMP_AMT   := C_WORK_AMT;
                  c_input_amt := c_input_amt - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT   := c_input_amt;
                  c_input_amt := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            END; ELSE
               ---------------------------------------------------------------------
               -- 연체료 계산 시작
               ---------------------------------------------------------------------
               -- 지체보상금은 전액 할인으로 실입금액은 0
--               IF C_INGUBUN IN ('5', 'C') AND C_LAST_COUNTS = '90' THEN BEGIN
               IF C_INGUBUN IN ('C') AND C_LAST_COUNTS = '90' THEN BEGIN

                  IF C_DAYS > 0 THEN
                     C_DELAY_DAY    := C_DAYS;
                     C_DISCOUNT_DAY := 0;
                  ELSE
                     C_DELAY_DAY    := 0;
                     C_DISCOUNT_DAY := C_DAYS * -1;
                  END IF;

                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := c_input_amt;
                  C_TEMP_AMT     := c_input_amt;
                  c_input_amt    := 0;

--               if C_DAYS > 0 THEN 
                END; ELSIF C_DAYS > 0 THEN 
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  C_DELAY_DAY   := C_DAYS;

                  IF C_AC_YN = 'Y' THEN
                     -- 납입대상금액계산
                     C_TEMP_RATE := 0;
                     IF (C_LAST_COUNTS = '90' AND C_MOVEINENDDATE IS NOT NULL AND C_AGREEDATE < C_MOVEINENDDATE) THEN
                        C_MONTHS := CASE WHEN C_DAYMONTH = '2'
                                         THEN months_between(to_date(as_input_date, 'YYYYMMDD'),to_date(C_MOVEINENDDATE, 'YYYYMMDD'))
                                         ELSE to_date(as_input_date, 'YYYYMMDD') - to_date(C_MOVEINENDDATE, 'YYYYMMDD')
                                    END;
                        C_BLOCKDT := C_MOVEINENDDATE;
                     ELSE
                        C_MONTHS := CASE WHEN C_DAYMONTH = '2'
                                         THEN months_between(to_date(as_input_date, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'))
                                         ELSE to_date(as_input_date, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD')
                                    END;
                        C_BLOCKDT := C_AGREEDATE;
                     END IF;                    

                     /* ----------------------------------------- */
                     /* ----------------------------------------- */
                     IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                        OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DELAY_CUR%NOTFOUND;
                           IF C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE THEN
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSIF as_input_date <= C_ENDDATE THEN
                              C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                           C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                        END LOOP;
                        CLOSE DELAY_CUR;
                     ELSE --구간별 연체율 계산방식

IF C_DAYMONTH != '1' THEN
   RAISE_APPLICATION_ERROR(-20002, '구간별 연체료 계산현장의 연체료는 월계산 방법을 지원하지 않습니다');
   ROLLBACK;
   RETURN;
END IF;
-->>>>                        C_TEMP_RATE := F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(c_input_amt)), 'RATE');
                              C_TEMP_RATE := F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(c_input_amt)), 'RATE');
/*
                        SELECT NVL(SUM(RT), 0)
                          INTO C_TEMP_RATE
                          FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) AS RT,
                                       DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                  FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                               NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                               CASE WHEN A.TOT < B.START_DAYS
                                                    THEN 0
                                                    ELSE CASE WHEN A.TOT > B.END_DAYS
                                                              THEN B.END_DAYS - B.START_DAYS + 1
                                                              ELSE A.DY - B.START_DAYS + 1
                                                         END
                                               END DDY
                                          FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                       DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                               MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                       CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                            THEN 0
                                                            ELSE 1
                                                       END AS DY
                                                  FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                               STARTDATE, ENDDATE, ADT, IDT, TOT
                                                          FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                  FROM HD_HOUS_RATE_DELAY A,
                                                                       (SELECT C_BLOCKDT AS ADT,
                                                                               as_input_date AS IDT,
                                                                               DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                       MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                          FROM DUAL
                                                                       ) B
                                                                 WHERE A.CUST_CODE = as_custcode
                                                                   AND A.SEQ       = ai_seq
                                                                   AND A.ENDDATE   >= B.ADT
                                                                   AND A.STARTDATE <= B.IDT
                                                               )
                                                       )
                                               ) A,
                                               HD_HOUS_RATE_DELAY B
                                         WHERE B.CUST_CODE = as_custcode
                                           AND B.SEQ       = ai_seq
                                           AND B.STARTDATE = A.STARTDATE
                                           AND B.ENDDATE   = A.ENDDATE
                                       )
                                 WHERE DDY > 0
                               );
*/
                     END IF;

                     /* ----------------------------------------- */
                     /* ----------------------------------------- */
                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     if C_TEMP_RATE <> 0 then
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     else
                        C_TEMP_AMT := 0;
                     end if;

                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                           OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                           LOOP
                              FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                              EXIT WHEN DELAY_CUR%NOTFOUND;

                              C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DELAYUNIT, '0')), 1);

                              IF C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE THEN
                                 C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                                 IF C_DELAYCUT = '1' THEN
                                    C_DELAY_AMT := trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 ELSIF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := round(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                                 EXIT;
                              END IF;
                              IF C_AGREEDATE >= C_STARTDATE THEN
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                              ELSIF as_input_date <= C_ENDDATE THEN
                                 C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                              C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSIF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + round(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END LOOP;
                           CLOSE DELAY_CUR;
                        ELSE --구간별 연체율 계산방식
-->>>>                           C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_WORK_AMT)));
                              C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_WORK_AMT)));
/*
                           SELECT NVL(SUM(CASE DELAYCUT WHEN '1' THEN TRUNC(AMT / DUNIT)
                                                        WHEN '2' THEN TRUNC((AMT / DUNIT) + 0.9)
                                                                 ELSE ROUND(AMT / DUNIT)
                                          END * DUNIT), 0)
                             INTO C_DELAY_AMT
                             FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) * C_WORK_AMT AS AMT,
                                          DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                     FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                                  NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                                  CASE WHEN A.TOT < B.START_DAYS
                                                       THEN 0
                                                       ELSE CASE WHEN A.TOT > B.END_DAYS
                                                                 THEN B.END_DAYS - B.START_DAYS + 1
                                                                 ELSE A.DY - B.START_DAYS + 1
                                                            END
                                                  END DDY
                                             FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                          DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                                  MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                          CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                               THEN 0
                                                               ELSE 1
                                                          END AS DY
                                                     FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                                  STARTDATE, ENDDATE, ADT, IDT, TOT
                                                             FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                     FROM HD_HOUS_RATE_DELAY A,
                                                                          (SELECT C_BLOCKDT AS ADT,
                                                                                  as_input_date AS IDT,
                                                                                  DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                          MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                             FROM DUAL
                                                                          ) B
                                                                    WHERE A.CUST_CODE = as_custcode
                                                                      AND A.SEQ       = ai_seq
                                                                      AND A.ENDDATE   >= B.ADT
                                                                      AND A.STARTDATE <= B.IDT
                                                                  )
                                                          )
                                                  ) A,
                                                  HD_HOUS_RATE_DELAY B
                                            WHERE B.CUST_CODE = as_custcode
                                              AND B.SEQ       = ai_seq
                                              AND B.STARTDATE = A.STARTDATE
                                              AND B.ENDDATE   = A.ENDDATE
                                          )
                                    WHERE DDY > 0
                                  );
*/
                        END IF;
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                     ELSE
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                           OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                           LOOP
                              FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                              EXIT WHEN DELAY_CUR%NOTFOUND;

                              C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DELAYUNIT, '0')), 1);
                              IF C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE THEN
                                 C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                                 IF C_DELAYCUT = '1' THEN
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 ELSIF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                                 EXIT;
                              END IF;
                              IF C_AGREEDATE >= C_STARTDATE THEN
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                              ELSIF as_input_date <= C_ENDDATE THEN
                                 C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                              C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSIF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END LOOP;
                           CLOSE DELAY_CUR;
                        ELSE --구간별 연체율 계산방식
-->>>>                           C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_TEMP_AMT)));
                              C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_TEMP_AMT)));
/*
                           SELECT NVL(SUM(CASE DELAYCUT WHEN '1' THEN TRUNC(AMT / DUNIT)
                                                        WHEN '2' THEN TRUNC((AMT / DUNIT) + 0.9)
                                                                 ELSE ROUND(AMT / DUNIT)
                                          END * DUNIT), 0)
                             INTO C_DELAY_AMT
                             FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) * C_TEMP_AMT AS AMT,
                                          DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                     FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                                  NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                                  CASE WHEN A.TOT < B.START_DAYS
                                                       THEN 0
                                                       ELSE CASE WHEN A.TOT > B.END_DAYS
                                                                 THEN B.END_DAYS - B.START_DAYS + 1
                                                                 ELSE A.DY - B.START_DAYS + 1
                                                            END
                                                  END DDY
                                             FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                          DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                                  MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                          CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                               THEN 0
                                                               ELSE 1
                                                          END AS DY
                                                     FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                                  STARTDATE, ENDDATE, ADT, IDT, TOT
                                                             FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                     FROM HD_HOUS_RATE_DELAY A,
                                                                          (SELECT C_BLOCKDT AS ADT,
                                                                                  as_input_date AS IDT,
                                                                                  DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                          MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                             FROM DUAL
                                                                          ) B
                                                                    WHERE A.CUST_CODE = as_custcode
                                                                      AND A.SEQ       = ai_seq
                                                                      AND A.ENDDATE   >= B.ADT
                                                                      AND A.STARTDATE <= B.IDT
                                                                  )
                                                          )
                                                  ) A,
                                                  HD_HOUS_RATE_DELAY B
                                            WHERE B.CUST_CODE = as_custcode
                                              AND B.SEQ       = ai_seq
                                              AND B.STARTDATE = A.STARTDATE
                                              AND B.ENDDATE   = A.ENDDATE
                                          )
                                    WHERE DDY > 0
                                  );
*/
                        END IF;
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        C_TEMP_AMT   := c_input_amt - C_DELAY_AMT;
                        c_input_amt := 0;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < c_input_amt THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        c_input_amt := c_input_amt - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := c_input_amt;
                        c_input_amt := 0;
                     END IF;
                  END IF;
               ---------------------------------------------------------------------
               -- 연체료 계산 종료
               ---------------------------------------------------------------------                 
               ELSE
               ------------------------------------------------------------
               -- 할인료 계산
               ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  C_DISCOUNT_DAY   := C_DAYS * -1;
                  IF C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DISCOUNT_CUR(C_AGREEDATE);
                     LOOP
                        FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DISCOUNT_CUR%NOTFOUND;
                        IF C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE THEN
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF as_input_date >= C_STARTDATE THEN
                           C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                        ELSIF C_AGREEDATE <= C_ENDDATE THEN
                           C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                        ELSE
                           C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DISCOUNT_CUR;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DISCOUNT_CUR(C_AGREEDATE);
                        LOOP
                           FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DISCOUNT_CUR%NOTFOUND;

                           C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DISCNTUNIT, '0')), 1);

                           IF C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE THEN
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSIF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := round((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_input_date >= C_STARTDATE THEN
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                           ELSIF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSIF C_DISCNTCUT = '2' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                           ELSE
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           END IF;
                        END LOOP;
                        CLOSE DISCOUNT_CUR;
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT - C_DISCOUNT_AMT);
                     ELSE
                        OPEN DISCOUNT_CUR(C_AGREEDATE);
                        LOOP
                           FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DISCOUNT_CUR%NOTFOUND;

                           C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DISCNTUNIT, '0')), 1);

                           IF C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE THEN
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSIF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_input_date >= C_STARTDATE THEN
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                           ELSIF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSIF C_DISCNTCUT = '2' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                           ELSE
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           END IF;
                        END LOOP;
                        CLOSE DISCOUNT_CUR;
                        C_TEMP_AMT   := c_input_amt + C_DISCOUNT_AMT;
                        c_input_amt := 0;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < c_input_amt THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        c_input_amt := c_input_amt - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := c_input_amt;
                        c_input_amt := 0;
                     END IF;
                  END IF;
               ---------------------------------------------------------------------
               -- 할인료 계산 종료
               ---------------------------------------------------------------------                                   
               END IF;
            END IF;
         END IF;
         -----------------------------------------------------------------------------
         -- 납입금액을 가지고 토지,건물,부가세를 구한다.
         ----------------------------------------------------------------------------
         IF C_WORK_AMT = C_TEMP_AMT THEN  -- 완납일경우 (약정 - 납입누계)
            C_C_LANDAMT    := C_LANDAMT - C_RECEIPTLANDAMT;
            C_C_BUILDAMT   := C_BUILDAMT - C_RECEIPTBUILDAMT;
            C_C_VATAMT     := C_VATAMT - C_RECEIPTVATAMT;
            C_C_MANAGEAMT  := C_MANAGEAMT - C_RECEIPTMANAGEAMT;
            C_R_RECEIPTAMT := C_TEMP_AMT;   -- 실납입금액
            C_R_LANDAMT    := C_C_LANDAMT;
            C_R_BUILDAMT   := C_C_BUILDAMT;
            C_R_VATAMT     := C_C_VATAMT;
            C_R_MANAGEAMT  := C_C_MANAGEAMT;
         ELSE
            IF C_BUNAMT <> 0 THEN
               C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * C_TEMP_AMT) / 10) * 10;
               C_C_BUILDAMT := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_TEMP_AMT - C_C_MANAGEAMT)) / 10) * 10;
               IF C_VATAMT = 0 THEN
                  C_C_VATAMT := 0;
               ELSE
                  C_C_VATAMT  := C_C_BUILDAMT * 0.1;
               END IF;
               C_C_LANDAMT  := C_TEMP_AMT - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
            ELSE
               C_C_LANDAMT   := 0;
               C_C_BUILDAMT  := 0;
               C_C_VATAMT    := 0;
               C_C_MANAGEAMT := 0;
            END IF;

            C_TEMP__AMT := ((C_RECEIPTMANAGEAMT + C_C_MANAGEAMT) - C_MANAGEAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_MANAGEAMT := C_MANAGEAMT - C_RECEIPTMANAGEAMT;
               C_C_LANDAMT   := C_C_LANDAMT + C_TEMP__AMT;
            END IF;
   
            C_TEMP__AMT := ((C_RECEIPTLANDAMT + C_C_LANDAMT) - C_LANDAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_LANDAMT  := C_LANDAMT - C_RECEIPTLANDAMT;
               C_C_BUILDAMT := C_C_BUILDAMT + C_TEMP__AMT;
            END IF;

            C_TEMP__AMT := ((C_RECEIPTBUILDAMT + C_C_BUILDAMT) - C_BUILDAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_BUILDAMT  := C_BUILDAMT - C_RECEIPTBUILDAMT;
               C_C_VATAMT    := C_C_VATAMT + C_TEMP__AMT;
            END IF;

            C_R_LANDAMT    := C_C_LANDAMT;
            C_R_BUILDAMT   := C_C_BUILDAMT;
            C_R_VATAMT     := C_C_VATAMT;
            C_R_MANAGEAMT  := C_C_MANAGEAMT;

         END IF;

         -- 할인료가 있을 경우만 실납입금액 토, 건, 부 를 별도로 계산한다
         IF C_DISCOUNT_AMT <> 0 THEN
             C_R_RECEIPTAMT := C_TEMP_AMT - C_DISCOUNT_AMT; -- 실납입금액 계산용(연체료를 포함 안한다.)
             IF C_BUNAMT <> 0 THEN
                C_R_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * C_R_RECEIPTAMT) / 10) * 10;
--                C_R_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_R_RECEIPTAMT - C_R_MANAGEAMT)) / 10) * 10;
--                IF C_VATAMT = 0 THEN
--                   C_R_VATAMT   := 0;
--                ELSE
--                   C_R_VATAMT  := C_R_BUILDAMT * 0.1;
--                END IF;
--                C_R_LANDAMT  := C_R_RECEIPTAMT - C_R_MANAGEAMT - C_R_BUILDAMT - C_R_VATAMT;
                IF C_LANDAMT = 0 THEN --토지가가 없으면 계산된 토지가를 건물가에 포함한다
                   C_R_LANDAMT := 0;
                   IF C_VATAMT = 0 THEN
                      C_R_BUILDAMT := C_R_RECEIPTAMT;
                      C_R_VATAMT   := 0;
                   ELSE
                      C_R_BUILDAMT := TRUNC(C_R_RECEIPTAMT / 1.1);
                      C_R_VATAMT   := C_R_RECEIPTAMT - C_R_BUILDAMT;
                   END IF;
                ELSE
                   C_R_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_R_RECEIPTAMT - C_R_MANAGEAMT)) / 10) * 10;
                   IF C_VATAMT = 0 THEN
                      C_R_VATAMT   := 0;
                   ELSE
                      C_R_VATAMT  := C_R_BUILDAMT * 0.1;
                   END IF;
                   C_R_LANDAMT  := C_R_RECEIPTAMT - C_R_MANAGEAMT - C_R_BUILDAMT - C_R_VATAMT;
                END IF;
             ELSE
                C_R_LANDAMT   := 0;
                C_R_BUILDAMT  := 0;
                C_R_VATAMT    := 0;
                C_R_MANAGEAMT := 0;
             END IF;
         END IF;    
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액
         -----------------------------------------------------------------------------
         -- 계산된 값을 분양_세대별수입금에 넣어준다.
         -----------------------------------------------------------------------------

         C_DAYS := TO_DATE(as_input_date, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         -- 과오납금인경우 토건부는 0, 실토건부 0, 납입,실납입금액만 넣는다
         IF C_MAX_COUNTS = C_LAST_COUNTS AND C_LAST_TIMES >= 90 THEN
            C_C_LANDAMT   := 0;
            C_C_BUILDAMT  := 0;
            C_C_VATAMT    := 0;
            C_C_MANAGEAMT := 0;
            C_R_LANDAMT   := 0;
            C_R_BUILDAMT  := 0;
            C_R_VATAMT    := 0;
            C_R_MANAGEAMT := 0;
         END IF;

         INSERT INTO HD_HOUS_INCOME
                   (CUST_CODE, SEQ, COUNTS, TIMES, DEPT_CODE,
                    HOUSETAG,  BUILDNO, HOUSENO, DEPOSIT_NO, RECEIPTDATE,
                    RECEIPTAMT, RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                    DELAYDAYS, DELAYAMT, DISCNTDAYS, DISCNTAMT, REALINCOMAMT,
                    REALLANDAMT, REALBUILDAMT, REALVATAMT, REALMANAGEAMT,
                    BANK_CODE, BANK_NAME,
                    PAYTAG, INCOMTYPE, MOD_YN, REAL_PAY_TAG, SLIPDT,
                    SLIPSEQ, SLIPTYPE, TAXDATE, TAXSEQ, INSEQ, INPUT_DUTY_ID,
                    INPUT_DATE, CHG_DUTY_ID, CHG_DATE,
                    VDEPOSIT_NO, DETAILMOD_YN,
                    OUT_DT, OUT_TM, OUT_SEQ, OUT_BANK, REMARK)
            VALUES ( as_custcode, ai_seq, C_LAST_COUNTS, C_LAST_TIMES, C_DEPT_CODE,
                     C_HOUSETAG, C_BUILDNO, C_HOUSENO, C_DEPOSIT_NO, as_input_date,
                     C_TEMP_AMT, C_C_LANDAMT, C_C_BUILDAMT, C_C_VATAMT, C_C_MANAGEAMT,
                     C_DELAY_DAY, C_DELAY_AMT, C_DISCOUNT_DAY, C_DISCOUNT_AMT, C_R_RECEIPTAMT,
                     C_R_LANDAMT,C_R_BUILDAMT, C_R_VATAMT, C_R_MANAGEAMT,
                     C_BANK_CODE, C_BANK_NAME,
                     C_INGUBUN, C_INTYPE, C_MOD_YN, 'Y', null,
                     null, null, null, null, ai_inseq, C_INPUT_DUTY_ID,
                     TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'),'','',
                     C_VDEPOSIT_NO, 'N', 
                     C_OUT_DT, C_OUT_TM, C_OUT_SEQ, C_OUT_BANK, C_REMARK)  ;

         -- 기납입금액누계를 구한다.
         select nvl(sum(receiptamt),0)
           into C_RECEIPTAMT
           from hd_hous_income
           where cust_code = as_custcode
             and seq       = ai_seq
             and counts    = C_LAST_COUNTS;
         -- 입금완료구분값을 구한다.
         IF C_BUNAMT <= C_RECEIPTAMT THEN
            C_PERPECTTAG := 'Y';
         ELSE
            C_PERPECTTAG := 'N';
         END IF;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         UPDATE HD_HOUS_SELLDETAIL
            SET PERPECTTAG = C_PERPECTTAG,
                RECEIPTAMT = C_RECEIPTAMT
           where cust_code = as_custcode
             and seq       = ai_seq
             and counts    = C_LAST_COUNTS;
         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF c_input_amt = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&
         IF C_LAST_COUNTS >= C_MAX_COUNTS THEN
            C_LAST_COUNTS := C_MAX_COUNTS;
            select NVL(MAX(times),0)
              into C_LAST_TIMES
              from hd_hous_income
              where cust_code = as_custcode
                and seq       = ai_seq
                and counts    = C_LAST_COUNTS;
            select perpecttag
              into C_PERPECTTAG
              from hd_hous_selldetail
              where cust_code = as_custcode
                and seq       = ai_seq
                and counts    = C_LAST_COUNTS;
            IF C_PERPECTTAG = 'Y' and C_LAST_TIMES < 90 THEN
               C_LAST_TIMES := 90;
            ELSE
               C_LAST_TIMES := C_LAST_TIMES + 1;
            END IF;
         ELSE
            select COUNT(*)
              into C_CNT
              from hd_hous_selldetail
              where cust_code = as_custcode
                and seq       = ai_seq
                and counts > C_LAST_COUNTS;
            IF C_CNT > 0 THEN
               select min(counts)
                 into C_LAST_COUNTS
                 from hd_hous_selldetail
                 where cust_code = as_custcode
                   and seq       = ai_seq
                   and counts > C_LAST_COUNTS;
               select NVL(MAX(times),0)
                 into C_LAST_TIMES
                 from hd_hous_income
                 where cust_code = as_custcode
                   and seq       = ai_seq
                   and counts    = C_LAST_COUNTS;
               C_LAST_TIMES := C_LAST_TIMES + 1;
            ELSE
               EXIT;
            END IF;
         END IF;
         C_MOD_YN := 'N';
         C_AC_YN := 'Y';
         C_DC_YN := 'Y';
      END LOOP;
   END;
   
   /* ----- 추가 처리 ----- */
   /*--------------------------------------------------------------------------*/
   SELECT NVL(MIN(RECEIPTDATE), '99999999')
     INTO v_indt
     FROM HD_HOUS_INCOME
    WHERE CUST_CODE = as_custcode
      AND SEQ       = ai_seq;

   IF v_contdt < v_indt THEN
      v_incontdt := v_contdt;
   ELSE
      v_incontdt := v_indt;
   END IF;
   
   BEGIN
      UPDATE HD_HOUS_SELL
         SET INCONT_DATE = v_incontdt
       WHERE CUST_CODE = as_custcode
         AND SEQ       = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL ER_A: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;
   
   /*--------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_DAY_INCOME
         SET IHE_YN      = 'Y',
             CHG_DUTY_ID = C_INPUT_DUTY_ID,
             CHG_DATE    = TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
       WHERE DEPT_CODE   = C_DEPT_CODE
         AND HOUSETAG    = C_HOUSETAG
         AND INDT        = as_input_date
         AND INSEQ       = ai_inseq;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_DAY_INCOME ER_B: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*--------------------------------------------------------------------------*/
   IF C_INTYPE = '6' THEN BEGIN /* INTYPE:6 국민주택기금처리 */
      BEGIN
         UPDATE HD_HOUS_COMPAMT
            SET ICHE_YN     = 'Y',
                CHG_DUTY_ID = C_INPUT_DUTY_ID,
                CHG_DATE    = TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
          WHERE CUST_CODE   = as_custcode
            AND SEQ         = ai_seq;
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_COMPAMT ER_6-01: ' || sqlerrm);
            ROLLBACK;
            RETURN;
      END;

      BEGIN
         UPDATE HD_HOUS_SELL
            SET COMP_LOANAMT = (SELECT SUM(A.ICHE_AMT)
                                  FROM HD_HOUS_COMPAMT A
                                 WHERE A.CUST_CODE = HD_HOUS_SELL.CUST_CODE
                                   AND A.SEQ       = HD_HOUS_SELL.SEQ
                                   AND A.ICHE_YN   = 'Y'),
                CHG_DUTY_ID  = C_INPUT_DUTY_ID,
                CHG_DATE     = TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
          WHERE CUST_CODE    = as_custcode
            AND SEQ          = ai_seq;
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELL ER_6-02: ' || sqlerrm);
            ROLLBACK;
            RETURN;
      END;
   END; ELSIF C_INTYPE = '7' THEN BEGIN /* INTYPE:7 지체보상금처리 */
      BEGIN
         UPDATE HD_HOUS_INDEMINITY
            SET ICHE_YN     = 'Y',
                CHG_DUTY_ID = C_INPUT_DUTY_ID,
                CHG_DATE    = TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
          WHERE CUST_CODE   = as_custcode
            AND SEQ         = ai_seq;
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002,'UPDATE HD_HOUS_INDEMINITY ER_7-01: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;

      BEGIN
         UPDATE HD_HOUS_SELL
            SET DELAY_INDEMINITY = (SELECT SUM(A.DELAY_INDEMINITY)
                                      FROM HD_HOUS_INDEMINITY A
                                     WHERE A.CUST_CODE = HD_HOUS_SELL.CUST_CODE
                                       AND A.SEQ       = HD_HOUS_SELL.SEQ
                                       AND A.ICHE_YN   = 'Y'),
                CHG_DUTY_ID      = C_INPUT_DUTY_ID,
                CHG_DATE         = TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
          WHERE CUST_CODE        = as_custcode
            AND SEQ              = ai_seq;
         EXCEPTION
            WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'UPDATE HD_HOUS_SELL 02');
               ROLLBACK;
               RETURN;
      END;
   END; END IF;
   /* ----- 추가 처리 ----- */
   /*--------------------------------------------------------------------------*/
   COMMIT WORK;

   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_hd_income_calc;
/


DROP PROCEDURE PROC_HD_INCOME_CALC_ADJUST;

CREATE OR REPLACE PROCEDURE proc_hd_income_calc_adjust (
  as_custcode       IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_input_date     IN VARCHAR2,   -- 입금일
  ai_inseq          IN INTEGER     -- 입금순번
) IS

CURSOR DELAY_CUR (V_AGREEDATE VARCHAR2, V_MONTHS INTEGER )IS
  SELECT delayrate,delaycut,delayunit,startdate,enddate
    FROM hd_hous_rate_delay
    WHERE cust_code  = as_custcode
      AND seq        = ai_seq
      AND enddate   >= V_AGREEDATE
      AND startdate  <= as_input_date
      AND ((end_tag = '1' and end_days >= V_MONTHS) or (end_tag = '2' and end_days > V_MONTHS))
      AND ((start_tag = '1' and start_days <= V_MONTHS) or (start_tag = '2' and start_days < V_MONTHS));

CURSOR DISCOUNT_CUR (V_AGREEDATE VARCHAR2 )IS
  SELECT discntrate,discntcut,discntunit,startdate,enddate
    FROM hd_hous_rate_discount
    WHERE cust_code  = as_custcode
      AND seq        = ai_seq
      AND enddate >= as_input_date
      AND startdate <= V_AGREEDATE;
-------------------------------------------------------------
-- 변수선언
-------------------------------------------------------------
-- 공통 변수
   C_DEPT_CODE         VARCHAR2(12);  -- 부서코드
   C_HOUSETAG          VARCHAR2(1);   -- 분양구분
   C_BUILDNO           VARCHAR2(10);   -- 동
   C_HOUSENO           VARCHAR2(10);   -- 호
   C_DELAYBLOCK        VARCHAR2(1);   --연체율적용구간 1:해당구간중최대 2:구간별계산

   C_DEPOSIT_NO        VARCHAR2(30);  -- 계좌번호
   C_VDEPOSIT_NO       VARCHAR2(30);  -- 가상계좌번호
   C_INAMT             NUMBER(30,9);  -- 입금액
   C_INGUBUN           VARCHAR2(2);   -- 입금구분
   C_INTYPE            VARCHAR2(2);   -- 입금형태
   C_MOD_YN            VARCHAR2(1);   -- 조정여부
   C_MOD_RAMT          NUMBER(30,9);  -- 조정연체료
   C_MOD_DAMT          NUMBER(30,9);  -- 조정할인료
   C_INPUT_DUTY_ID     VARCHAR2(12);  -- 입력담당

   C_BANK_CODE         VARCHAR2(8);   -- 은행코드
   C_BANK_NAME         VARCHAR2(30);  -- 은행명칭
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_INSEQ             NUMBER;   -- 입금순번
   C_LAST_COUNTS       VARCHAR2(2);  -- 미납입된 마지막약정차수
   C_MAX_COUNTS        VARCHAR2(2);  -- 마지막약정차수
   C_LAST_TIMES        INTEGER;  -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_BUNAMT            NUMBER(30,9);   -- 약정분양금액
   C_LANDAMT           NUMBER(30,9);   -- 약정토지가
   C_BUILDAMT          NUMBER(30,9);   -- 약정건물가
   C_VATAMT            NUMBER(30,9);   -- 약정부가세
   C_MANAGEAMT         NUMBER(30,9);   -- 약정관리비
   C_C_LANDAMT         NUMBER(30,9);   -- 납입인정토지가
   C_C_BUILDAMT        NUMBER(30,9);   -- 납입인정건물가
   C_C_VATAMT          NUMBER(30,9);   -- 납입인정부가세
   C_C_MANAGEAMT       NUMBER(30,9);   -- 납입인정관리비
   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_R_LANDAMT         NUMBER(30,9);   -- 실납입토지가
   C_R_BUILDAMT        NUMBER(30,9);   -- 실납입건물가
   C_R_VATAMT          NUMBER(30,9);   -- 실납입부가세
   C_R_MANAGEAMT       NUMBER(30,9);   -- 실납입관리비
   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_RECEIPTLANDAMT    NUMBER(30,9);   -- 납입토지가
   C_RECEIPTBUILDAMT   NUMBER(30,9);   -- 납입건물가
   C_RECEIPTVATAMT     NUMBER(30,9);   -- 납입부가세
   C_RECEIPTMANAGEAMT  NUMBER(30,9);   -- 납입관리비
   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   -- 
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_MOVEINSTARTDATE   VARCHAR2(8);
   C_MOVEINENDDATE     VARCHAR2(8);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분
   C_TEMP__AMT         NUMBER(30,9);

   C_TEMPDT            VARCHAR(8);
   C_BLOCKDT           VARCHAR2(8);

   v_modapply          VARCHAR(1);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr         EXCEPTION;                  -- Select Data Not Found

BEGIN
   BEGIN
      -----------------------------------------------------
      -- 사업코드, 분양구분, 동호를 구한다.
      select dept_code, housetag, buildno, houseno, moveinstartdate, moveinenddate, daymonth_tag
        into C_DEPT_CODE,C_HOUSETAG,C_BUILDNO,C_HOUSENO,C_MOVEINSTARTDATE,C_MOVEINENDDATE, C_DAYMONTH
        from hd_hous_sell
        where cust_code = as_custcode
          and seq = ai_seq;

      SELECT NVL(DELAY_BLOCK, '1')
        INTO C_DELAYBLOCK
        FROM HD_CODE_HOUSE
       WHERE DEPT_CODE = C_DEPT_CODE
         AND HOUSETAG  = C_HOUSETAG;

      select deposit_no, vdeposit_no, inamt, ingubun, intype, mod_yn, mod_ramt, mod_damt, input_duty_id
        into C_DEPOSIT_NO, C_VDEPOSIT_NO, C_INAMT, C_INGUBUN, C_INTYPE, C_MOD_YN, C_MOD_RAMT, C_MOD_DAMT, C_INPUT_DUTY_ID
        from hd_hous_day_income_adjust
        where dept_code = C_DEPT_CODE
          and housetag = C_HOUSETAG
          and indt = as_input_date
          and inseq = ai_inseq;

      v_modapply := C_MOD_YN;

--    입금예정금액 = 납입금액 - 조정연체료 + 조정할인료
      c_input_amt := C_INAMT - C_MOD_RAMT + C_MOD_DAMT;

      -----------------------------------------------------
      -- 은행코드,은행명칭을 구한다.
      select bank_code,bank_name
        into C_BANK_CODE,C_BANK_NAME
        from hd_code_deposit
        where dept_code  = C_DEPT_CODE
          and housetag   = C_HOUSETAG
          and deposit_no = C_DEPOSIT_NO;
      -----------------------------------------------------
      -- 일자별입금내역의 순번을 구한다.
      select nvl(max(inseq),0) into C_INSEQ
        from hd_hous_day_income_adjust
        where dept_code = C_DEPT_CODE
          and housetag = C_HOUSETAG
          and indt = as_input_date;
      C_INSEQ := C_INSEQ + 1;
      -----------------------------------------------------
      -- 마지막 약정차수
      select NVL(max(counts), '90')
        into C_MAX_COUNTS
        from HD_HOUS_SELLDETAIL_ADJUST
        where cust_code = as_custcode
          and seq = ai_seq;
      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      select COUNT(*) into C_CNT
        from hd_hous_selldetail_adjust
        where cust_code = as_custcode
          and seq = ai_seq
          and perpecttag = 'N';

      if C_CNT > 0 THEN
         select min(counts) into C_LAST_COUNTS
           from hd_hous_selldetail_adjust
           where cust_code = as_custcode
             and seq = ai_seq
             and perpecttag = 'N';

         select NVL(MAX(times),0) into C_LAST_TIMES
           from hd_hous_income_adjust
           where cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         C_LAST_TIMES := C_LAST_TIMES + 1;
      else
         select count(*) into C_CNT
           from hd_hous_selldetail_adjust
           where cust_code = as_custcode
             and seq = ai_seq ;
         if C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다. 동호==>' || C_BUILDNO || '-' || C_HOUSENO;
            GOTO EXIT_ROUTINE;
         end if;
  
         select max(counts) into C_LAST_COUNTS
           from hd_hous_selldetail_adjust
           where cust_code = as_custcode
             and seq = ai_seq;

         select NVL(MAX(times),0) into C_LAST_TIMES
           from hd_hous_income_adjust
           where cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         if C_LAST_TIMES < 90 THEN
            C_LAST_TIMES := 90;
         else
            C_LAST_TIMES := C_LAST_TIMES + 1;
         end if;
      end if;

      -- LOOP 시작
      LOOP
         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0),
                nvl(bunamt,0),nvl(landamt,0),nvl(buildamt,0),nvl(vatamt,0),nvl(manageamt,0),
                agreedate,dc_yn,ac_yn
           into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT,
                C_AGREEDATE,C_DC_YN,C_AC_YN
           from hd_hous_selldetail_adjust
          where cust_code = as_custcode
            and seq = ai_seq
            and counts = C_LAST_COUNTS;

         if C_DAYS > 0 THEN -- 연체료일 경우
            -- 잔금일경우 입주기간만큼 일수제외
            if C_LAST_COUNTS = '90' then
               if nvl(C_MOVEINENDDATE, 'X') <> 'X' and C_AGREEDATE < C_MOVEINENDDATE then
                  C_TEMP_DAYS := nvl((to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_MOVEINENDDATE, 'YYYYMMDD')) * -1,0);
                  if C_DAYS <= C_TEMP_DAYS then
                     C_DAYS := 0;
                  else 
                     C_AGREEDATE := C_MOVEINENDDATE;
                     C_DAYS := nvl((to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0);
                  end if;
               end if;
            end if;
            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'Y');
            IF C_TEMPDT >= as_input_date THEN
               C_DAYS := 0;
            END IF;
         end if;

         if C_DAYS < 0 THEN -- 할인료일 경우
            if C_LAST_COUNTS = '90' and
               nvl(C_MOVEINSTARTDATE, 'X') <> 'X' and nvl(C_MOVEINENDDATE, 'X') <> 'X' and
               as_input_date >= C_MOVEINSTARTDATE and as_input_date <= C_MOVEINENDDATE then begin
               C_CNT := 0;
               C_DAYS := 0;
            end; else begin
               select count(*),nvl(max(gong_days),0) into C_CNT,C_TEMP_CNT
                 from hd_refer_holiday
                 where dept_code = C_DEPT_CODE
                   and housetag = C_HOUSETAG
                   and ad_tag = '2'
                   and rate_tag = '1'
                   and holiday = C_AGREEDATE;
               if C_CNT > 0 then
                  C_CNT := C_DAYS * -1;
                  if C_CNT <= C_TEMP_CNT then
                     C_DAYS := 0;
                  end if;
               end if;
            end; end if;   
         end if;

         -- 기납입금액누계를 구한다.
         select nvl(sum(receiptamt),0),nvl(sum(receiptlandamt),0),nvl(sum(receiptbuildamt),0),nvl(sum(receiptvatamt),0),nvl(sum(receiptmanageamt),0)
           into C_RECEIPTAMT,C_RECEIPTLANDAMT,C_RECEIPTBUILDAMT,C_RECEIPTVATAMT,C_RECEIPTMANAGEAMT
           from hd_hous_income_adjust
           where cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_BUNAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         if C_LAST_TIMES > 89 then
            C_TEMP_AMT := c_input_amt;
            c_input_amt := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF C_MOD_YN = 'Y' THEN BEGIN
               ---------------------------------------------------------------------
               -- 입금수정인경우 최초 한번만 할인및 연체료 강제 적용
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN
                  C_DELAY_DAY    := C_DAYS;
                  C_DISCOUNT_DAY := 0;
               ELSE
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := C_DAYS * -1;
               END IF;

               IF C_WORK_AMT < c_input_amt THEN
                  C_TEMP_AMT  := C_WORK_AMT;
                  c_input_amt := c_input_amt - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT  := c_input_amt;
                  c_input_amt := 0;
               END IF;

               IF v_modapply = 'Y' THEN BEGIN
                  C_DELAY_AMT    := C_MOD_RAMT;
                  C_DISCOUNT_AMT := C_MOD_DAMT;
               END; ELSE BEGIN
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
               END; END IF;
               v_modapply := 'N';
            END; ELSIF (C_DAYS = 0) THEN BEGIN
               ---------------------------------------------------------------------
               -- 정상일 경우
               ---------------------------------------------------------------------
               IF C_WORK_AMT < c_input_amt THEN
                  C_TEMP_AMT   := C_WORK_AMT;
                  c_input_amt := c_input_amt - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT   := c_input_amt;
                  c_input_amt := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            END; ELSE
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               -- 지체보상금은 전액 할인으로 실입금액은 0
               IF C_INGUBUN IN ('C') AND C_LAST_COUNTS = '90' THEN BEGIN

                  IF C_DAYS > 0 THEN
                     C_DELAY_DAY    := C_DAYS;
                     C_DISCOUNT_DAY := 0;
                  ELSE
                     C_DELAY_DAY    := 0;
                     C_DISCOUNT_DAY := C_DAYS * -1;
                  END IF;

                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := c_input_amt;
                  C_TEMP_AMT     := c_input_amt;
                  c_input_amt    := 0;
                END; ELSIF C_DAYS > 0 THEN 
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  C_DELAY_DAY   := C_DAYS;
                  if C_AC_YN = 'Y' then
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     IF (C_LAST_COUNTS = '90' AND C_MOVEINENDDATE IS NOT NULL AND C_AGREEDATE < C_MOVEINENDDATE) THEN
                        C_MONTHS := CASE WHEN C_DAYMONTH = '2'
                                         THEN months_between(to_date(as_input_date, 'YYYYMMDD'),to_date(C_MOVEINENDDATE, 'YYYYMMDD'))
                                         ELSE to_date(as_input_date, 'YYYYMMDD') - to_date(C_MOVEINENDDATE, 'YYYYMMDD')
                                    END;
                        C_BLOCKDT := C_MOVEINENDDATE;
                     ELSE
                        C_MONTHS := CASE WHEN C_DAYMONTH = '2'
                                         THEN months_between(to_date(as_input_date, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'))
                                         ELSE to_date(as_input_date, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD')
                                    END;
                        C_BLOCKDT := C_AGREEDATE;
                     END IF;                    

                     /* ----------------------------------------- */
                     /* ----------------------------------------- */
                     IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                        OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DELAY_CUR%NOTFOUND;
                           if C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE then
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              EXIT;
                           end if;
                           if C_AGREEDATE >= C_STARTDATE then
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                           elsif as_input_date <= C_ENDDATE then
                              C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           else
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           end if;
                           C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                        END LOOP;
                        CLOSE DELAY_CUR;
                     ELSE --구간별 연체율 계산방식

IF C_DAYMONTH != '1' THEN
   RAISE_APPLICATION_ERROR(-20002, '구간별 연체료 계산현장의 연체료는 월계산 방법을 지원하지 않습니다');
   ROLLBACK;
   RETURN;
END IF;
-->>>>                        C_TEMP_RATE := F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(c_input_amt)), 'RATE');
                              C_TEMP_RATE := F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(c_input_amt)), 'RATE');
/*
                        SELECT NVL(SUM(RT), 0)
                          INTO C_TEMP_RATE
                          FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) AS RT,
                                       DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                  FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                               NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                               CASE WHEN A.TOT < B.START_DAYS
                                                    THEN 0
                                                    ELSE CASE WHEN A.TOT > B.END_DAYS
                                                              THEN B.END_DAYS - B.START_DAYS + 1
                                                              ELSE A.DY - B.START_DAYS + 1
                                                         END
                                               END DDY
                                          FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                       DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                               MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                       CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                            THEN 0
                                                            ELSE 1
                                                       END AS DY
                                                  FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                               STARTDATE, ENDDATE, ADT, IDT, TOT
                                                          FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                  FROM HD_HOUS_RATE_DELAY A,
                                                                       (SELECT C_BLOCKDT AS ADT,
                                                                               as_input_date AS IDT,
                                                                               DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                       MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                          FROM DUAL
                                                                       ) B
                                                                 WHERE A.CUST_CODE = as_custcode
                                                                   AND A.SEQ       = ai_seq
                                                                   AND A.ENDDATE   >= B.ADT
                                                                   AND A.STARTDATE <= B.IDT
                                                               )
                                                       )
                                               ) A,
                                               HD_HOUS_RATE_DELAY B
                                         WHERE B.CUST_CODE = as_custcode
                                           AND B.SEQ       = ai_seq
                                           AND B.STARTDATE = A.STARTDATE
                                           AND B.ENDDATE   = A.ENDDATE
                                       )
                                 WHERE DDY > 0
                               );
*/
                     END IF;

                     /* ----------------------------------------- */
                     /* ----------------------------------------- */
                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     if C_TEMP_RATE <> 0 then
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     else
                        C_TEMP_AMT := 0;
                     end if;

                     if C_WORK_AMT <= C_TEMP_AMT then
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                           OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                           LOOP
                              FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                              EXIT WHEN DELAY_CUR%NOTFOUND;
                              C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DELAYUNIT, '0')), 1);
               
                              if C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE then
                                 C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                                 if C_DELAYCUT = '1' then
                                    C_DELAY_AMT := trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 elsif C_DELAYCUT = '2' then
                                    C_DELAY_AMT := trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 else
                                    C_DELAY_AMT := round(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 end if;
                                 EXIT;
                              end if;
                              if C_AGREEDATE >= C_STARTDATE then
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                              elsif as_input_date <= C_ENDDATE then
                                 C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              else
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              end if;
                              C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                              if C_DELAYCUT = '1' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DELAYCUT = '2' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DELAY_AMT := C_DELAY_AMT + round(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                           END LOOP;
                           CLOSE DELAY_CUR;
                        ELSE --구간별 연체율 계산방식
-->>>>                           C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_WORK_AMT)));
                              C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_WORK_AMT)));
/*
                           SELECT NVL(SUM(CASE DELAYCUT WHEN '1' THEN TRUNC(AMT / DUNIT)
                                                        WHEN '2' THEN TRUNC((AMT / DUNIT) + 0.9)
                                                                 ELSE ROUND(AMT / DUNIT)
                                          END * DUNIT), 0)
                             INTO C_DELAY_AMT
                             FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) * C_WORK_AMT AS AMT,
                                          DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                     FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                                  NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                                  CASE WHEN A.TOT < B.START_DAYS
                                                       THEN 0
                                                       ELSE CASE WHEN A.TOT > B.END_DAYS
                                                                 THEN B.END_DAYS - B.START_DAYS + 1
                                                                 ELSE A.DY - B.START_DAYS + 1
                                                            END
                                                  END DDY
                                             FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                          DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                                  MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                          CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                               THEN 0
                                                               ELSE 1
                                                          END AS DY
                                                     FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                                  STARTDATE, ENDDATE, ADT, IDT, TOT
                                                             FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                     FROM HD_HOUS_RATE_DELAY A,
                                                                          (SELECT C_BLOCKDT AS ADT,
                                                                                  as_input_date AS IDT,
                                                                                  DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                          MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                             FROM DUAL
                                                                          ) B
                                                                    WHERE A.CUST_CODE = as_custcode
                                                                      AND A.SEQ       = ai_seq
                                                                      AND A.ENDDATE   >= B.ADT
                                                                      AND A.STARTDATE <= B.IDT
                                                                  )
                                                          )
                                                  ) A,
                                                  HD_HOUS_RATE_DELAY B
                                            WHERE B.CUST_CODE = as_custcode
                                              AND B.SEQ       = ai_seq
                                              AND B.STARTDATE = A.STARTDATE
                                              AND B.ENDDATE   = A.ENDDATE
                                          )
                                    WHERE DDY > 0
                                  );
*/
                        END IF;
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                     else
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                           OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                           LOOP
                              FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                              EXIT WHEN DELAY_CUR%NOTFOUND;
                              C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DELAYUNIT, '0')), 1);
                              if C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE then
                                 C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                                 if C_DELAYCUT = '1' then
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 elsif C_DELAYCUT = '2' then
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 else
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 end if;
                                 EXIT;
                              end if;
                              if C_AGREEDATE >= C_STARTDATE then
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                              elsif as_input_date <= C_ENDDATE then
                                 C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              else
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              end if;
                              C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                              if C_DELAYCUT = '1' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DELAYCUT = '2' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                           END LOOP;
                           CLOSE DELAY_CUR;
                        ELSE --구간별 연체율 계산방식
-->>>>                           C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_TEMP_AMT)));
                              C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_TEMP_AMT)));
/*
                           SELECT NVL(SUM(CASE DELAYCUT WHEN '1' THEN TRUNC(AMT / DUNIT)
                                                        WHEN '2' THEN TRUNC((AMT / DUNIT) + 0.9)
                                                                 ELSE ROUND(AMT / DUNIT)
                                          END * DUNIT), 0)
                             INTO C_DELAY_AMT
                             FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) * C_TEMP_AMT AS AMT,
                                          DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                     FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                                  NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                                  CASE WHEN A.TOT < B.START_DAYS
                                                       THEN 0
                                                       ELSE CASE WHEN A.TOT > B.END_DAYS
                                                                 THEN B.END_DAYS - B.START_DAYS + 1
                                                                 ELSE A.DY - B.START_DAYS + 1
                                                            END
                                                  END DDY
                                             FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                          DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                                  MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                          CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                               THEN 0
                                                               ELSE 1
                                                          END AS DY
                                                     FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                                  STARTDATE, ENDDATE, ADT, IDT, TOT
                                                             FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                     FROM HD_HOUS_RATE_DELAY A,
                                                                          (SELECT C_BLOCKDT AS ADT,
                                                                                  as_input_date AS IDT,
                                                                                  DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                          MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                             FROM DUAL
                                                                          ) B
                                                                    WHERE A.CUST_CODE = as_custcode
                                                                      AND A.SEQ       = ai_seq
                                                                      AND A.ENDDATE   >= B.ADT
                                                                      AND A.STARTDATE <= B.IDT
                                                                  )
                                                          )
                                                  ) A,
                                                  HD_HOUS_RATE_DELAY B
                                            WHERE B.CUST_CODE = as_custcode
                                              AND B.SEQ       = ai_seq
                                              AND B.STARTDATE = A.STARTDATE
                                              AND B.ENDDATE   = A.ENDDATE
                                          )
                                    WHERE DDY > 0
                                  );
*/
                        END IF;
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        C_TEMP_AMT   := c_input_amt - C_DELAY_AMT;
                        c_input_amt := 0;
                     end if;
                  else
                     if C_WORK_AMT < c_input_amt THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        c_input_amt := c_input_amt - C_WORK_AMT;
                     else
                        C_TEMP_AMT   := c_input_amt;
                        c_input_amt := 0;
                     end if;
                  end if;
               else
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  C_DISCOUNT_DAY   := C_DAYS * -1;
                  if C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DISCOUNT_CUR(C_AGREEDATE);
                     LOOP
                        FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DISCOUNT_CUR%NOTFOUND;
                        if C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE then
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        end if;
                        if as_input_date >= C_STARTDATE then
                           C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                        elsif C_AGREEDATE <= C_ENDDATE then
                           C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                        else
                           C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                        end if;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DISCOUNT_CUR;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     if C_TEMP_RATE <> 0 then
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     else
                        C_TEMP_AMT := 0;
                     end if;
                     if C_WORK_AMT <= C_TEMP_AMT then
                        OPEN DISCOUNT_CUR(C_AGREEDATE);
                        LOOP
                           FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DISCOUNT_CUR%NOTFOUND;

                           C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DISCNTUNIT, '0')), 1);

                           if C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE then
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              if C_DISCNTCUT = '1' then
                                 C_DISCOUNT_AMT := trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DISCNTCUT = '2' then
                                 C_DISCOUNT_AMT := trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DISCOUNT_AMT := round((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                              EXIT;
                           end if;
                           if as_input_date >= C_STARTDATE then
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                           elsif C_AGREEDATE <= C_ENDDATE then
                              C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           else
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           end if;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           if C_DISCNTCUT = '1' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           elsif C_DISCNTCUT = '2' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                           else
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           end if;
                        END LOOP;
                        CLOSE DISCOUNT_CUR;
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT - C_DISCOUNT_AMT);
                     else
                        OPEN DISCOUNT_CUR(C_AGREEDATE);
                        LOOP
                           FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DISCOUNT_CUR%NOTFOUND;

                           C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DISCNTUNIT, '0')), 1);

                           if C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE then
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              if C_DISCNTCUT = '1' then
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DISCNTCUT = '2' then
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                              EXIT;
                           end if;

                           if as_input_date >= C_STARTDATE then
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                           elsif C_AGREEDATE <= C_ENDDATE then
                              C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           else
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           end if;
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           if C_DISCNTCUT = '1' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           elsif C_DISCNTCUT = '2' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                           else
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           end if;
                        END LOOP;
                        CLOSE DISCOUNT_CUR;
                        C_TEMP_AMT   := c_input_amt + C_DISCOUNT_AMT;
                        c_input_amt := 0;
                     end if;
                  else
                     if C_WORK_AMT < c_input_amt THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        c_input_amt := c_input_amt - C_WORK_AMT;
                     else
                        C_TEMP_AMT   := c_input_amt;
                        c_input_amt := 0;
                     end if;
                  end if;
               end if;
            end if;
         end if;
         ----------------------------------------------------------------------------
         -- 납입금액을 가지고 토지,건물,부가세를 구한다.
         -----------------------------------------------------------------------------
         if C_WORK_AMT = C_TEMP_AMT THEN  -- 완납일경우 (약정 - 납입누계)
            C_C_LANDAMT    := C_LANDAMT   - C_RECEIPTLANDAMT;
            C_C_BUILDAMT   := C_BUILDAMT  - C_RECEIPTBUILDAMT;
            C_C_VATAMT     := C_VATAMT    - C_RECEIPTVATAMT;
            C_C_MANAGEAMT  := C_MANAGEAMT - C_RECEIPTMANAGEAMT;
            C_R_RECEIPTAMT := C_TEMP_AMT;   -- 실납입금액
            C_R_LANDAMT    := C_C_LANDAMT;
            C_R_BUILDAMT   := C_C_BUILDAMT;
            C_R_VATAMT     := C_C_VATAMT;
            C_R_MANAGEAMT  := C_C_MANAGEAMT;
         else
            if C_BUNAMT <> 0 then
               C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * C_TEMP_AMT) / 10) * 10;
               C_C_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT + C_MANAGEAMT)) * (C_TEMP_AMT - C_C_MANAGEAMT)) / 10) * 10;
               if C_VATAMT = 0 then
                  C_C_VATAMT := 0;
               else
                  C_C_VATAMT := C_C_BUILDAMT * 0.1;
               end if;
               C_C_LANDAMT  := C_TEMP_AMT - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
            else
               C_C_LANDAMT   := 0;
               C_C_BUILDAMT  := 0;
               C_C_VATAMT    := 0;
               C_C_MANAGEAMT := 0;
            end if;

            C_TEMP__AMT := ((C_RECEIPTMANAGEAMT + C_C_MANAGEAMT) - C_MANAGEAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_MANAGEAMT := C_MANAGEAMT - C_RECEIPTMANAGEAMT;
               C_C_LANDAMT  := C_C_LANDAMT + C_TEMP__AMT;
            END IF;               

            C_TEMP__AMT := ((C_RECEIPTLANDAMT + C_C_LANDAMT) - C_LANDAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_LANDAMT  := C_LANDAMT - C_RECEIPTLANDAMT;
               C_C_BUILDAMT := C_C_BUILDAMT + C_TEMP__AMT;
            END IF;               

            C_TEMP__AMT := ((C_RECEIPTBUILDAMT + C_C_BUILDAMT) - C_BUILDAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_BUILDAMT  := C_BUILDAMT - C_RECEIPTBUILDAMT;
               C_C_VATAMT    := C_C_VATAMT + C_TEMP__AMT;
            END IF;

            C_R_LANDAMT    := C_C_LANDAMT;
            C_R_BUILDAMT   := C_C_BUILDAMT;
            C_R_VATAMT     := C_C_VATAMT;
            C_R_MANAGEAMT  := C_C_MANAGEAMT;

         end if;
         -- 할인료가 있을 경우만 실납입금액 토, 건, 부 관 을 별도로 계산한다
         if C_DISCOUNT_AMT <> 0 then
	         C_R_RECEIPTAMT := C_TEMP_AMT - C_DISCOUNT_AMT; -- 실납입금액 계산용(연체료를 포함 안한다.)
	         if C_BUNAMT <> 0 then
	            C_R_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * C_R_RECEIPTAMT) / 10) * 10;

--	            C_R_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_R_RECEIPTAMT - C_R_MANAGEAMT)) / 10) * 10;
--	            if C_VATAMT = 0 then
--	               C_R_VATAMT := 0;
--	            else
--	               C_R_VATAMT := C_R_BUILDAMT * 0.1;
--	            end if;
--	            C_R_LANDAMT  := C_R_RECEIPTAMT - C_R_MANAGEAMT - C_R_BUILDAMT - C_R_VATAMT;
                IF C_LANDAMT = 0 THEN --토지가가 없으면 계산된 토지가를 건물가에 포함한다
                   C_R_LANDAMT := 0;
                   IF C_VATAMT = 0 THEN
                      C_R_BUILDAMT := C_R_RECEIPTAMT;
                      C_R_VATAMT   := 0;
                   ELSE
                      C_R_BUILDAMT := TRUNC(C_R_RECEIPTAMT / 1.1);
                      C_R_VATAMT   := C_R_RECEIPTAMT - C_R_BUILDAMT;
                   END IF;
                ELSE
   	            C_R_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_R_RECEIPTAMT - C_R_MANAGEAMT)) / 10) * 10;
	               if C_VATAMT = 0 then
	                  C_R_VATAMT := 0;
	               else
	                  C_R_VATAMT := C_R_BUILDAMT * 0.1;
	               end if;
   	            C_R_LANDAMT  := C_R_RECEIPTAMT - C_R_MANAGEAMT - C_R_BUILDAMT - C_R_VATAMT;
                END IF;
	         else
	            C_R_LANDAMT   := 0;
	            C_R_BUILDAMT  := 0;
	            C_R_VATAMT    := 0;
	            C_R_MANAGEAMT := 0;
	         end if;
	     end if;    
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액
         -----------------------------------------------------------------------------
         -- 계산된 값을 분양_세대별수입금에 넣어준다.
         -----------------------------------------------------------------------------

         C_DAYS := TO_DATE(as_input_date, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         -- 과오납금인경우 토건부는 0, 실토건부 0, 납입,실납입금액만 넣는다
         IF C_MAX_COUNTS = C_LAST_COUNTS AND C_LAST_TIMES >= 90 THEN
            C_C_LANDAMT   := 0;
            C_C_BUILDAMT  := 0;
            C_C_VATAMT    := 0;
            C_C_MANAGEAMT := 0;
            C_R_LANDAMT   := 0;
            C_R_BUILDAMT  := 0;
            C_R_VATAMT    := 0;
            C_R_MANAGEAMT := 0;
         END IF;

         INSERT INTO HD_HOUS_INCOME_ADJUST
                   (CUST_CODE, SEQ, COUNTS, TIMES, DEPT_CODE, HOUSETAG,
                    BUILDNO, HOUSENO, DEPOSIT_NO, RECEIPTDATE,
                    RECEIPTAMT, RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                    DELAYDAYS, DELAYAMT, DISCNTDAYS, DISCNTAMT, REALINCOMAMT,
                    REALLANDAMT, REALBUILDAMT, REALVATAMT, REALMANAGEAMT, BANK_CODE, BANK_NAME,
                    PAYTAG, INCOMTYPE, MOD_YN, REAL_PAY_TAG,
                    SLIPDT, SLIPSEQ, SLIPTYPE, TAXDATE, TAXSEQ, INSEQ, INPUT_DUTY_ID,
                    INPUT_DATE, CHG_DUTY_ID, CHG_DATE, VDEPOSIT_NO, DETAILMOD_YN)
            VALUES ( as_custcode,ai_seq,C_LAST_COUNTS,C_LAST_TIMES,C_DEPT_CODE,C_HOUSETAG,
                     C_BUILDNO,C_HOUSENO,C_DEPOSIT_NO,as_input_date,
                     C_TEMP_AMT,C_C_LANDAMT,C_C_BUILDAMT,C_C_VATAMT,C_C_MANAGEAMT,
                     C_DELAY_DAY,C_DELAY_AMT,C_DISCOUNT_DAY,C_DISCOUNT_AMT,C_R_RECEIPTAMT,
                     C_R_LANDAMT,C_R_BUILDAMT,C_R_VATAMT,C_R_MANAGEAMT,C_BANK_CODE,C_BANK_NAME,
                     C_INGUBUN,C_INTYPE,C_MOD_YN,'Y',
                     null,null,null,null,null,ai_inseq, C_INPUT_DUTY_ID,
                     TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'),'','', C_VDEPOSIT_NO, 'N');

         -- 기납입금액누계를 구한다.
         select nvl(sum(receiptamt),0)
           into C_RECEIPTAMT
           from hd_hous_income_adjust
           where cust_code = as_custcode
             and seq       = ai_seq
             and counts    = C_LAST_COUNTS;
         -- 입금완료구분값을 구한다.
         if C_BUNAMT <= C_RECEIPTAMT THEN
            C_PERPECTTAG := 'Y';
         else
            C_PERPECTTAG := 'N';
         end if;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         UPDATE HD_HOUS_SELLDETAIL_ADJUST
            SET PERPECTTAG = C_PERPECTTAG,
                RECEIPTAMT = C_RECEIPTAMT
           where cust_code = as_custcode
             and seq       = ai_seq
             and counts    = C_LAST_COUNTS;
         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF c_input_amt = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&
         if C_LAST_COUNTS >= C_MAX_COUNTS then
            C_LAST_COUNTS := C_MAX_COUNTS;
            select NVL(MAX(times),0)
              into C_LAST_TIMES
              from hd_hous_income_adjust
              where cust_code = as_custcode
                and seq       = ai_seq
                and counts    = C_LAST_COUNTS;
            select perpecttag
              into C_PERPECTTAG
              from hd_hous_selldetail_adjust
              where cust_code = as_custcode
                and seq       = ai_seq
                and counts    = C_LAST_COUNTS;
            if C_PERPECTTAG = 'Y' and C_LAST_TIMES < 90 then
               C_LAST_TIMES := 90;
            else
               C_LAST_TIMES := C_LAST_TIMES + 1;
            end if;
         else
            select COUNT(*)
              into C_CNT
              from hd_hous_selldetail_adjust
              where cust_code = as_custcode
                and seq       = ai_seq
                and counts > C_LAST_COUNTS;
            if C_CNT > 0 then
               select min(counts)
                 into C_LAST_COUNTS
                 from hd_hous_selldetail_adjust
                 where cust_code = as_custcode
                   and seq       = ai_seq
                   and counts > C_LAST_COUNTS;
               select NVL(MAX(times),0)
                 into C_LAST_TIMES
                 from hd_hous_income_adjust
                 where cust_code = as_custcode
                   and seq       = ai_seq
                   and counts    = C_LAST_COUNTS;
               C_LAST_TIMES := C_LAST_TIMES + 1;
            else
               EXIT;
            end if;
         end if;
         C_MOD_YN := 'N';
         C_AC_YN := 'Y';
         C_DC_YN := 'Y';
      END LOOP;
   END;
   
   UPDATE HD_HOUS_DAY_INCOME_ADJUST
      SET IHE_YN      = 'Y',
          CHG_DUTY_ID = C_INPUT_DUTY_ID,
          CHG_DATE    = TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')
    WHERE DEPT_CODE   = C_DEPT_CODE
      AND HOUSETAG    = C_HOUSETAG
      AND INDT        = as_input_date
      AND INSEQ       = ai_inseq;
   
   COMMIT WORK;
   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_hd_income_calc_adjust;
/


DROP PROCEDURE PROC_HD_INCOME_CALC_PLAN;

CREATE OR REPLACE PROCEDURE proc_hd_income_calc_plan (
  as_custcode       IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_input_date     IN VARCHAR2,   -- 입금일
  ad_input_amt      IN NUMBER,     -- 입금액
  ad_seq_num        IN NUMBER,     -- SEQ_NUM
  as_counts         IN VARCHAR2    -- 차수
) IS

CURSOR DELAY_CUR (V_AGREEDATE VARCHAR2, V_MONTHS INTEGER )IS
  SELECT delayrate,delaycut,delayunit,startdate,enddate
    FROM hd_hous_rate_delay
    WHERE cust_code  = as_custcode
      AND seq        = ai_seq
      AND enddate   >= V_AGREEDATE
      AND startdate  <= as_input_date
      AND ((end_tag = '1' and end_days >= V_MONTHS) or (end_tag = '2' and end_days > V_MONTHS))
      AND ((start_tag = '1' and start_days <= V_MONTHS) or (start_tag = '2' and start_days < V_MONTHS));

CURSOR DISCOUNT_CUR (V_AGREEDATE VARCHAR2 )IS
  SELECT discntrate,discntcut,discntunit,startdate,enddate
    FROM hd_hous_rate_discount
    WHERE cust_code  = as_custcode
      AND seq        = ai_seq
      AND enddate >= as_input_date
      AND startdate <= V_AGREEDATE;
-------------------------------------------------------------
-- 변수선언
-------------------------------------------------------------
-- 공통 변수
   C_DEPT_CODE         VARCHAR2(12);  -- 부서코드
   C_HOUSETAG          VARCHAR2(1);   -- 분양구분
   C_BUILDNO           VARCHAR2(10);   -- 동
   C_HOUSENO           VARCHAR2(10);   -- 호
   C_DELAYBLOCK        VARCHAR2(1);   --연체율적용구간 1:해당구간중최대 2:구간별계산

   C_BANK_CODE         VARCHAR2(8);   -- 은행코드
   C_BANK_NAME         VARCHAR2(30);  -- 은행명칭
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_INSEQ             NUMBER;   -- 입금순번
   C_LAST_COUNTS       VARCHAR2(2);  -- 미납입된 마지막약정차수
   C_MAX_COUNTS        VARCHAR2(2);  -- 마지막약정차수
   C_LAST_TIMES        INTEGER;  -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_BUNAMT            NUMBER(30,9);   -- 약정분양금액
   C_LANDAMT           NUMBER(30,9);   -- 약정토지가
   C_BUILDAMT          NUMBER(30,9);   -- 약정건물가
   C_VATAMT            NUMBER(30,9);   -- 약정부가세
   C_MANAGEAMT         NUMBER(30,9);   -- 약정관리비
   C_C_LANDAMT         NUMBER(30,9);   -- 납입인정토지가
   C_C_BUILDAMT        NUMBER(30,9);   -- 납입인정건물가
   C_C_VATAMT          NUMBER(30,9);   -- 납입인정부가세
   C_C_MANAGEAMT       NUMBER(30,9);   -- 납입인정관리비
   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_R_LANDAMT         NUMBER(30,9);   -- 실납입토지가
   C_R_BUILDAMT        NUMBER(30,9);   -- 실납입건물가
   C_R_VATAMT          NUMBER(30,9);   -- 실납입부가세
   C_R_MANAGEAMT       NUMBER(30,9);   -- 실납입관리비
   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_RECEIPTLANDAMT    NUMBER(30,9);   -- 납입토지가
   C_RECEIPTBUILDAMT   NUMBER(30,9);   -- 납입건물가
   C_RECEIPTVATAMT     NUMBER(30,9);   -- 납입부가세
   C_RECEIPTMANAGEAMT  NUMBER(30,9);   -- 납입관리비
   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   -- 
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_DELAY_TAG         VARCHAR2(1);
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_MOVEINSTARTDATE   VARCHAR2(8);
   C_MOVEINENDDATE     VARCHAR2(8);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분
   C_TEMP__AMT         NUMBER(30,9);

   C_TEMPDT            VARCHAR(8);
   C_BLOCKDT           VARCHAR2(8);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   
   v_delay             NUMBER(15); -- 지체보상금
   v_comp              NUMBER(15); -- 국민주택기금
   v_delaytag          VARCHAR2(1); -- 지체보상금납입여부
   v_comptag           VARCHAR2(1); -- 국민주택기금납입여부

   v_proxyamt          NUMBER(15);  --이자대납
   v_predisamt         NUMBER(15);  --선공제
   v_trustamt          NUMBER(15);  --임대위탁

   v_cnt               NUMBER(5);

   UserErr         EXCEPTION;                  -- Select Data Not Found

BEGIN
   /* ------------------------------------------------------------- */
   BEGIN
      DELETE HD_HOUS_INCOME_TEMP
       WHERE SEQ_NUM   = ad_seq_num
         AND CUST_CODE = as_custcode
         AND SEQ       = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'HD_HOUS_INCOME_TEMP : DELETE.');
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      DELETE HD_HOUS_SELLDETAIL_TEMP
       WHERE SEQ_NUM   = ad_seq_num
         AND CUST_CODE = as_custcode
         AND SEQ       = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'HD_HOUS_SELLDETAIL_TEMP : DELETE.');
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      -- 약정사항을 복사한다.
      insert into hd_hous_selldetail_temp
      select ad_seq_num, cust_code, seq, counts, dept_code, housetag, buildno, houseno,
             agreedate, landamt, buildamt, vatamt, bunamt, dc_yn, ac_yn, perpecttag, 
             receiptamt, distribute_rate, slipdt, slipseq, input_duty_id, input_date, chg_duty_id, chg_date, MANAGEAMT
        from hd_hous_selldetail
        where cust_code = as_custcode
          and seq = ai_seq ;

      -- 입금사항을 복사한다.
      insert into hd_hous_income_temp
      select ad_seq_num, cust_code, seq, counts, times, dept_code, housetag, buildno, houseno,
             deposit_no, receiptdate, receiptamt, receiptlandamt, receiptbuildamt, receiptvatamt,
             delaydays, delayamt, discntdays, discntamt, realincomamt, reallandamt, realbuildamt, realvatamt,
             bank_code, bank_name, paytag, incomtype, mod_yn, real_pay_tag, slipdt, slipseq, taxdate, taxseq,
             inseq, 'N', input_duty_id, input_date, chg_duty_id, chg_date, DETAILMOD_YN, OUT_DT,
             OUT_TM, OUT_SEQ, OUT_BANK, REMARK, RECEIPTMANAGEAMT, REALMANAGEAMT, CDNO
        from hd_hous_income
        where cust_code = as_custcode
          and seq = ai_seq ;

      c_input_amt := ad_input_amt;
      -----------------------------------------------------
      -- 사업코드, 분양구분, 동호를 구한다.
      select dept_code, housetag, buildno, houseno, moveinstartdate, moveinenddate, daymonth_tag
        into C_DEPT_CODE,C_HOUSETAG,C_BUILDNO,C_HOUSENO,C_MOVEINSTARTDATE, C_MOVEINENDDATE, C_DAYMONTH
        from hd_hous_sell
        where cust_code = as_custcode
          and seq = ai_seq;

   SELECT NVL(DELAY_BLOCK, '1')
     INTO C_DELAYBLOCK
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = C_DEPT_CODE
      AND HOUSETAG  = C_HOUSETAG;

   /* ------------------------------------------------------------- */
   /* ------------------------------------------------------------- */
   /* 국민주택기금 처리 */
   SELECT CASE WHEN NVL(COUNT(*), 0) > 0 THEN 'Y' ELSE 'N' END
     INTO v_comptag
     FROM HD_HOUS_COMPAMT
    WHERE CUST_CODE = as_custcode
      AND SEQ       = ai_seq
      AND ICHE_YN   = 'Y';  

   IF v_comptag = 'N' THEN BEGIN
      SELECT NVL(SUM(ICHE_AMT), 0)
        INTO v_comp
        FROM HD_HOUS_COMPAMT
       WHERE CUST_CODE = as_custcode
         AND SEQ       = ai_seq
         AND ICHE_YN   = 'N';  
   END; ELSE BEGIN
      v_comp := 0;
   END; END IF;

   IF as_counts >= '90' AND v_comp > 0 THEN BEGIN
      select NVL(MAX(times),0) into C_LAST_TIMES
        from hd_hous_income_temp
       where seq_num   = ad_seq_num
         and cust_code = as_custcode
         and seq       = ai_seq
         and counts    = '90';
      C_LAST_TIMES := C_LAST_TIMES + 1;

      select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0) * -1,
             nvl(bunamt,0), nvl(landamt,0), nvl(buildamt,0), nvl(vatamt,0), nvl(manageamt,0)
        into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT
        from hd_hous_selldetail_temp
       where seq_num = ad_seq_num
         and cust_code = as_custcode
         and seq = ai_seq
         and counts    = '90';
      IF C_DAYS > 0 THEN
         C_DISCOUNT_DAY := C_DAYS;
         C_DELAY_DAY    := 0;
      ELSE
         C_DISCOUNT_DAY := 0;
         C_DELAY_DAY    := C_DAYS * -1;
      END IF;

      IF C_BUNAMT <> 0 THEN
         C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * v_comp) / 10) * 10;
         C_C_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (v_comp - C_C_MANAGEAMT)) / 10) * 10;
         IF C_VATAMT = 0 THEN
            C_C_VATAMT := 0;
         ELSE
            C_C_VATAMT := C_C_BUILDAMT * 0.1;
         END IF;
         C_C_LANDAMT  := v_comp - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
      ELSE
         C_C_LANDAMT   := 0;
         C_C_BUILDAMT  := 0;
         C_C_VATAMT    := 0;
         C_C_MANAGEAMT := 0;
      END IF;

      INSERT INTO HD_HOUS_INCOME_TEMP
                (SEQ_NUM,        CUST_CODE,      SEQ,             COUNTS,        TIMES,
                 DEPT_CODE,      HOUSETAG,       BUILDNO,         HOUSENO,
                 DEPOSIT_NO,     RECEIPTDATE,
                 RECEIPTAMT,     RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                 DELAYDAYS,      DELAYAMT,       DISCNTDAYS,      DISCNTAMT,
                 REALINCOMAMT,   REALLANDAMT,    REALBUILDAMT,    REALVATAMT,
                 BANK_CODE,      BANK_NAME,      PAYTAG,          INCOMTYPE,
                 MOD_YN,         REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                 TAXDATE,        TAXSEQ,         INSEQ,           CALC_YN,
                 INPUT_DUTY_ID,  INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                 DETAILMOD_YN )
         VALUES ( ad_seq_num,    as_custcode,    ai_seq,          '90',          C_LAST_TIMES,
                  C_DEPT_CODE,   C_HOUSETAG,     C_BUILDNO,       C_HOUSENO,
                  null,          as_input_date,
                  v_comp,        C_C_LANDAMT,    C_C_BUILDAMT,    C_C_VATAMT,    C_C_MANAGEAMT,
                  0,             0,              C_DISCOUNT_DAY,  0,
                  0,             0,              0,               0,
                  null,          null,           null,            null,
                  'N',           'N',            null,            null,
                  null,          null,           null,            'Y',
                  null,          TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'), null, null,
                  'N' );
    END; END IF;

   /* ------------------------------------------------------------- */
   /* 지체보상금처리 */
   SELECT CASE WHEN NVL(COUNT(*), 0) > 0 THEN 'Y' ELSE 'N' END
     INTO v_delaytag
     FROM HD_HOUS_INDEMINITY
    WHERE CUST_CODE = as_custcode
      AND SEQ       = ai_seq
      AND ICHE_YN   = 'Y';  

   IF v_delaytag = 'N' THEN BEGIN
      SELECT NVL(SUM(DELAY_INDEMINITY), 0)
        INTO v_delay
        FROM HD_HOUS_INDEMINITY
       WHERE CUST_CODE = as_custcode
         AND SEQ       = ai_seq
         AND ICHE_YN   = 'N';  
   END; ELSE BEGIN
      v_delay := 0;
   END; END IF;

   IF as_counts >= '90' AND v_delay > 0 THEN BEGIN
      select NVL(MAX(times),0) into C_LAST_TIMES
        from hd_hous_income_temp
       where seq_num   = ad_seq_num
         and cust_code = as_custcode
         and seq       = ai_seq
         and counts    = '90';
      C_LAST_TIMES := C_LAST_TIMES + 1;

      select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0) * -1,
             nvl(bunamt,0), nvl(landamt,0), nvl(buildamt,0), nvl(vatamt,0), nvl(manageamt,0)
        into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT
        from hd_hous_selldetail_temp
       where seq_num = ad_seq_num
         and cust_code = as_custcode
         and seq = ai_seq
         and counts    = '90';
      IF C_DAYS > 0 THEN
         C_DISCOUNT_DAY := C_DAYS;
         C_DELAY_DAY    := 0;
      ELSE
         C_DISCOUNT_DAY := 0;
         C_DELAY_DAY    := C_DAYS * -1;
      END IF;

      IF C_BUNAMT <> 0 THEN
         C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * v_delay) / 10) * 10;
         C_C_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (v_delay - C_C_MANAGEAMT)) / 10) * 10;
         IF C_VATAMT = 0 THEN
            C_C_VATAMT := 0;
         ELSE
            C_C_VATAMT  := C_C_BUILDAMT * 0.1;
         END IF;
         C_C_LANDAMT  := v_delay - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
      ELSE
         C_C_LANDAMT   := 0;
         C_C_BUILDAMT  := 0;
         C_C_VATAMT    := 0;
         C_C_MANAGEAMT := 0;
      END IF;

      BEGIN
         INSERT INTO HD_HOUS_INCOME_TEMP
                   (SEQ_NUM,        CUST_CODE,      SEQ,             COUNTS,        TIMES,
                    DEPT_CODE,      HOUSETAG,       BUILDNO,         HOUSENO,
                    DEPOSIT_NO,     RECEIPTDATE,
                    RECEIPTAMT,     RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                    DELAYDAYS,      DELAYAMT,       DISCNTDAYS,      DISCNTAMT,
                    REALINCOMAMT,   REALLANDAMT,    REALBUILDAMT,    REALVATAMT,
                    BANK_CODE,      BANK_NAME,      PAYTAG,          INCOMTYPE,
                    MOD_YN,         REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                    TAXDATE,        TAXSEQ,         INSEQ,           CALC_YN,
                    INPUT_DUTY_ID,  INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                    DETAILMOD_YN )
            VALUES ( ad_seq_num,    as_custcode,    ai_seq,          '90',          C_LAST_TIMES,
                     C_DEPT_CODE,   C_HOUSETAG,     C_BUILDNO,       C_HOUSENO,
                     null,          as_input_date,
                     v_delay,       C_C_LANDAMT,    C_C_BUILDAMT,    C_C_VATAMT,    C_C_MANAGEAMT,
                     0,             0,              C_DISCOUNT_DAY,  0,
                     0,             0,              0,               0,
                     null,          null,           null,            null,
                     'N',           'N',            null,            null,
                     null,          null,           null,            'Y',
                     null,          TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'), null, null,
                     'N' );
         EXCEPTION
              WHEN OTHERS THEN
                   dbms_output.put_line(sqlerrm); 
                   RAISE_APPLICATION_ERROR(-20002, 'ERR_INSERT_01: HD_HOUS_INCOME_TEMP' || sqlerrm);
                   ROLLBACK;
                   RETURN;
      END;
   END; END IF;

   /* ------------------------------------------------------------- */
   /* 이자대납처리 */
   v_proxyamt := 0;
   SELECT NVL(MAX(A.PROXYAMT), 0)
     INTO v_proxyamt
     FROM HD_HOUS_SELL A,
          HD_CODE_HOUSE B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND A.CUST_CODE = as_custcode
      AND A.SEQ       = ai_seq
      AND A.PROXY_TAG = 'Y'
      AND B.PROXY_TAG = 'Y'
      AND A.PROXYAMT  > 0;

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_INCOME_TEMP
    WHERE SEQ_NUM   = ad_seq_num
      AND CUST_CODE = as_custcode
      AND SEQ       = ai_seq
      AND PAYTAG    = 'D';

   IF as_counts >= '90' AND v_proxyamt > 0 AND v_cnt < 1 THEN BEGIN
      select NVL(MAX(times),0) into C_LAST_TIMES
        from hd_hous_income_temp
       where seq_num   = ad_seq_num
         and cust_code = as_custcode
         and seq       = ai_seq
         and counts    = '90';
      C_LAST_TIMES := C_LAST_TIMES + 1;

      select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0) * -1,
             nvl(bunamt,0), nvl(landamt,0), nvl(buildamt,0), nvl(vatamt,0), nvl(manageamt,0)
        into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT
        from hd_hous_selldetail_temp
       where seq_num = ad_seq_num
         and cust_code = as_custcode
         and seq = ai_seq
         and counts    = '90';
      IF C_DAYS > 0 THEN
         C_DISCOUNT_DAY := C_DAYS;
         C_DELAY_DAY    := 0;
      ELSE
         C_DISCOUNT_DAY := 0;
         C_DELAY_DAY    := C_DAYS * -1;
      END IF;

      IF C_BUNAMT <> 0 THEN
         C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * v_proxyamt) / 10) * 10;
         C_C_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (v_proxyamt - C_C_MANAGEAMT)) / 10) * 10;
         IF C_VATAMT = 0 THEN
            C_C_VATAMT := 0;
         ELSE
            C_C_VATAMT  := C_C_BUILDAMT * 0.1;
         END IF;
         C_C_LANDAMT  := v_proxyamt - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
      ELSE
         C_C_LANDAMT   := 0;
         C_C_BUILDAMT  := 0;
         C_C_VATAMT    := 0;
         C_C_MANAGEAMT := 0;
      END IF;

      INSERT INTO HD_HOUS_INCOME_TEMP
                (SEQ_NUM,        CUST_CODE,      SEQ,             COUNTS,        TIMES,
                 DEPT_CODE,      HOUSETAG,       BUILDNO,         HOUSENO,
                 DEPOSIT_NO,     RECEIPTDATE,
                 RECEIPTAMT,     RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                 DELAYDAYS,      DELAYAMT,       DISCNTDAYS,      DISCNTAMT,
                 REALINCOMAMT,   REALLANDAMT,    REALBUILDAMT,    REALVATAMT,
                 BANK_CODE,      BANK_NAME,      PAYTAG,          INCOMTYPE,
                 MOD_YN,         REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                 TAXDATE,        TAXSEQ,         INSEQ,           CALC_YN,
                 INPUT_DUTY_ID,  INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                 DETAILMOD_YN )
         VALUES ( ad_seq_num,    as_custcode,    ai_seq,          '90',          C_LAST_TIMES,
                  C_DEPT_CODE,   C_HOUSETAG,     C_BUILDNO,       C_HOUSENO,
                  null,          as_input_date,
                  v_proxyamt,    C_C_LANDAMT,    C_C_BUILDAMT,    C_C_VATAMT,    C_C_MANAGEAMT,
                  0,             0,              C_DISCOUNT_DAY,  v_proxyamt,
                  0,             0,              0,               0,
                  null,          null,           'D',             null,
                  'N',           'N',            null,            null,
                  null,          null,           null,            'Y',
                  null,          TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'), null, null,
                  'N' );
   END; END IF;

   /* ------------------------------------------------------------- */
   /* 선공제처리 */
   v_predisamt := 0;
   SELECT NVL(MAX(A.PREDISAMT), 0)
     INTO v_predisamt
     FROM HD_HOUS_SELL A,
          HD_CODE_HOUSE B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND A.CUST_CODE = as_custcode
      AND A.SEQ       = ai_seq
      AND A.PREDIS_TAG = 'Y'
      AND B.PREDIS_TAG = 'Y'
      AND A.PREDISAMT  > 0;

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_INCOME_TEMP
    WHERE SEQ_NUM   = ad_seq_num
      AND CUST_CODE = as_custcode
      AND SEQ       = ai_seq
      AND PAYTAG    = 'E';

   IF as_counts >= '90' AND v_predisamt > 0 AND v_cnt < 1 THEN BEGIN
      select NVL(MAX(times),0) into C_LAST_TIMES
        from hd_hous_income_temp
       where seq_num   = ad_seq_num
         and cust_code = as_custcode
         and seq       = ai_seq
         and counts    = '90';
      C_LAST_TIMES := C_LAST_TIMES + 1;

      select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0) * -1,
             nvl(bunamt,0), nvl(landamt,0), nvl(buildamt,0), nvl(vatamt,0), nvl(manageamt,0)
        into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT
        from hd_hous_selldetail_temp
       where seq_num = ad_seq_num
         and cust_code = as_custcode
         and seq = ai_seq
         and counts    = '90';
      IF C_DAYS > 0 THEN
         C_DISCOUNT_DAY := C_DAYS;
         C_DELAY_DAY    := 0;
      ELSE
         C_DISCOUNT_DAY := 0;
         C_DELAY_DAY    := C_DAYS * -1;
      END IF;

      IF C_BUNAMT <> 0 THEN
         C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * v_predisamt) / 10) * 10;
         C_C_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (v_predisamt - C_C_MANAGEAMT)) / 10) * 10;
         IF C_VATAMT = 0 THEN
            C_C_VATAMT := 0;
         ELSE
            C_C_VATAMT  := C_C_BUILDAMT * 0.1;
         END IF;
         C_C_LANDAMT  := v_predisamt - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
      ELSE
         C_C_LANDAMT   := 0;
         C_C_BUILDAMT  := 0;
         C_C_VATAMT    := 0;
         C_C_MANAGEAMT := 0;
      END IF;

      INSERT INTO HD_HOUS_INCOME_TEMP
                (SEQ_NUM,        CUST_CODE,      SEQ,             COUNTS,        TIMES,
                 DEPT_CODE,      HOUSETAG,       BUILDNO,         HOUSENO,
                 DEPOSIT_NO,     RECEIPTDATE,
                 RECEIPTAMT,     RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                 DELAYDAYS,      DELAYAMT,       DISCNTDAYS,      DISCNTAMT,
                 REALINCOMAMT,   REALLANDAMT,    REALBUILDAMT,    REALVATAMT,
                 BANK_CODE,      BANK_NAME,      PAYTAG,          INCOMTYPE,
                 MOD_YN,         REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                 TAXDATE,        TAXSEQ,         INSEQ,           CALC_YN,
                 INPUT_DUTY_ID,  INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                 DETAILMOD_YN )
         VALUES ( ad_seq_num,    as_custcode,    ai_seq,          '90',          C_LAST_TIMES,
                  C_DEPT_CODE,   C_HOUSETAG,     C_BUILDNO,       C_HOUSENO,
                  null,          as_input_date,
                  v_predisamt,   C_C_LANDAMT,    C_C_BUILDAMT,    C_C_VATAMT,    C_C_MANAGEAMT,
                  0,             0,              C_DISCOUNT_DAY,  v_predisamt,
                  0,             0,              0,               0,
                  null,          null,           'E',             null,
                  'N',           'N',            null,            null,
                  null,          null,           null,            'Y',
                  null,          TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'), null, null,
                  'N' );
   END; END IF;

   /* ------------------------------------------------------------- */
   /* 임대위탁처리 */
   v_trustamt := 0;
   SELECT NVL(MAX(A.TRUSTAMT), 0)
     INTO v_trustamt
     FROM HD_HOUS_SELL A,
          HD_CODE_HOUSE B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND A.CUST_CODE = as_custcode
      AND A.SEQ       = ai_seq
      AND A.TRUST_TAG = 'Y'
      AND B.TRUST_TAG = 'Y'
      AND A.TRUSTAMT  > 0;

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_INCOME_TEMP
    WHERE SEQ_NUM   = ad_seq_num
      AND CUST_CODE = as_custcode
      AND SEQ       = ai_seq
      AND PAYTAG    = 'F';

   IF as_counts >= '90' AND v_trustamt > 0 AND v_cnt < 1 THEN BEGIN
      select NVL(MAX(times),0) into C_LAST_TIMES
        from hd_hous_income_temp
       where seq_num   = ad_seq_num
         and cust_code = as_custcode
         and seq       = ai_seq
         and counts    = '90';
      C_LAST_TIMES := C_LAST_TIMES + 1;

      select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0) * -1,
             nvl(bunamt,0), nvl(landamt,0), nvl(buildamt,0), nvl(vatamt,0), nvl(manageamt,0)
        into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT
        from hd_hous_selldetail_temp
       where seq_num = ad_seq_num
         and cust_code = as_custcode
         and seq = ai_seq
         and counts    = '90';
      IF C_DAYS > 0 THEN
         C_DISCOUNT_DAY := C_DAYS;
         C_DELAY_DAY    := 0;
      ELSE
         C_DISCOUNT_DAY := 0;
         C_DELAY_DAY    := C_DAYS * -1;
      END IF;

      IF C_BUNAMT <> 0 THEN
         C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * v_trustamt) / 10) * 10;
         C_C_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (v_trustamt - C_C_MANAGEAMT)) / 10) * 10;
         IF C_VATAMT = 0 THEN
            C_C_VATAMT := 0;
         ELSE
            C_C_VATAMT  := C_C_BUILDAMT * 0.1;
         END IF;
         C_C_LANDAMT  := v_trustamt - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
      ELSE
         C_C_LANDAMT   := 0;
         C_C_BUILDAMT  := 0;
         C_C_VATAMT    := 0;
         C_C_MANAGEAMT := 0;
      END IF;

      INSERT INTO HD_HOUS_INCOME_TEMP
                (SEQ_NUM,        CUST_CODE,      SEQ,             COUNTS,        TIMES,
                 DEPT_CODE,      HOUSETAG,       BUILDNO,         HOUSENO,
                 DEPOSIT_NO,     RECEIPTDATE,
                 RECEIPTAMT,     RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                 DELAYDAYS,      DELAYAMT,       DISCNTDAYS,      DISCNTAMT,
                 REALINCOMAMT,   REALLANDAMT,    REALBUILDAMT,    REALVATAMT,
                 BANK_CODE,      BANK_NAME,      PAYTAG,          INCOMTYPE,
                 MOD_YN,         REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                 TAXDATE,        TAXSEQ,         INSEQ,           CALC_YN,
                 INPUT_DUTY_ID,  INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                 DETAILMOD_YN )
         VALUES ( ad_seq_num,    as_custcode,    ai_seq,          '90',          C_LAST_TIMES,
                  C_DEPT_CODE,   C_HOUSETAG,     C_BUILDNO,       C_HOUSENO,
                  null,          as_input_date,
                  v_trustamt,    C_C_LANDAMT,    C_C_BUILDAMT,    C_C_VATAMT,    C_C_MANAGEAMT,
                  0,             0,              C_DISCOUNT_DAY,  v_trustamt,
                  0,             0,              0,               0,
                  null,          null,           'F',             null,
                  'N',           'N',            null,            null,
                  null,          null,           null,            'Y',
                  null,          TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'), null, null,
                  'N' );
   END; END IF;

   /* ------------------------------------------------------------- */
   /* ------------------------------------------------------------- */
      -- 마지막 약정차수
      select NVL(max(counts), '90')
        into C_MAX_COUNTS
        from HD_HOUS_SELLDETAIL_TEMP
        where seq_num = ad_seq_num
          and cust_code = as_custcode
          and seq = ai_seq;
      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      select COUNT(*) into C_CNT
        from hd_hous_selldetail_temp
        where seq_num = ad_seq_num
          and cust_code = as_custcode
          and seq = ai_seq
          and perpecttag = 'N';

      if C_CNT > 0 THEN
         select min(counts) into C_LAST_COUNTS
           from hd_hous_selldetail_temp
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq = ai_seq
             and perpecttag = 'N';

         select NVL(MAX(times),0) into C_LAST_TIMES
           from hd_hous_income_temp
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         C_LAST_TIMES := C_LAST_TIMES + 1;
      else
         if ad_input_amt = 99999999999 then
            GOTO EXIT_ROUTINE;
         end if;
         select count(*) into C_CNT
           from hd_hous_selldetail_temp
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq = ai_seq ;
         if C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다. 동호==>' || C_BUILDNO || '-' || C_HOUSENO;
            GOTO EXIT_ROUTINE;
         end if;
  
         select max(counts) into C_LAST_COUNTS
           from hd_hous_selldetail_temp
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq = ai_seq;

         select NVL(MAX(times),0) into C_LAST_TIMES
           from hd_hous_income_temp
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         if C_LAST_TIMES < 90 THEN
            C_LAST_TIMES := 90;
         else
            C_LAST_TIMES := C_LAST_TIMES + 1;
         end if;
      end if;

      -- LOOP 시작
      LOOP
         if C_LAST_COUNTS > as_counts then
            EXIT;
         end if;
         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         select nvl((to_date(agreedate, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0),
                nvl(bunamt,0),nvl(landamt,0),nvl(buildamt,0),nvl(vatamt,0),nvl(manageamt,0),
                agreedate,dc_yn,ac_yn
           into C_DAYS,C_BUNAMT,C_LANDAMT,C_BUILDAMT,C_VATAMT,C_MANAGEAMT,
                C_AGREEDATE,C_DC_YN,C_AC_YN
           from hd_hous_selldetail_temp
          where seq_num = ad_seq_num
            and cust_code = as_custcode
            and seq = ai_seq
            and counts = C_LAST_COUNTS;

         if C_DAYS > 0 THEN -- 연체료일 경우
            -- 잔금일경우 입주기간만큼 일수제외
            if C_LAST_COUNTS = '90' then
               if nvl(C_MOVEINENDDATE, 'X') <> 'X' and C_AGREEDATE < C_MOVEINENDDATE then
                  C_TEMP_DAYS := nvl((to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_MOVEINENDDATE, 'YYYYMMDD')) * -1,0);
                  if C_DAYS <= C_TEMP_DAYS then
                     C_DAYS := 0;
                  else 
                     C_AGREEDATE := C_MOVEINENDDATE;
                     C_DAYS := nvl((to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD')) * -1,0);
                  end if;
               end if;
            end if;

            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'Y');
            IF C_TEMPDT >= as_input_date THEN
               C_DAYS := 0;
            END IF;
         end if;

         if C_DAYS < 0 THEN -- 할인료일 경우
            if C_LAST_COUNTS = '90' and
               nvl(C_MOVEINSTARTDATE, 'X') <> 'X' and nvl(C_MOVEINENDDATE, 'X') <> 'X' and
               as_input_date >= C_MOVEINSTARTDATE and as_input_date <= C_MOVEINENDDATE then begin
               C_CNT := 0;
               C_DAYS := 0;
            end; else begin
               select count(*),nvl(max(gong_days),0) into C_CNT,C_TEMP_CNT
                 from hd_refer_holiday
                 where dept_code = C_DEPT_CODE
                   and housetag = C_HOUSETAG
                   and ad_tag = '2'
                   and rate_tag = '1'
                   and holiday = C_AGREEDATE;
               if C_CNT > 0 then
                  C_CNT := C_DAYS * -1;
                  if C_CNT <= C_TEMP_CNT then
                     C_DAYS := 0;
                  end if;
               end if;
            end; end if;   
         end if;

         -- 기납입금액누계를 구한다.
         select nvl(sum(receiptamt),0),nvl(sum(receiptlandamt),0),nvl(sum(receiptbuildamt),0),nvl(sum(receiptvatamt),0),nvl(sum(receiptmanageamt),0)
           into C_RECEIPTAMT,C_RECEIPTLANDAMT,C_RECEIPTBUILDAMT,C_RECEIPTVATAMT, C_RECEIPTMANAGEAMT
           from hd_hous_income_temp
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq = ai_seq
             and counts = C_LAST_COUNTS;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_BUNAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         if C_LAST_TIMES > 89 then
            C_TEMP_AMT := c_input_amt;
            c_input_amt := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         else
            if (C_DAYS = 0) THEN
               if C_WORK_AMT < c_input_amt THEN
                  C_TEMP_AMT   := C_WORK_AMT;
                  c_input_amt := c_input_amt - C_WORK_AMT;
               else
                  C_TEMP_AMT   := c_input_amt;
                  c_input_amt := 0;
               end if;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            else
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               if C_DAYS > 0 THEN 
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  C_DELAY_DAY   := C_DAYS;
                  if C_AC_YN = 'Y' then
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     IF (C_LAST_COUNTS = '90' AND C_MOVEINENDDATE IS NOT NULL AND C_AGREEDATE < C_MOVEINENDDATE) THEN
                        C_MONTHS := CASE WHEN C_DAYMONTH = '2'
                                         THEN months_between(to_date(as_input_date, 'YYYYMMDD'),to_date(C_MOVEINENDDATE, 'YYYYMMDD'))
                                         ELSE to_date(as_input_date, 'YYYYMMDD') - to_date(C_MOVEINENDDATE, 'YYYYMMDD')
                                    END;
                        C_BLOCKDT := C_MOVEINENDDATE;
                     ELSE
                        C_MONTHS := CASE WHEN C_DAYMONTH = '2'
                                         THEN months_between(to_date(as_input_date, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'))
                                         ELSE to_date(as_input_date, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD')
                                    END;
                        C_BLOCKDT := C_AGREEDATE;
                     END IF;                    

                     /* ----------------------------------------- */
                     /* ----------------------------------------- */
                     IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                        OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DELAY_CUR%NOTFOUND;
                           if C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE then
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              EXIT;
                           end if;
                           if C_AGREEDATE >= C_STARTDATE then
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                           elsif as_input_date <= C_ENDDATE then
                              C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           else
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           end if;
                           C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                        END LOOP;
                        CLOSE DELAY_CUR;
                     ELSE --구간별 연체율 계산방식

IF C_DAYMONTH != '1' THEN
   RAISE_APPLICATION_ERROR(-20002, '구간별 연체료 계산현장의 연체료는 월계산 방법을 지원하지 않습니다');
   ROLLBACK;
   RETURN;
END IF;

-->>>                        C_TEMP_RATE := F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(c_input_amt)), 'RATE');
                            C_TEMP_RATE := F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(c_input_amt)), 'RATE');

/*
                        SELECT NVL(SUM(RT), 0)
                          INTO C_TEMP_RATE
                          FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) AS RT,
                                       DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                  FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                               NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                               CASE WHEN A.TOT < B.START_DAYS
                                                    THEN 0
                                                    ELSE CASE WHEN A.TOT > B.END_DAYS
                                                              THEN B.END_DAYS - B.START_DAYS + 1
                                                              ELSE A.DY - B.START_DAYS + 1
                                                         END
                                               END DDY
                                          FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                        DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                                MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                       CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                            THEN 0
                                                            ELSE 1
                                                       END AS DY
                                                  FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                               STARTDATE, ENDDATE, ADT, IDT, TOT
                                                          FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                  FROM HD_HOUS_RATE_DELAY A,
                                                                       (SELECT C_BLOCKDT AS ADT,
                                                                               as_input_date AS IDT,
                                                                               DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                       MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                          FROM DUAL
                                                                       ) B
                                                                 WHERE A.CUST_CODE = as_custcode
                                                                   AND A.SEQ       = ai_seq
                                                                   AND A.ENDDATE   >= B.ADT
                                                                   AND A.STARTDATE <= B.IDT
                                                               )
                                                       )
                                               ) A,
                                               HD_HOUS_RATE_DELAY B
                                         WHERE B.CUST_CODE = as_custcode
                                           AND B.SEQ       = ai_seq
                                           AND B.STARTDATE = A.STARTDATE
                                           AND B.ENDDATE   = A.ENDDATE
                                       )
                                 WHERE DDY > 0
                               );
*/
                     END IF;

                     /* ----------------------------------------- */
                     /* ----------------------------------------- */
                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     if C_TEMP_RATE <> 0 then
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     else
                        C_TEMP_AMT := 0;
                     end if;

                     if C_WORK_AMT <= C_TEMP_AMT then
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                           OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                           LOOP
                              FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                              EXIT WHEN DELAY_CUR%NOTFOUND;

                              C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DELAYUNIT, '0')), 1);

                              if C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE then
                                 C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                                 if C_DELAYCUT = '1' then
                                    C_DELAY_AMT := trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 elsif C_DELAYCUT = '2' then
                                    C_DELAY_AMT := trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 else
                                    C_DELAY_AMT := round(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 end if;
                                 EXIT;
                              end if;
                              if C_AGREEDATE >= C_STARTDATE then
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                              elsif as_input_date <= C_ENDDATE then
                                 C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              else
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              end if;
                              C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                              if C_DELAYCUT = '1' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DELAYCUT = '2' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DELAY_AMT := C_DELAY_AMT + round(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                           END LOOP;
                           CLOSE DELAY_CUR;
                        ELSE --구간별 연체율 계산방식

-->>>                           C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_WORK_AMT)));
                            C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_WORK_AMT)));
/*
                           SELECT NVL(SUM(CASE DELAYCUT WHEN '1' THEN TRUNC(AMT / DUNIT)
                                                        WHEN '2' THEN TRUNC((AMT / DUNIT) + 0.9)
                                                                 ELSE ROUND(AMT / DUNIT)
                                          END * DUNIT), 0)
                             INTO C_DELAY_AMT
                             FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) * C_WORK_AMT AS AMT,
                                          DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                     FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                                  NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                                  CASE WHEN A.TOT < B.START_DAYS
                                                       THEN 0
                                                       ELSE CASE WHEN A.TOT > B.END_DAYS
                                                                 THEN B.END_DAYS - B.START_DAYS + 1
                                                                 ELSE A.DY - B.START_DAYS + 1
                                                            END
                                                  END DDY
                                             FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                          DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                                  MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                          CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                               THEN 0
                                                               ELSE 1
                                                          END AS DY
                                                     FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                                  STARTDATE, ENDDATE, ADT, IDT, TOT
                                                             FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                     FROM HD_HOUS_RATE_DELAY A,
                                                                          (SELECT C_BLOCKDT AS ADT,
                                                                                  as_input_date AS IDT,
                                                                                  DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                          MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                             FROM DUAL
                                                                          ) B
                                                                    WHERE A.CUST_CODE = as_custcode
                                                                      AND A.SEQ       = ai_seq
                                                                      AND A.ENDDATE   >= B.ADT
                                                                      AND A.STARTDATE <= B.IDT
                                                                  )
                                                          )
                                                  ) A,
                                                  HD_HOUS_RATE_DELAY B
                                            WHERE B.CUST_CODE = as_custcode
                                              AND B.SEQ       = ai_seq
                                              AND B.STARTDATE = A.STARTDATE
                                              AND B.ENDDATE   = A.ENDDATE
                                          )
                                    WHERE DDY > 0
                                  );
*/
                        END IF;
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                     else
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        IF C_DELAYBLOCK = '1' THEN --기존연체율 계산방식
                           OPEN DELAY_CUR(C_AGREEDATE,C_MONTHS);
                           LOOP
                              FETCH DELAY_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                              EXIT WHEN DELAY_CUR%NOTFOUND;
                              C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DELAYUNIT, '0')), 1);
                              if C_AGREEDATE >= C_STARTDATE and as_input_date <= C_ENDDATE then
                                 C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                                 if C_DELAYCUT = '1' then
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 elsif C_DELAYCUT = '2' then
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 else
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 end if;
                                 EXIT;
                              end if;
                              if C_AGREEDATE >= C_STARTDATE then
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD') ,0);
                              elsif as_input_date <= C_ENDDATE then
                                 C_TEMP_CNT := nvl(to_date(as_input_date, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              else
                                 C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              end if;
                              C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                              if C_DELAYCUT = '1' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DELAYCUT = '2' then
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                           END LOOP;
                           CLOSE DELAY_CUR;
                        ELSE --구간별 연체율 계산방식
-->>>                           C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAY_BLOCK (as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_TEMP_AMT)));
                            C_DELAY_AMT := C_DELAY_AMT + F_HD_GET_DELAYRANGE(as_custcode, TRIM(TO_CHAR(ai_seq)), C_AGREEDATE, as_input_date, TRIM(TO_CHAR(C_TEMP_AMT)));
/*
                           SELECT NVL(SUM(CASE DELAYCUT WHEN '1' THEN TRUNC(AMT / DUNIT)
                                                        WHEN '2' THEN TRUNC((AMT / DUNIT) + 0.9)
                                                                 ELSE ROUND(AMT / DUNIT)
                                          END * DUNIT), 0)
                             INTO C_DELAY_AMT
                             FROM (SELECT (DDY / 365) * (DELAYRATE / 100) * (DY / TOT) * C_TEMP_AMT AS AMT,
                                          DDY, DY, TOT, DELAYRATE, DELAYCUT, DUNIT
                                     FROM (SELECT A.DY, A.TOT, B.DELAYRATE, B.DELAYCUT,
                                                  NVL(TO_NUMBER(RPAD('1', B.DELAYUNIT, '0')), 1) AS DUNIT,
                                                  CASE WHEN A.TOT < B.START_DAYS
                                                       THEN 0
                                                       ELSE CASE WHEN A.TOT > B.END_DAYS
                                                                 THEN B.END_DAYS - B.START_DAYS + 1
                                                                 ELSE A.DY - B.START_DAYS + 1
                                                            END
                                                  END DDY
                                             FROM (SELECT STARTDATE, ENDDATE, TOT,
                                                          DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(FRDT, TODT),
                                                                                  MONTHS_BETWEEN(TO_DATE(TODT,'YYYYMMDD'), TO_DATE(FRDT, 'YYYYMMDD'))) +
                                                          CASE WHEN FRDT || TODT = MIN(FRDT || TODT) OVER (ORDER BY FRDT || TODT)
                                                               THEN 0
                                                               ELSE 1
                                                          END AS DY
                                                     FROM (SELECT GREATEST(STARTDATE, ADT) AS FRDT, LEAST(ENDDATE, IDT) AS TODT,
                                                                  STARTDATE, ENDDATE, ADT, IDT, TOT
                                                             FROM (SELECT DISTINCT A.STARTDATE, A.ENDDATE, B.ADT, B.IDT, B.TOT
                                                                     FROM HD_HOUS_RATE_DELAY A,
                                                                          (SELECT C_BLOCKDT AS ADT,
                                                                                  as_input_date AS IDT,
                                                                                  DECODE(C_DAYMONTH, '1', F_HD_DIFFDAY(C_BLOCKDT, as_input_date),
                                                                                                          MONTHS_BETWEEN(TO_DATE(as_input_date,'YYYYMMDD'), TO_DATE(C_BLOCKDT, 'YYYYMMDD'))) AS TOT
                                                                             FROM DUAL
                                                                          ) B
                                                                    WHERE A.CUST_CODE = as_custcode
                                                                      AND A.SEQ       = ai_seq
                                                                      AND A.ENDDATE   >= B.ADT
                                                                      AND A.STARTDATE <= B.IDT
                                                                  )
                                                          )
                                                  ) A,
                                                  HD_HOUS_RATE_DELAY B
                                            WHERE B.CUST_CODE = as_custcode
                                              AND B.SEQ       = ai_seq
                                              AND B.STARTDATE = A.STARTDATE
                                              AND B.ENDDATE   = A.ENDDATE
                                          )
                                    WHERE DDY > 0
                                  );
*/
                        END IF;
                        /* ----------------------------------------- */
                        /* ----------------------------------------- */
                        C_TEMP_AMT   := c_input_amt - C_DELAY_AMT;
                        c_input_amt := 0;
                     end if;
                  else
                     if C_DELAY_TAG = 'Y' then -- 연체료 직접 입력이면
                        if (C_WORK_AMT + C_DELAY_AMT) < c_input_amt THEN
                           C_TEMP_AMT  := C_WORK_AMT;
                           c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                        else
                           C_TEMP_AMT   := c_input_amt;
                           c_input_amt := 0;
                        end if;
                     else
                        if C_WORK_AMT < c_input_amt THEN
                           C_TEMP_AMT   := C_WORK_AMT;
                           c_input_amt := c_input_amt - C_WORK_AMT;
                        else
                           C_TEMP_AMT   := c_input_amt;
                           c_input_amt := 0;
                        end if;
                     end if;
                  end if;
               else
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  C_DISCOUNT_DAY   := C_DAYS * -1;
                  if C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DISCOUNT_CUR(C_AGREEDATE);
                     LOOP
                        FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DISCOUNT_CUR%NOTFOUND;
                        if C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE then
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        end if;
                        if as_input_date >= C_STARTDATE then
                           C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                        elsif C_AGREEDATE <= C_ENDDATE then
                           C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                        else
                           C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                        end if;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DISCOUNT_CUR;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     if C_TEMP_RATE <> 0 then
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     else
                        C_TEMP_AMT := 0;
                     end if;
                     if C_WORK_AMT <= C_TEMP_AMT then
                        OPEN DISCOUNT_CUR(C_AGREEDATE);
                        LOOP
                           FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DISCOUNT_CUR%NOTFOUND;

                           C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DISCNTUNIT, '0')), 1);

                           if C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE then
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              if C_DISCNTCUT = '1' then
                                 C_DISCOUNT_AMT := trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DISCNTCUT = '2' then
                                 C_DISCOUNT_AMT := trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DISCOUNT_AMT := round((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                              EXIT;
                           end if;
                           if as_input_date >= C_STARTDATE then
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                           elsif C_AGREEDATE <= C_ENDDATE then
                              C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           else
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           end if;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           if C_DISCNTCUT = '1' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           elsif C_DISCNTCUT = '2' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                           else
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           end if;
                        END LOOP;
                        CLOSE DISCOUNT_CUR;
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT - C_DISCOUNT_AMT);
                     else
                        OPEN DISCOUNT_CUR(C_AGREEDATE);
                        LOOP
                           FETCH DISCOUNT_CUR INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DISCOUNT_CUR%NOTFOUND;

                           C_COMP_UNIT := NVL(TO_NUMBER(RPAD('1', C_DISCNTUNIT, '0')), 1);

                           if C_AGREEDATE <= C_ENDDATE and as_input_date >= C_STARTDATE then
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              if C_DISCNTCUT = '1' then
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              elsif C_DISCNTCUT = '2' then
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              else
                                 C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              end if;
                              EXIT;
                           end if;
                           if as_input_date >= C_STARTDATE then
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(as_input_date, 'YYYYMMDD') ,0);
                           elsif C_AGREEDATE <= C_ENDDATE then
                              C_TEMP_CNT := nvl(to_date(C_AGREEDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           else
                              C_TEMP_CNT := nvl(to_date(C_ENDDATE, 'YYYYMMDD') - to_date(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           end if;
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           if C_DISCNTCUT = '1' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           elsif C_DISCNTCUT = '2' then
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                           else
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           end if;
                        END LOOP;
                        CLOSE DISCOUNT_CUR;
                        C_TEMP_AMT   := c_input_amt + C_DISCOUNT_AMT;
                        c_input_amt := 0;
                     end if;
                  else
                     if C_WORK_AMT < c_input_amt THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        c_input_amt := c_input_amt - C_WORK_AMT;
                     else
                        C_TEMP_AMT   := c_input_amt;
                        c_input_amt := 0;
                     end if;
                  end if;
               end if;
            end if;
         end if;
         ----------------------------------------------------------------------------
         -- 납입금액을 가지고 토지,건물,부가세를 구한다.
         -----------------------------------------------------------------------------
         if C_WORK_AMT = C_TEMP_AMT THEN  -- 완납일경우 (약정 - 납입누계)
            C_C_LANDAMT   := C_LANDAMT   - C_RECEIPTLANDAMT;
            C_C_BUILDAMT  := C_BUILDAMT  - C_RECEIPTBUILDAMT;
            C_C_VATAMT    := C_VATAMT    - C_RECEIPTVATAMT;
            C_C_MANAGEAMT := C_MANAGEAMT - C_RECEIPTMANAGEAMT;
            C_R_RECEIPTAMT := C_TEMP_AMT;   -- 실납입금액
            C_R_LANDAMT    := C_C_LANDAMT;
            C_R_BUILDAMT   := C_C_BUILDAMT;
            C_R_VATAMT     := C_C_VATAMT;
            C_R_MANAGEAMT  := C_C_MANAGEAMT;
         else
            if C_BUNAMT <> 0 then
            
               C_C_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * C_TEMP_AMT) / 10) * 10;
               C_C_BUILDAMT := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_TEMP_AMT - C_C_MANAGEAMT)) / 10) * 10;
               if C_VATAMT = 0 then
                  C_C_VATAMT := 0;
               else
                  C_C_VATAMT := C_C_BUILDAMT * 0.1;
               end if;
               C_C_LANDAMT  := C_TEMP_AMT - C_C_MANAGEAMT - C_C_BUILDAMT - C_C_VATAMT;
            else
               C_C_LANDAMT   := 0;
               C_C_BUILDAMT  := 0;
               C_C_VATAMT    := 0;
               C_C_MANAGEAMT := 0;
            end if;

            C_TEMP__AMT := ((C_RECEIPTMANAGEAMT + C_C_MANAGEAMT) - C_MANAGEAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_MANAGEAMT := C_MANAGEAMT - C_RECEIPTMANAGEAMT;
               C_C_LANDAMT   := C_C_LANDAMT + C_TEMP__AMT;
            END IF;   

            C_TEMP__AMT := ((C_RECEIPTLANDAMT + C_C_LANDAMT) - C_LANDAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_LANDAMT  := C_LANDAMT - C_RECEIPTLANDAMT;
               C_C_BUILDAMT := C_C_BUILDAMT + C_TEMP__AMT;
            END IF;   

            C_TEMP__AMT := ((C_RECEIPTBUILDAMT + C_C_BUILDAMT) - C_BUILDAMT);
            IF C_TEMP__AMT > 0 THEN
               C_C_BUILDAMT  := C_BUILDAMT - C_RECEIPTBUILDAMT;
               C_C_VATAMT    := C_C_VATAMT + C_TEMP__AMT;
            END IF;

            C_R_LANDAMT    := C_C_LANDAMT;
            C_R_BUILDAMT   := C_C_BUILDAMT;
            C_R_VATAMT     := C_C_VATAMT;
            C_R_MANAGEAMT  := C_C_MANAGEAMT;
         end if;

         -- 할인료가 있을 경우만 실납입금액 토, 건, 부 를 별도로 계산한다
         if C_DISCOUNT_AMT <> 0 then
             C_R_RECEIPTAMT := C_TEMP_AMT - C_DISCOUNT_AMT; -- 실납입금액 계산용(연체료를 포함 안한다.)
             if C_BUNAMT <> 0 then
                C_R_MANAGEAMT := TRUNC(((C_MANAGEAMT / C_BUNAMT) * C_R_RECEIPTAMT) / 10) * 10;

--                C_R_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_R_RECEIPTAMT - C_R_MANAGEAMT)) / 10) * 10;
--                if C_VATAMT = 0 then
--                   C_R_VATAMT   := 0;
--                else
--                   C_R_VATAMT  := C_R_BUILDAMT * 0.1;
--                end if;
--                C_R_LANDAMT  := C_R_RECEIPTAMT - C_R_MANAGEAMT - C_R_BUILDAMT - C_R_VATAMT;
                IF C_LANDAMT = 0 THEN --토지가가 없으면 계산된 토지가를 건물가에 포함한다
                   C_R_LANDAMT := 0;
                   IF C_VATAMT = 0 THEN
                      C_R_BUILDAMT := C_R_RECEIPTAMT;
                      C_R_VATAMT   := 0;
                   ELSE
                      C_R_BUILDAMT := TRUNC(C_R_RECEIPTAMT / 1.1);
                      C_R_VATAMT   := C_R_RECEIPTAMT - C_R_BUILDAMT;
                   END IF;
                ELSE
                   C_R_BUILDAMT  := TRUNC(((C_BUILDAMT / (C_BUNAMT - C_MANAGEAMT)) * (C_R_RECEIPTAMT - C_R_MANAGEAMT)) / 10) * 10;
                   if C_VATAMT = 0 then
                      C_R_VATAMT   := 0;
                   else
                      C_R_VATAMT  := C_R_BUILDAMT * 0.1;
                   end if;
                   C_R_LANDAMT  := C_R_RECEIPTAMT - C_R_MANAGEAMT - C_R_BUILDAMT - C_R_VATAMT;
                END IF;
             else
                C_R_LANDAMT   := 0;
                C_R_BUILDAMT  := 0;
                C_R_VATAMT    := 0;
                C_R_MANAGEAMT := 0;
             end if;
         end if;    
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

         C_DAYS := TO_DATE(as_input_date, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         -- 과오납금인경우 토건부관은 0, 실토건부관 0, 납입,실납입금액만 넣는다
         IF C_MAX_COUNTS = C_LAST_COUNTS AND C_LAST_TIMES >= 90 THEN
            C_C_LANDAMT   := 0;
            C_C_BUILDAMT  := 0;
            C_C_VATAMT    := 0;
            C_C_MANAGEAMT := 0;
            C_R_LANDAMT   := 0;
            C_R_BUILDAMT  := 0;
            C_R_VATAMT    := 0;
            C_R_MANAGEAMT := 0;
         END IF;

         -----------------------------------------------------------------------------
         -- 계산된 값을 분양_세대별수입금에 넣어준다.
         INSERT INTO HD_HOUS_INCOME_TEMP
                   (SEQ_NUM,        CUST_CODE,      SEQ,             COUNTS,        TIMES,
                    DEPT_CODE,      HOUSETAG,       BUILDNO,         HOUSENO,
                    DEPOSIT_NO,     RECEIPTDATE,
                    RECEIPTAMT,     RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT,
                    DELAYDAYS,      DELAYAMT,       DISCNTDAYS,      DISCNTAMT,
                    REALINCOMAMT,   REALLANDAMT,    REALBUILDAMT,    REALVATAMT,    REALMANAGEAMT,
                    BANK_CODE,      BANK_NAME,      PAYTAG,          INCOMTYPE,
                    MOD_YN,         REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                    TAXDATE,        TAXSEQ,         INSEQ,           CALC_YN,
                    INPUT_DUTY_ID,  INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                    DETAILMOD_YN )
            VALUES ( ad_seq_num,    as_custcode,    ai_seq,          C_LAST_COUNTS, C_LAST_TIMES,
                     C_DEPT_CODE,   C_HOUSETAG,     C_BUILDNO,       C_HOUSENO,
                     null,          as_input_date,
                     C_TEMP_AMT,    C_C_LANDAMT,    C_C_BUILDAMT,    C_C_VATAMT,    C_C_MANAGEAMT,
                     C_DELAY_DAY,   C_DELAY_AMT,    C_DISCOUNT_DAY,  C_DISCOUNT_AMT,
                     C_R_RECEIPTAMT,C_R_LANDAMT,    C_R_BUILDAMT,    C_R_VATAMT,    C_R_MANAGEAMT,
                     null,          null,           null,            null,
                     'N',           'N',            null,            null,
                     null,          null,           null,            'Y',
                     null,          TO_CHAR(sysdate, 'YYYYMMDDHH24MISS'), null, null,
                     'N' );
         -- 기납입금액누계를 구한다.
         select nvl(sum(receiptamt),0)
           into C_RECEIPTAMT
           from hd_hous_income_temp
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq       = ai_seq
             and counts    = C_LAST_COUNTS;
         -- 입금완료구분값을 구한다.
         if C_BUNAMT <= C_RECEIPTAMT THEN
            C_PERPECTTAG := 'Y';
         else
            C_PERPECTTAG := 'N';
         end if;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         UPDATE HD_HOUS_SELLDETAIL_TEMP
            SET PERPECTTAG = C_PERPECTTAG,
                RECEIPTAMT = C_RECEIPTAMT
           where seq_num = ad_seq_num
             and cust_code = as_custcode
             and seq       = ai_seq
             and counts    = C_LAST_COUNTS;
         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF c_input_amt = 0 THEN
            EXIT;
         END IF;
   
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&
         if C_LAST_COUNTS >= C_MAX_COUNTS then
            C_LAST_COUNTS := C_MAX_COUNTS;
            select NVL(MAX(times),0)
              into C_LAST_TIMES
              from hd_hous_income_temp
              where seq_num = ad_seq_num
                and cust_code = as_custcode
                and seq       = ai_seq
                and counts    = C_LAST_COUNTS;
            select perpecttag
              into C_PERPECTTAG
              from hd_hous_selldetail_temp
              where seq_num = ad_seq_num
                and cust_code = as_custcode
                and seq       = ai_seq
                and counts    = C_LAST_COUNTS;
            if C_PERPECTTAG = 'Y' and ad_input_amt = 99999999999 then
               EXIT;
            end if;
            if C_PERPECTTAG = 'Y' and C_LAST_TIMES < 90 then
               C_LAST_TIMES := 90;
            else
               C_LAST_TIMES := C_LAST_TIMES + 1;
            end if;
         else
            select COUNT(*)
              into C_CNT
              from hd_hous_selldetail_temp
              where seq_num = ad_seq_num
                and cust_code = as_custcode
                and seq       = ai_seq
                and counts > C_LAST_COUNTS;
            if C_CNT > 0 then
               select min(counts)
                 into C_LAST_COUNTS
                 from hd_hous_selldetail_temp
                 where seq_num = ad_seq_num
                   and cust_code = as_custcode
                   and seq       = ai_seq
                   and counts > C_LAST_COUNTS;
               select NVL(MAX(times),0)
                 into C_LAST_TIMES
                 from hd_hous_income_temp
                 where seq_num = ad_seq_num
                   and cust_code = as_custcode
                   and seq       = ai_seq
                   and counts    = C_LAST_COUNTS;
               C_LAST_TIMES := C_LAST_TIMES + 1;
            else
               EXIT;
            end if;
         end if;
      END LOOP;
   END;
   COMMIT WORK;
   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_hd_income_calc_plan;
/


DROP PROCEDURE PROC_HD_INCO_CMS;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_CMS" (
   as_tp      IN VARCHAR2, --은행구분
   as_dt      IN VARCHAR2, --처리일자
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_dept      VARCHAR2(12);
v_htag      VARCHAR2(1);
v_sysdt     VARCHAR2(14);
v_cnt       NUMBER(5);

v_cust      VARCHAR2(20);
v_seq       NUMBER(5);

c_pseq      NUMBER(5);
c_deposit   VARCHAR2(20);
c_bno       VARCHAR2(10);
c_hno       VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURP(a_tp IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT PAYMENTSEQ,
       DEPOSIT_NO,
       LPAD(BUILDNO, 4, ' '),
       LPAD(HOUSENO, 4, ' ')
  FROM HD_HOUS_BANKETC
 WHERE PAYMENTDATE = a_dt
   AND BANK_KIND   = a_tp
   AND INCOMETAG   = '0';

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   RAISE_APPLICATION_ERROR(-20002, '해당프로시져는 사용하지않습니다');
   ROLLBACK;
   RETURN;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   BEGIN
      UPDATE HD_HOUS_BANKETC
         SET DEPOSIT_NO = (SELECT MIN(B.DEPOSIT_NO)
                             FROM HD_CODE_DEPOSIT B
                            WHERE B.OUTDEPOSITNO = HD_HOUS_BANKETC.DEPOSIT_NO
                          )  
       WHERE EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE A.OUTDEPOSITNO = HD_HOUS_BANKETC.DEPOSIT_NO
                    );
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line('HD_HOUS_BANKETC(0):' || sqlerrm); 
              ROLLBACK;
              RETURN;
   END;

   OPEN CURP(as_tp, as_dt);
   LOOP
      FETCH CURP 
       INTO c_pseq,  c_deposit,    c_bno, c_hno;
      EXIT WHEN CURP%NOTFOUND;

      SELECT COUNT(*)
        INTO v_cnt
        FROM HD_CODE_DEPOSIT A,
             HD_CODE_HOUSE B
       WHERE A.DEPT_CODE    = B.DEPT_CODE
         AND A.HOUSETAG     = B.HOUSETAG
         AND A.VIR_TAG      = 'N'
         AND A.OUTDEPOSITNO = c_deposit;

      IF v_cnt <> 1 THEN
         BEGIN
            UPDATE HD_HOUS_BANKETC
               SET INCOMETAG     = '1',
                   INPUT_DUTY_ID = as_user,
                   INPUT_DATE    = v_sysdt
             WHERE PAYMENTDATE   = as_dt
               AND BANK_KIND     = as_tp
               AND PAYMENTSEQ    = c_pseq;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line('HD_HOUS_BANKETC(1):' || sqlerrm); 
                    ROLLBACK;
                    RETURN;
         END;
      ELSE
         SELECT A.DEPT_CODE, A.HOUSETAG
           INTO v_dept,      v_htag
           FROM HD_CODE_DEPOSIT A,
                HD_CODE_HOUSE B
          WHERE A.DEPT_CODE  = B.DEPT_CODE
            AND A.HOUSETAG   = B.HOUSETAG
            AND A.VIR_TAG    = 'N'
            AND A.DEPOSIT_NO = c_deposit;

         SELECT COUNT(*)
           INTO v_cnt
           FROM HD_HOUS_SELL
          WHERE DEPT_CODE = v_dept
            AND HOUSETAG  = v_htag
            AND BUILDNO   = c_bno
            AND HOUSENO   = c_hno
            AND ((CHANGETAG  = '1' AND CONTRACTDATE <= as_dt) OR
                 (CHANGETAG <> '1' AND CHANGEDATE    > as_dt))
            AND LASTCHANGEDATE <= as_dt;
         IF v_cnt <> 1 THEN
            BEGIN
               UPDATE HD_HOUS_BANKETC
                  SET INCOMETAG     = '1',
                      DEPT_CODE     = v_dept,
                      HOUSETAG      = v_htag,
                      INPUT_DUTY_ID = as_user,
                      INPUT_DATE    = v_sysdt
                WHERE PAYMENTDATE   = as_dt
                  AND BANK_KIND     = as_tp
                  AND PAYMENTSEQ    = c_pseq;
               EXCEPTION
                  WHEN OTHERS THEN
                       dbms_output.put_line('HD_HOUS_BANKETC(2):' || sqlerrm); 
                       ROLLBACK;
                       RETURN;
            END;
         ELSE
            SELECT CUST_CODE, SEQ
              INTO v_cust,    v_seq
              FROM HD_HOUS_SELL
             WHERE DEPT_CODE = v_dept
               AND HOUSETAG  = v_htag
               AND BUILDNO = c_bno
               AND HOUSENO = c_hno
               AND ((CHANGETAG  = '1' AND CONTRACTDATE <= as_dt) OR
                    (CHANGETAG <> '1' AND CHANGEDATE    > as_dt))
               AND LASTCHANGEDATE <= as_dt;
            BEGIN
               UPDATE HD_HOUS_BANKETC
                  SET CUST_CODE     = v_cust,
                      SEQ           = v_seq,
                      INCOMETAG     = '2',
                      DEPT_CODE     = v_dept,
                      HOUSETAG      = v_htag,
                      INPUT_DUTY_ID = as_user,
                      INPUT_DATE    = v_sysdt
                WHERE PAYMENTDATE   = as_dt
                  AND BANK_KIND     = as_tp
                  AND PAYMENTSEQ    = c_pseq;
               EXCEPTION
                  WHEN OTHERS THEN
                       dbms_output.put_line('HD_HOUS_BANKETC(3):' || sqlerrm); 
                       ROLLBACK;
                       RETURN;
            END;
         END IF;
      END IF;
   END LOOP;
   CLOSE CURP;
 
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_CMSICHE;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_CMSICHE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --처리일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_pdt      VARCHAR2(8);
c_pseq     NUMBER(5);
c_cust     VARCHAR2(20);
c_seq      NUMBER(5);
c_custnm   VARCHAR2(50);
c_dno      VARCHAR2(20);
c_pamt     NUMBER(15);
c_dept     VARCHAR2(12);
c_htag     VARCHAR2(1);
c_bno      VARCHAR2(10);
c_hno      VARCHAR2(10);

v_dept     VARCHAR2(12);
v_htag     VARCHAR2(1);
v_dno      VARCHAR2(20);
v_inseq    NUMBER(5);
v_sysdt    VARCHAR2(14);
v_cnt      NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 가상계좌자료중 현제 계약상태이고 최종변경일이후 입금일이어야 입금처리가 가능 */
CURSOR CURBANK(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT A.PAYMENTDATE,
       A.PAYMENTSEQ,
       A.CUST_CODE,
       A.SEQ,
       NVL(B.CUST_NAME, '') AS CUST_NAME,
       A.DEPOSIT_NO,
       A.PAYMENTAMT,
       A.DEPT_CODE,
       A.HOUSETAG,
       LPAD(A.BUILDNO, 4, ' '),
       LPAD(A.HOUSENO, 4, ' ')
  FROM HD_HOUS_BANKETC A,
       VW_HD_CODE_CUSTOMER B,
       HD_HOUS_SELL C
 WHERE A.CUST_CODE = B.CUST_CODE (+)
   AND A.PAYMENTDATE = a_dt
   AND A.DEPT_CODE   = a_dept
   AND A.HOUSETAG    = a_htag
   AND A.INCOMETAG   = '2'
   AND A.CANCELTAG   = 'N'
   AND A.PROCESSTAG  = 'N'
   AND A.CUST_CODE  = C.CUST_CODE
   AND A.SEQ        = C.SEQ
   AND C.CHANGETAG  = '1'
   AND C.LASTCHANGEDATE <= A.PAYMENTDATE;

/*---------------------------------------------------------------------------*/
CURSOR CURINC(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2, a_dno IN VARCHAR2) IS
SELECT INSEQ, CUST_CODE, SEQ
  FROM HD_HOUS_DAY_INCOME
 WHERE DEPT_CODE  = a_dept
   AND HOUSETAG   = a_htag
   AND INDT       = a_dt
   AND DEPOSIT_NO = a_dno
   AND INTYPE     = '2'
   AND IHE_YN     = 'N';

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   RAISE_APPLICATION_ERROR(-20002, '해당프로시져는 사용하지않습니다');
   ROLLBACK;
   RETURN;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND VIRDEPOSIT_YN = 'Y';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당 현장의 분양구분은 가상계좌를 사용하는 중 입니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_BANKETC A,
          HD_HOUS_INCOME B
    WHERE A.CUST_CODE    = B.CUST_CODE
      AND A.SEQ          = B.SEQ
      AND B.RECEIPTDATE >= A.PAYMENTDATE
      AND A.DEPT_CODE    = as_dept
      AND A.HOUSETAG     = as_htag
      AND A.PAYMENTDATE  = as_dt
      AND A.INCOMETAG    = '2'
      AND A.CANCELTAG    = 'N'
      AND A.PROCESSTAG   = 'N';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당 입금고객중 처리일과 같거나 큰 입금일자가 있습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   OPEN CURBANK(as_dept, as_htag, as_dt);
   LOOP
      FETCH CURBANK 
       INTO c_pdt,     c_pseq,  c_cust,  c_seq,
            c_custnm,  c_dno,   c_pamt,  c_dept,
            c_htag,    c_bno,   c_hno;
      EXIT WHEN CURBANK%NOTFOUND;

      v_dept := c_dept;
      v_htag := c_htag;
      v_dno  := c_dno;

      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_inseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = c_dept
         AND HOUSETAG  = c_htag
         AND INDT      = as_dt;

      -- -------------------------- HD_HOUS_BANKETC
      BEGIN
         UPDATE HD_HOUS_BANKETC
            SET INCOMETAG  = '3',
                PROCESSTAG = 'Y',
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE PAYMENTDATE = c_pdt
            AND PAYMENTSEQ  = c_pseq
            AND DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag;

         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line('UPDATE HD_HOUS_BANKETC ERROR:' || sqlerrm); 
            ROLLBACK;
            RETURN;
      END;

      -- -------------------------- HD_HOUS_DAY_INCOME
      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                    (DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,      CUST_NAME,
                     DEPOSIT_NO,    INAMT,      INGUBUN,     INTYPE,   IHE_YN,
                     CDNO,          MOD_YN,     MOD_RAMT,    MOD_DAMT,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
             VALUES (c_dept,        c_htag,     c_pdt,       v_inseq,
                     c_bno,         c_hno,      c_cust,      c_seq,    c_custnm,
                     c_dno,         c_pamt,     '1',         '2',      'N',
                     '',            'N',        0,           0,
                     as_user,       v_sysdt,    '',          '');
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line('INSERT HD_HOUS_DAY_INCOME ERROR:' || sqlerrm); 
            ROLLBACK;
            RETURN;
      END;
   END LOOP;
   CLOSE CURBANK;
   COMMIT WORK;

   -- ----------------------------- HD_HOUS_INCOME
   OPEN CURINC(v_dept, v_htag, as_dt, v_dno);
   LOOP
      FETCH CURINC 
       INTO v_inseq, c_cust, c_seq;
      EXIT WHEN CURINC%NOTFOUND;
      
      PROC_HD_INCOME_CALC(c_cust, c_seq, as_dt, v_inseq);
      
   END LOOP;
   CLOSE CURINC;
   COMMIT WORK;

   -- ----------------------------- HD_HOUS_MAGAM
   BEGIN
      UPDATE HD_HOUS_MAGAM
         SET MAGAMDATE   = as_dt,
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line('UPDATE HD_HOUS_MAGAM ERROR:' || sqlerrm); 
         ROLLBACK;
         RETURN;
   END;

   COMMIT WORK;

END;
/


DROP PROCEDURE PROC_HD_INCO_COMPAMTICHE;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_COMPAMTICHE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_cnt      NUMBER(5);
v_cnt2     NUMBER(5);
v_inseq    NUMBER(5);
v_sysdt    VARCHAR2(14);
v_deposit  VARCHAR2(30);

c_cust     VARCHAR2(20);
c_seq      NUMBER(5);
c_dt       VARCHAR2(8);
c_amt      NUMBER(15);
c_bno      VARCHAR2(10);
c_hno      VARCHAR2(10);
c_custname VARCHAR2(100);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 국민주택기금자료중 현제 계약상태이고 최종변경일이후 입금일이어야 입금처리가 가능 */
CURSOR CURCUST(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT A.CUST_CODE,
       A.SEQ,
       A.ICHE_DATE,
       A.ICHE_AMT,
       B.BUILDNO,
       B.HOUSENO,
       B.CUST_NAME
  FROM HD_HOUS_COMPAMT A,
       HD_HOUS_SELL B
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.ICHE_YN   = 'N'
   AND B.CHANGETAG = '1'
   AND B.LASTCHANGEDATE <= A.ICHE_DATE
   AND A.CUST_CODE = B.CUST_CODE
   AND A.SEQ       = B.SEQ
   AND NOT EXISTS (SELECT 1
                     FROM HD_HOUS_INCOME E
                    WHERE E.CUST_CODE   = A.CUST_CODE
                      AND E.SEQ         = A.SEQ
                      AND E.RECEIPTDATE > A.ICHE_DATE
                  )
   AND NOT EXISTS (SELECT 1
                     FROM HD_HOUS_SELLDETAIL F
                    WHERE F.CUST_CODE   = A.CUST_CODE
                      AND F.SEQ         = A.SEQ
                      AND F.COUNTS      < '90'
                      AND F.PERPECTTAG  = 'N'
                  );

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0; v_cnt2 := 0;
   SELECT NVL(SUM(DECODE(B.CHK, -1, 1, 0)), 0),
          NVL(SUM(DECODE(B.CHK, -2, 1, 0)), 0)
     INTO v_cnt, v_cnt2
     FROM (SELECT A.DT, F_HD_GET_MAGAM(as_dept, as_htag, A.DT) AS CHK
             FROM (SELECT DISTINCT ICHE_DATE AS DT
                     FROM HD_HOUS_COMPAMT
                    WHERE DEPT_CODE = as_dept
                      AND HOUSETAG  = as_htag
                      AND ICHE_YN   = 'N'
                  ) A
          ) B
    WHERE B.CHK <> 0;

   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '이체자료의 일부날자가 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

--   IF v_cnt2 > 0 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '이체자료의 일부날자가 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_deposit  := '';

   SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND RECEIPTTAG NOT IN ('8', '9')
      AND ROWNUM < 2
    ORDER BY LISTORDER;
   IF v_deposit = 'XXXXX' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 입금계좌를 등록하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   OPEN CURCUST(as_dept, as_htag);
   LOOP
      FETCH CURCUST 
       INTO c_cust, c_seq, c_dt, c_amt, c_bno, c_hno, c_custname;
      EXIT WHEN CURCUST%NOTFOUND;

      v_inseq := 0;
      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_inseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_dt;

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO, INAMT,       INGUBUN,
                     INTYPE,        IHE_YN,     CDNO,        MOD_YN,
                     MOD_RAMT,      MOD_DAMT,   VDEPOSIT_NO,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,
                     OUT_DT,        OUT_TM,     OUT_SEQ,     OUT_BANK,
                     REMARK,        CD_BANK,    CD_EDATE,    CD_STYPE )
            VALUES ( as_dept,       as_htag,    c_dt,        v_inseq,
                     c_bno,         c_hno,      c_cust,      c_seq,
                     c_custname,    v_deposit,  c_amt,       '5',
                     '6',           'N',        '',          'Y',
                     0,             0,          '',
                     as_user,       v_sysdt,    '',          '',
                     '',            '',         0,           '',
                     '',            '',         '',          '');
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME ER_01: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;
      PROC_HD_INCOME_CALC(c_cust, c_seq, c_dt, v_inseq);
   END LOOP;
   CLOSE CURCUST;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_COMPAMTICHE_BATCH;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_COMPAMTICHE_BATCH" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fbno IN VARCHAR2, --시작동
   as_fhno IN VARCHAR2, --시작호
   as_tbno IN VARCHAR2, --종료동
   as_thno IN VARCHAR2, --종료호
   as_dt   IN VARCHAR2, --이체일
   as_amt  IN VARCHAR2, --이체금액
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_cnt      NUMBER(5);
v_sysdt    VARCHAR2(14);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_COMPAMT
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND ICHE_YN   = 'Y';

   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '국민주택기금이체가 처리된 세대가 있어서 작업을 할 수 없습니다.');
      ROLLBACK;    
      RETURN;
   END; END IF; 
   
   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_COMPAMT
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'DELETE HD_HOUS_COMPAMT .. ER1');
                ROLLBACK;
                RETURN;
   END;

/*---------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_COMPAMT
                ( CUST_CODE,     SEQ,               DEPT_CODE,   HOUSETAG,
                  ICHE_DATE,     ICHE_AMT,          ICHE_YN,
                  INPUT_DUTY_ID, INPUT_DATE,        CHG_DUTY_ID, CHG_DATE )
           SELECT CUST_CODE,     SEQ,               DEPT_CODE,   HOUSETAG,
                  as_dt,         TO_NUMBER(as_amt), 'N',
                  as_user,       v_sysdt,           '',          ''
             FROM HD_HOUS_SELL
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag
              AND CHANGETAG = '1'
              AND BUILDNO BETWEEN LPAD(as_fbno, 4, ' ') AND LPAD(as_tbno, 4, ' ')
              AND HOUSENO BETWEEN LPAD(as_fhno, 4, ' ') AND LPAD(as_thno, 4, ' ');
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_COMPAMT .. ER2');
                ROLLBACK;    
                 RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_DAYBATCH;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_DAYBATCH" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2, --분양구분
   as_fr      IN VARCHAR2, --처리시작일
   as_to      IN VARCHAR2, --처리종료일
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_cust      VARCHAR2(20);
c_seq       NUMBER(5);
c_indt      VARCHAR2(8);
c_inseq     NUMBER(5);

v_cnt       NUMBER(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 일괄등록된 자료중 현제 계약상태이고 최종변경일이후 입금일이어야 입금처리가 가능 */
CURSOR CURDAYIN(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.CUST_CODE,
       A.SEQ,
       A.INDT,
       A.INSEQ
  FROM HD_HOUS_DAY_INCOME A,
       HD_HOUS_SELL B
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.INDT      BETWEEN a_fr AND a_to
   AND A.IHE_YN    = 'N'
   AND A.INTYPE    = '3'
   AND A.CUST_CODE = B.CUST_CODE
   AND A.SEQ       = B.SEQ
   AND B.CHANGETAG = '1'
   AND B.LASTCHANGEDATE <= A.INDT
 ORDER BY A.CUST_CODE, A.SEQ, A.INDT, A.INSEQ;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
--   RAISE_APPLICATION_ERROR(-20002, '해당프로시져는 사용하지않습니다');
--   ROLLBACK;
--   RETURN;

   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_to)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당일자는 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '해당일자는 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

/*---------------------------------------------------------------------------*/
   OPEN CURDAYIN(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURDAYIN 
       INTO c_cust, c_seq, c_indt, c_inseq;
      EXIT WHEN CURDAYIN%NOTFOUND;

      v_cnt := 0;
      SELECT COUNT(*)
        INTO v_cnt
        FROM HD_HOUS_INCOME
       WHERE CUST_CODE   = c_cust
         AND SEQ         = c_seq
         AND RECEIPTDATE > c_indt; 
      IF v_cnt = 0 THEN
         PROC_HD_INCOME_CALC(c_cust, c_seq, c_indt, c_inseq);
      END IF;   

   END LOOP;
   CLOSE CURDAYIN;
 
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_DAYBATCH_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_DAYBATCH_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --입금시작일
   as_to   IN VARCHAR2, --입금종료일
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_maxseq       NUMBER(5);

/*---------------------------------------------------------------------------*/
c_dept      VARCHAR2(12);
c_htag      VARCHAR2(1);
c_indt      VARCHAR2(8);
c_bno       VARCHAR2(10);
c_hno       VARCHAR2(10);
c_cust      VARCHAR2(20);
c_seq       NUMBER(5);
c_custnm    VARCHAR2(50);
c_dno       VARCHAR2(30);
c_amt       NUMBER(15);
c_gubun     VARCHAR2(2);

/* 2014-02-24 : HD_HOUS_SELL 동호에 스페이스가 들어있을 경우 자료올리기 파일과 일일이 맞추기가 힘들어서 HD_HOUS_SELL 동호를 가져오기 위해 */  
c_buildno       VARCHAR2(10);   -- HD_HOUS_SELL 동
c_houseno       VARCHAR2(10);  -- HD_HOUS_SELL 호수

/*---------------------------------------------------------------------------*/
CURSOR CURBATCH(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.DEPT_CODE,
       A.HOUSETAG,
       A.INDT,
--       LPAD(A.BUILDNO, 4, ' '),
--       LPAD(A.HOUSENO, 4, ' '),
       TRIM(A.BUILDNO),
       TRIM(A.HOUSENO),
       A.DEPOSIT_NO,
       A.INAMT,
       NVL(A.INGUN, '1')
  FROM HD_HOUS_DAY_INCOME_CONV A
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.INDT      BETWEEN a_fr AND a_to
 ORDER BY A.DEPT_CODE, A.HOUSETAG, A.INDT;

/*---------------------------------------------------------------------------*/
BEGIN
--   RAISE_APPLICATION_ERROR(-20002, '해당프로시져는 사용하지않습니다');
--   ROLLBACK;
--   RETURN;

   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_DAY_INCOME_CONV
         SET DEPOSIT_NO = (SELECT A.DEPOSIT_NO
                             FROM HD_CODE_DEPOSIT A
                            WHERE A.DEPT_CODE    = as_dept
                              AND A.HOUSETAG     = as_htag
                              AND A.OUTDEPOSITNO = HD_HOUS_DAY_INCOME_CONV.DEPOSIT_NO
                          )
       WHERE HD_HOUS_DAY_INCOME_CONV.DEPT_CODE = as_dept
         AND HD_HOUS_DAY_INCOME_CONV.HOUSETAG  = as_htag
         AND HD_HOUS_DAY_INCOME_CONV.INDT BETWEEN as_fr AND as_to
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT B
                      WHERE B.DEPT_CODE    = as_dept
                        AND B.HOUSETAG     = as_htag
                        AND B.OUTDEPOSITNO = HD_HOUS_DAY_INCOME_CONV.DEPOSIT_NO 
                          );
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line('HD_HOUS_DAY_INCOME_CONV:' || sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '0:UPDATE ERR:HD_HOUS_DAY_INCOME_CONV ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT NVL(MIN(SEQ), 0)
     INTO v_cnt
     FROM HD_HOUS_DAY_INCOME_CONV A
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.INDT      BETWEEN as_fr AND as_to
      AND NOT EXISTS (SELECT 1
                        FROM HD_HOUS_SELL B
                       WHERE B.DEPT_CODE = as_dept
                         AND B.HOUSETAG  = as_htag
--                         AND B.BUILDNO   = LPAD(A.BUILDNO, 4, ' ')
--                         AND B.HOUSENO   = LPAD(A.HOUSENO, 4, ' ')
                         AND TRIM(B.BUILDNO)   = TRIM(A.BUILDNO)
                         AND TRIM(B.HOUSENO)   = TRIM(A.HOUSENO)
                         AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_to) OR
                              (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_to))
                         AND B.LASTCHANGEDATE <= as_to
                         AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= A.INDT) OR
                              (B.CHANGETAG <> '1' AND B.CHANGEDATE    > A.INDT))
                         AND B.LASTCHANGEDATE <= A.INDT
                     );
                  
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당내역에 잘못된 동호가 있습니다 (' || TO_CHAR(v_cnt) || '행)');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT NVL(MIN(SEQ), 0)
     INTO v_cnt
     FROM HD_HOUS_DAY_INCOME_CONV A
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.INDT      BETWEEN as_fr AND as_to
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_DEPOSIT B
                       WHERE B.DEPT_CODE  = as_dept
                         AND B.HOUSETAG   = as_htag
                         AND B.DEPOSIT_NO = A.DEPOSIT_NO
                     );
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당내역에 잘못된 계좌가 있습니다 (' || TO_CHAR(v_cnt) || '행)');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT NVL(MIN(SEQ), 0)
     INTO v_cnt
     FROM HD_HOUS_DAY_INCOME_CONV A
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.INDT      BETWEEN as_fr AND as_to
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_COMM B
                       WHERE B.CODE = '05'
                         AND NVL(A.INGUN, '1') NOT IN ('5', 'C')
                     );
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당내역에 잘못된 입금구분이 존재합니다 (' || TO_CHAR(v_cnt) || '행)');
      ROLLBACK;
      RETURN;
   END IF;

   OPEN CURBATCH(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURBATCH
       INTO c_dept, c_htag, c_indt,   c_bno, c_hno,
             c_dno, c_amt, c_gubun;
      EXIT WHEN CURBATCH%NOTFOUND;

      v_maxseq := 0;
      SELECT NVL(MAX(NVL(A.INSEQ, 0)), 0) + 1
        INTO v_maxseq
        FROM HD_HOUS_DAY_INCOME A
       WHERE A.DEPT_CODE = c_dept
         AND A.HOUSETAG  = c_htag
         AND A.INDT      = c_indt;    

/* 2014-02-24 : HD_HOUS_SELL 동호에 스페이스가 들어있을 경우 자료올리기 파일과 일일이 맞추기가 힘들어서 HD_HOUS_SELL 동호를 가져오기 위해 */  
      SELECT MAX(CUST_CODE), MAX(SEQ), MAX(CUST_NAME), MAX(BUILDNO), MAX(HOUSENO)
        INTO c_cust, c_seq, c_custnm, c_buildno, c_houseno
        FROM HD_HOUS_SELL
       WHERE DEPT_CODE             = as_dept
         AND HOUSETAG              = as_htag
--         AND LPAD(BUILDNO, 4, ' ') = c_bno
--         AND LPAD(HOUSENO, 4, ' ') = c_hno
         AND TRIM(BUILDNO) = c_bno
         AND TRIM(HOUSENO) = c_hno
         AND ((CHANGETAG  = '1' AND CONTRACTDATE <= c_indt) OR
              (CHANGETAG <> '1' AND CHANGEDATE    > c_indt))
         AND LASTCHANGEDATE <= c_indt
        ;

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,     INDT,        INSEQ,
                     BUILDNO,       HOUSENO,      CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO,   INAMT,
                     INGUBUN,       INTYPE,       IHE_YN,
                     CDNO,          MOD_YN,       MOD_RAMT,    MOD_DAMT,
                     INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE,
                     VDEPOSIT_NO )
            VALUES ( c_dept,        c_htag,       c_indt,      v_maxseq,
                     c_bno,         c_hno,        c_cust,      c_seq,
                     c_custnm,      c_dno,        c_amt,
                     c_gubun,       '3',          'N',
                     '',            'N',          0,           0,
                     as_user,       v_sysdt,      '',          '',
                     '' );
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line('HD_HOUS_DAY_INCOME:' || sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '1:INSERT ERR:HD_HOUS_DAY_INCOME ' || sqlerrm);
                      ROLLBACK;
                      RETURN;
      END;
   END LOOP;

   CLOSE CURBATCH;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_DAYBATCH_CONV_ORG;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_DAYBATCH_CONV_ORG" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --입금시작일
   as_to   IN VARCHAR2, --입금종료일
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_maxseq       NUMBER(5);

/*---------------------------------------------------------------------------*/
c_dept      VARCHAR2(12);
c_htag      VARCHAR2(1);
c_indt      VARCHAR2(8);
c_bno       VARCHAR2(10);
c_hno       VARCHAR2(10);
c_cust      VARCHAR2(20);
c_seq       NUMBER(5);
c_custnm    VARCHAR2(50);
c_dno       VARCHAR2(30);
c_amt       NUMBER(15);
c_gubun     VARCHAR2(2);

/*---------------------------------------------------------------------------*/
CURSOR CURBATCH(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.DEPT_CODE,
       A.HOUSETAG,
       A.INDT,
       LPAD(A.BUILDNO, 4, ' '),
       LPAD(A.HOUSENO, 4, ' '),
       B.CUST_CODE,
       B.SEQ,
       B.CUST_NAME,
       A.DEPOSIT_NO,
       A.INAMT,
       NVL(A.INGUN, '1')
  FROM HD_HOUS_DAY_INCOME_CONV A,
       HD_HOUS_SELL B
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.INDT      BETWEEN a_fr AND a_to
   AND A.DEPT_CODE = B.DEPT_CODE
   AND A.HOUSETAG  = B.HOUSETAG
   AND LPAD(A.BUILDNO, 4, ' ')   = B.BUILDNO
   AND LPAD(A.HOUSENO, 4, ' ')   = B.HOUSENO
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_to) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_to))
 ORDER BY A.DEPT_CODE, A.HOUSETAG, B.CUST_CODE, B.SEQ, A.INDT;

/*---------------------------------------------------------------------------*/
BEGIN
--   RAISE_APPLICATION_ERROR(-20002, '해당프로시져는 사용하지않습니다');
--   ROLLBACK;
--   RETURN;

   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_DAY_INCOME_CONV
         SET DEPOSIT_NO = (SELECT A.DEPOSIT_NO
                             FROM HD_CODE_DEPOSIT A
                            WHERE A.DEPT_CODE    = as_dept
                              AND A.HOUSETAG     = as_htag
                              AND A.OUTDEPOSITNO = HD_HOUS_DAY_INCOME_CONV.DEPOSIT_NO
                          )
       WHERE HD_HOUS_DAY_INCOME_CONV.DEPT_CODE = as_dept
         AND HD_HOUS_DAY_INCOME_CONV.HOUSETAG  = as_htag
         AND HD_HOUS_DAY_INCOME_CONV.INDT      BETWEEN as_fr AND as_to
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT B
                      WHERE B.DEPT_CODE    = as_dept
                        AND B.HOUSETAG     = as_htag
                        AND B.OUTDEPOSITNO = HD_HOUS_DAY_INCOME_CONV.DEPOSIT_NO 
                          );
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line('HD_HOUS_DAY_INCOME_CONV:' || sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '0:UPDATE ERR:HD_HOUS_DAY_INCOME_CONV ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT NVL(MIN(SEQ), 0)
     INTO v_cnt
     FROM HD_HOUS_DAY_INCOME_CONV A
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.INDT      BETWEEN as_fr AND as_to
      AND NOT EXISTS (SELECT 1
                        FROM HD_HOUS_SELL B
                       WHERE B.DEPT_CODE = as_dept
                         AND B.HOUSETAG  = as_htag
                         AND B.BUILDNO   = LPAD(A.BUILDNO, 4, ' ')
                         AND B.HOUSENO   = LPAD(A.HOUSENO, 4, ' ')
                         AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_to) OR
                              (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_to))
                         AND B.LASTCHANGEDATE <= as_to
                     );
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당내역에 잘못된 동호가 있습니다 (' || TO_CHAR(v_cnt) || '행)');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT NVL(MIN(SEQ), 0)
     INTO v_cnt
     FROM HD_HOUS_DAY_INCOME_CONV A
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.INDT      BETWEEN as_fr AND as_to
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_DEPOSIT B
                       WHERE B.DEPT_CODE  = as_dept
                         AND B.HOUSETAG   = as_htag
                         AND B.DEPOSIT_NO = A.DEPOSIT_NO
                     );
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당내역에 잘못된 계좌가 있습니다 (' || TO_CHAR(v_cnt) || '행)');
      ROLLBACK;
      RETURN;
   END IF;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT NVL(MIN(SEQ), 0)
     INTO v_cnt
     FROM HD_HOUS_DAY_INCOME_CONV A
    WHERE A.DEPT_CODE = as_dept
      AND A.HOUSETAG  = as_htag
      AND A.INDT      BETWEEN as_fr AND as_to
      AND NOT EXISTS (SELECT 1
                        FROM HD_CODE_COMM B
                       WHERE B.CODE = '05'
                         AND NVL(A.INGUN, '1') NOT IN ('5', 'C')
                     );
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당내역에 잘못된 입금구분이 존재합니다 (' || TO_CHAR(v_cnt) || '행)');
      ROLLBACK;
      RETURN;
   END IF;

   OPEN CURBATCH(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURBATCH
       INTO c_dept, c_htag, c_indt,   c_bno, c_hno,
            c_cust, c_seq,  c_custnm, c_dno, c_amt, c_gubun;
      EXIT WHEN CURBATCH%NOTFOUND;

      v_maxseq := 0;
      SELECT NVL(MAX(NVL(A.INSEQ, 0)), 0) + 1
        INTO v_maxseq
        FROM HD_HOUS_DAY_INCOME A
       WHERE A.DEPT_CODE = c_dept
         AND A.HOUSETAG  = c_htag
         AND A.INDT      = c_indt;    

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,     INDT,        INSEQ,
                     BUILDNO,       HOUSENO,      CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO,   INAMT,
                     INGUBUN,       INTYPE,       IHE_YN,
                     CDNO,          MOD_YN,       MOD_RAMT,    MOD_DAMT,
                     INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE,
                     VDEPOSIT_NO )
            VALUES ( c_dept,        c_htag,       c_indt,      v_maxseq,
                     c_bno,         c_hno,        c_cust,      c_seq,
                     c_custnm,      c_dno,        c_amt,
                     c_gubun,       '3',          'N',
                     '',            'N',          0,           0,
                     as_user,       v_sysdt,      '',          '',
                     '' );
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line('HD_HOUS_DAY_INCOME:' || sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '1:INSERT ERR:HD_HOUS_DAY_INCOME ' || sqlerrm);
                      ROLLBACK;
                      RETURN;
      END;
   END LOOP;

   CLOSE CURBATCH;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_INCOMEDETAIL;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_INCOMEDETAIL" (
   as_cust    IN VARCHAR2, --고객
   as_seq     IN VARCHAR2, --순번
   as_cnt     IN VARCHAR2, --차수
   as_tim     IN VARCHAR2, --횟수
   as_ramt    IN VARCHAR2, --납입금액
   as_eamt    IN VARCHAR2, --할인료
   as_iamt    IN VARCHAR2, --연체료
   as_eday    IN VARCHAR2, --할인일
   as_iday    IN VARCHAR2, --연체일
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
a_seq           NUMBER(5);
a_tim           NUMBER(5);
a_ramt          NUMBER(15);
a_eamt          NUMBER(15);
a_iamt          NUMBER(15);
a_eday          NUMBER(15);
a_iday          NUMBER(15);

c_vatyn         VARCHAR2(1);
c_mrate         FLOAT;
c_brate         FLOAT;
c_amt           NUMBER(15);
c_lamt          NUMBER(15);
c_bamt          NUMBER(15);
c_vamt          NUMBER(15);
c_mamt          NUMBER(15);
c_ramt          NUMBER(15);
c_rlamt         NUMBER(15);
c_rbamt         NUMBER(15);
c_rvamt         NUMBER(15);
c_rmamt         NUMBER(15);

v_sysdt         VARCHAR2(14);
v_agreeamt      NUMBER(15);
v_agreeland     NUMBER(15);
v_agreebuild    NUMBER(15);
v_agreevat      NUMBER(15);
v_agreemanage   NUMBER(15);

v_receiptamt    NUMBER(15);
v_receiptland   NUMBER(15);
v_receiptbuild  NUMBER(15);
v_receiptvat    NUMBER(15);
v_receiptmanage NUMBER(15);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   a_seq  := TO_NUMBER(as_seq);
   a_tim  := TO_NUMBER(as_tim);
   a_ramt := TO_NUMBER(as_ramt);
   a_eamt := TO_NUMBER(as_eamt);
   a_iamt := TO_NUMBER(as_iamt);
   a_eday := TO_NUMBER(as_eday);
   a_iday := TO_NUMBER(as_iday);

   c_amt  := a_ramt; /* 납입금액 */
   c_ramt := c_amt - a_eamt + a_iamt; /* 실납입금액 */

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   /* 약정금액, 해당입금전까지 납입총액 */
   SELECT A.BUNAMT,             A.LANDAMT,                A.BUILDAMT,                A.VATAMT,                A.MANAGEAMT,
          NVL(B.RECEIPTAMT, 0), NVL(B.RECEIPTLANDAMT, 0), NVL(B.RECEIPTBUILDAMT, 0), NVL(B.RECEIPTVATAMT, 0), NVL(B.RECEIPTMANAGEAMT, 0)
     INTO v_agreeamt,           v_agreeland,              v_agreebuild,              v_agreevat,              v_agreemanage,
          v_receiptamt,         v_receiptland,            v_receiptbuild,            v_receiptvat,            v_receiptmanage
     FROM HD_HOUS_SELLDETAIL A,
          (SELECT CUST_CODE,
                  SUM(RECEIPTAMT) AS RECEIPTAMT,
                  SUM(RECEIPTLANDAMT) AS RECEIPTLANDAMT,
                  SUM(RECEIPTBUILDAMT) AS RECEIPTBUILDAMT,
                  SUM(RECEIPTVATAMT) AS RECEIPTVATAMT,
                  SUM(RECEIPTMANAGEAMT) AS RECEIPTMANAGEAMT
             FROM HD_HOUS_INCOME
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq)
              AND COUNTS    = as_cnt
              AND TIMES     < TO_NUMBER(as_tim)
            GROUP BY CUST_CODE  
          ) B    
    WHERE A.CUST_CODE = as_cust
      AND A.SEQ       = TO_NUMBER(as_seq)
      AND A.COUNTS    = as_cnt
      AND A.CUST_CODE = B.CUST_CODE (+);

   IF v_agreeamt < v_receiptamt + c_amt THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당차수의 납입합계가 약정금액보다 큽니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   /* 부가세 여부 */
   SELECT NVL(VATTAG, 'N')
     INTO c_vatyn
     FROM HD_HOUS_SELL
    WHERE CUST_CODE = as_cust
      AND SEQ       = a_seq;

   /*------------------------------------------------------------------------*/
   /* 관리비 비율 산정 */
   SELECT DECODE(NVL(BUNAMT, 0), 0, 0, (MANAGEAMT / BUNAMT))
     INTO c_mrate
     FROM HD_HOUS_SELLDETAIL
    WHERE CUST_CODE = as_cust
      AND SEQ       = a_seq
      AND COUNTS    = as_cnt;

   /*------------------------------------------------------------------------*/
   /* 건물가 비율 산정 */
   SELECT DECODE(NVL(BUNAMT - MANAGEAMT, 0), 0, 0, (BUILDAMT / (BUNAMT - MANAGEAMT)))
     INTO c_brate
     FROM HD_HOUS_SELLDETAIL
    WHERE CUST_CODE = as_cust
      AND SEQ       = a_seq
      AND COUNTS    = as_cnt;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   /* 납입금액 안분 */
   IF v_agreeamt = v_receiptamt + c_amt THEN BEGIN --완납
      c_lamt := v_agreeland   - v_receiptland;
      c_bamt := v_agreebuild  - v_receiptbuild;
      c_vamt := v_agreevat    - v_receiptvat;
      c_mamt := v_agreemanage - v_receiptmanage;
   END; ELSE BEGIN --미납
      c_mamt := TRUNC((c_amt * c_mrate) / 10) * 10; /*관리비 */
      c_bamt := TRUNC(((c_amt - c_mamt) * c_brate) / 10) * 10; /*건물가 */
      IF c_vatyn = 'Y' THEN c_vamt := c_bamt / 10; /* 부가세 */
      ELSE c_vamt := 0; END IF;
      c_lamt := c_amt - c_mamt - c_bamt - c_vamt; /*토지가 */
   END; END IF;

   /*------------------------------------------------------------------------*/
   /* 실납입금액 안분 */
   IF as_eamt = 0 THEN BEGIN --정상이나 연체인경우
      c_rbamt := c_bamt;
      c_rlamt := c_lamt;
      c_rvamt := c_vamt;
      c_rmamt := c_mamt;
   END; ELSE BEGIN --할인인경우 별도계산
      c_rmamt := TRUNC((c_ramt * c_mrate) / 10) * 10; /* 실관리비 */
      c_rbamt := TRUNC(((c_ramt - c_rmamt) * c_mrate) / 10) * 10; /* 실건물가 */
      IF c_vatyn = 'Y' THEN c_rvamt := c_rbamt / 10; /* 부가세 */
      ELSE c_rvamt := 0; END IF;
      c_rlamt := c_ramt - c_rmamt - c_rbamt - c_rvamt; /*토지가 */
   END; END IF;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_INCOME
         SET RECEIPTAMT       = c_amt,
             RECEIPTLANDAMT   = c_lamt,
             RECEIPTBUILDAMT  = c_bamt,
             RECEIPTVATAMT    = c_vamt,
             RECEIPTMANAGEAMT = c_mamt,

             DELAYAMT         = a_iamt,
             DELAYDAYS        = a_iday,
             DISCNTAMT        = a_eamt,
             DISCNTDAYS       = a_eday,

             REALINCOMAMT     = c_ramt,
             REALLANDAMT      = c_rlamt,
             REALBUILDAMT     = c_rbamt,
             REALVATAMT       = c_rvamt,
             REALMANAGEAMT    = c_rmamt,

             DETAILMOD_YN     = 'Y',
             CHG_DUTY_ID      = as_user,
             CHG_DATE         = v_sysdt
       WHERE CUST_CODE        = as_cust
         AND SEQ              = a_seq
         AND COUNTS           = as_cnt
         AND TIMES            = a_tim;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 1:HD_HOUS_INCOME' || SQLERRM);
              ROLLBACK;
              RETURN;
   END;
 
   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELLDETAIL
         SET RECEIPTAMT = (SELECT NVL(SUM(RECEIPTAMT), 0)
                             FROM HD_HOUS_INCOME
                            WHERE CUST_CODE = as_cust
                              AND SEQ       = a_seq
                              AND COUNTS    = as_cnt
                          )   
       WHERE CUST_CODE  = as_cust
         AND SEQ        = a_seq
         AND COUNTS     = as_cnt;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 2:HD_HOUS_SELLDETAIL' || SQLERRM);
              ROLLBACK;
              RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELLDETAIL
         SET PERPECTTAG  = (CASE WHEN BUNAMT <= RECEIPTAMT THEN 'Y' ELSE 'N' END),
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE CUST_CODE   = as_cust
         AND SEQ         = a_seq
         AND COUNTS      = as_cnt;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'ERR_UPDATE 3:HD_HOUS_SELLDETAIL' || SQLERRM);
              ROLLBACK;
              RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_JUNGSAN1;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_JUNGSAN1" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_all  IN VARCHAR2, --전체여부
   as_cust IN VARCHAR2, --고객
   as_seq  IN VARCHAR2, --고객순번
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_cust      VARCHAR2(20);
c_seq       NUMBER(5);
c_indt      VARCHAR2(8);
c_inseq     NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURIN IS
SELECT CUST_CODE, SEQ, INDT, INSEQ
  FROM HD_HOUS_DAY_INCOME_ADJUST
 WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
   AND DEPT_CODE = as_dept
   AND HOUSETAG  = as_htag
   AND EXISTS (SELECT 1
                 FROM HD_HOUS_SELL
                WHERE DEPT_CODE = as_dept
                  AND HOUSETAG  = as_htag
                  AND CUST_CODE = HD_HOUS_DAY_INCOME_ADJUST.CUST_CODE
                  AND SEQ       = HD_HOUS_DAY_INCOME_ADJUST.SEQ
                  AND CHANGETAG = '1');

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   BEGIN
      DELETE FROM HD_HOUS_SELLDETAIL_ADJUST
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_SELLDETAIL_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_SELLDETAIL_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR1 > HD_HOUS_SELLDETAIL_ADJUST DELETE');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      DELETE FROM HD_HOUS_INCOME_ADJUST
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_INCOME_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_INCOME_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR2 > HD_HOUS_INCOME_ADJUST DELETE');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      DELETE FROM HD_HOUS_DAY_INCOME_ADJUST
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_DAY_INCOME_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_DAY_INCOME_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR3 > HD_HOUS_DAY_INCOME_ADJUST DELETE');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_SELLDETAIL_ADJUST
      SELECT *
        FROM HD_HOUS_SELLDETAIL
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_SELLDETAIL.CUST_CODE
                        AND SEQ       = HD_HOUS_SELLDETAIL.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR4 > HD_HOUS_SELLDETAIL_ADJUST INSERT');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SELLDETAIL_ADJUST
         SET PERPECTTAG = 'N',
             RECEIPTAMT = 0
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_SELLDETAIL_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_SELLDETAIL_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR5 > HD_HOUS_SELLDETAIL_ADJUST UPDATE');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_DAY_INCOME_ADJUST
                ( DEPT_CODE,           HOUSETAG,   INDT,
                  INSEQ,
                  BUILDNO,
                  HOUSENO,             CUST_CODE,   SEQ,         CUST_NAME,     DEPOSIT_NO,
                  INAMT,               INGUBUN,     INTYPE,      IHE_YN,        CDNO,
                  MOD_YN,              MOD_RAMT,    MOD_DAMT,    INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,         CHG_DATE,    VDEPOSIT_NO )
           SELECT A.DEPT_CODE,         A.HOUSETAG,  A.RECEIPTDATE,
                  NVL(B.INSEQ, 0) + ROW_NUMBER() OVER (PARTITION BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPTDATE
                                                           ORDER BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPTDATE),
                  A.BUILDNO,
                  A.HOUSENO,           A.CUST_CODE, A.SEQ,       '',            A.DEPOSIT_NO,
                  SUM(A.REALINCOMAMT), A.PAYTAG,    A.INCOMTYPE, 'N',           '',
                  'N',                 0,           0,           '',            '',
                  '',                  '',          ''
             FROM HD_HOUS_INCOME A,
                  (SELECT A.INDT, MAX(A.INSEQ) AS INSEQ
                     FROM HD_HOUS_DAY_INCOME_ADJUST A
                    WHERE A.DEPT_CODE = as_dept
                      AND A.HOUSETAG  = as_htag
                      AND A.INDT      IN (SELECT DISTINCT RECEIPTDATE
                                            FROM HD_HOUS_INCOME
                                           WHERE DEPT_CODE = as_dept
                                             AND HOUSETAG  = as_htag
                                             AND (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
                                      )
                    GROUP BY A.INDT 
                  ) B   
            WHERE (as_all = 'Y' OR (A.CUST_CODE = as_cust AND A.SEQ = TO_NUMBER(as_seq)))
              AND A.DEPT_CODE   = as_dept
              AND A.HOUSETAG    = as_htag
              AND A.RECEIPTDATE = B.INDT (+)
              AND EXISTS (SELECT 1
                            FROM HD_HOUS_SELL B
                           WHERE B.DEPT_CODE = as_dept
                             AND B.HOUSETAG  = as_htag
                             AND B.CUST_CODE = A.CUST_CODE
                             AND B.SEQ       = A.SEQ
                             AND B.CHANGETAG = '1')
            GROUP BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPTDATE, B.INSEQ, A.BUILDNO, A.HOUSENO,
                     A.CUST_CODE, A.SEQ, A.DEPOSIT_NO, A.PAYTAG, A.INCOMTYPE;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR6 > HD_HOUS_DAY_INCOME_ADJUST INSERT ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   COMMIT WORK;

/*---------------------------------------------------------------------------*/
   OPEN CURIN;
   LOOP
      FETCH CURIN 
       INTO c_cust, c_seq, c_indt, c_inseq;
       EXIT WHEN CURIN%NOTFOUND;

      PROC_HD_INCOME_CALC_ADJUST(c_cust, c_seq, c_indt, c_inseq);

   END LOOP;
   CLOSE CURIN;

   COMMIT WORK;

/*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_JUNGSAN2;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_JUNGSAN2" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_all  IN VARCHAR2, --전체여부
   as_cust IN VARCHAR2, --고객
   as_seq  IN VARCHAR2, --고객순번
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_cust      VARCHAR2(20);
c_seq       NUMBER(5);
c_indt      VARCHAR2(8);
c_inseq     NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURIN IS
SELECT CUST_CODE, SEQ, INDT, INSEQ
  FROM HD_HOUS_DAY_INCOME_ADJUST
 WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
   AND DEPT_CODE = as_dept
   AND HOUSETAG  = as_htag
   AND EXISTS (SELECT 1
                 FROM HD_HOUS_SELL
                WHERE DEPT_CODE = as_dept
                  AND HOUSETAG  = as_htag
                  AND CUST_CODE = HD_HOUS_DAY_INCOME_ADJUST.CUST_CODE
                  AND SEQ       = HD_HOUS_DAY_INCOME_ADJUST.SEQ
                  AND CHANGETAG = '1');

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   BEGIN
      DELETE FROM HD_HOUS_SELLDETAIL_ADJUST
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_SELLDETAIL_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_SELLDETAIL_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR1 > HD_HOUS_SELLDETAIL_ADJUST DELETE');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      DELETE FROM HD_HOUS_INCOME_ADJUST
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_INCOME_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_INCOME_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR2 > HD_HOUS_INCOME_ADJUST DELETE');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      DELETE FROM HD_HOUS_DAY_INCOME_ADJUST
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_DAY_INCOME_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_DAY_INCOME_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR3 > HD_HOUS_DAY_INCOME_ADJUST DELETE');
         ROLLBACK;
         RETURN;
   END;
   
   BEGIN
      INSERT INTO HD_HOUS_SELLDETAIL_ADJUST
      SELECT *
        FROM HD_HOUS_SELLDETAIL
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_SELLDETAIL.CUST_CODE
                        AND SEQ       = HD_HOUS_SELLDETAIL.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR4 > HD_HOUS_SELLDETAIL_ADJUST INSERT');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE HD_HOUS_SELLDETAIL_ADJUST
         SET PERPECTTAG = 'N',
             RECEIPTAMT = 0
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND COUNTS    = '90'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_SELLDETAIL_ADJUST.CUST_CODE
                        AND SEQ       = HD_HOUS_SELLDETAIL_ADJUST.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR5 > HD_HOUS_SELLDETAIL_ADJUST UPDATE');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_INCOME_ADJUST
      SELECT *
        FROM HD_HOUS_INCOME
       WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
         AND DEPT_CODE  = as_dept
         AND HOUSETAG   = as_htag
         AND COUNTS    <> '90'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND CUST_CODE = HD_HOUS_INCOME.CUST_CODE
                        AND SEQ       = HD_HOUS_INCOME.SEQ
                        AND CHANGETAG = '1');
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR6 > HD_HOUS_INCOME_ADJUST INSERT');
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      INSERT INTO HD_HOUS_DAY_INCOME_ADJUST
                ( DEPT_CODE,           HOUSETAG,   INDT,
                  INSEQ,
                  BUILDNO,
                  HOUSENO,             CUST_CODE,   SEQ,         CUST_NAME,     DEPOSIT_NO,
                  INAMT,               INGUBUN,     INTYPE,      IHE_YN,        CDNO,
                  MOD_YN,              MOD_RAMT,    MOD_DAMT,    INPUT_DUTY_ID, INPUT_DATE,
                  CHG_DUTY_ID,         CHG_DATE,    VDEPOSIT_NO )
           SELECT A.DEPT_CODE,         A.HOUSETAG,  A.RECEIPTDATE,
                  NVL(B.INSEQ, 0) + ROW_NUMBER() OVER (PARTITION BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPTDATE
                                                           ORDER BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPTDATE),
                  A.BUILDNO,
                  A.HOUSENO,           A.CUST_CODE, A.SEQ,       '',            A.DEPOSIT_NO,
                  SUM(A.REALINCOMAMT), A.PAYTAG,    A.INCOMTYPE, 'N',           '',
                  'N',                 0,           0,           '',            '',
                  '',                  '',          ''
             FROM HD_HOUS_INCOME A,
                  (SELECT A.INDT, MAX(A.INSEQ) AS INSEQ
                     FROM HD_HOUS_DAY_INCOME_ADJUST A
                    WHERE A.DEPT_CODE = as_dept
                      AND A.HOUSETAG  = as_htag
                      AND A.INDT      IN (SELECT DISTINCT RECEIPTDATE
                                            FROM HD_HOUS_INCOME
                                           WHERE DEPT_CODE = as_dept
                                             AND HOUSETAG  = as_htag
                                             AND COUNTS    = '90'
                                             AND (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
                                         )
                    GROUP BY A.INDT 
                  ) B   
            WHERE (as_all = 'Y' OR (A.CUST_CODE = as_cust AND A.SEQ = TO_NUMBER(as_seq)))
              AND A.DEPT_CODE   = as_dept
              AND A.HOUSETAG    = as_htag
              AND A.COUNTS      = '90'
              AND A.RECEIPTDATE = B.INDT (+)
              AND EXISTS (SELECT 1
                            FROM HD_HOUS_SELL B
                           WHERE B.DEPT_CODE = as_dept
                             AND B.HOUSETAG  = as_htag
                             AND B.CUST_CODE = A.CUST_CODE
                             AND B.SEQ       = A.SEQ
                             AND B.CHANGETAG = '1')
            GROUP BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPTDATE, A.INSEQ, A.BUILDNO, A.HOUSENO,
                     A.CUST_CODE, A.SEQ, A.DEPOSIT_NO, A.PAYTAG, A.INCOMTYPE;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'ERR7 > HD_HOUS_DAY_INCOME_ADJUST INSERT ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   COMMIT WORK;

/*---------------------------------------------------------------------------*/
   OPEN CURIN;
   LOOP
      FETCH CURIN 
       INTO c_cust, c_seq, c_indt, c_inseq;
       EXIT WHEN CURIN%NOTFOUND;

      PROC_HD_INCOME_CALC_ADJUST(c_cust, c_seq, c_indt, c_inseq);

   END LOOP;
   CLOSE CURIN;

   COMMIT WORK;

/*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_ONCESALE;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_ONCESALE" (
   as_custcode     IN VARCHAR2, --고객코드
   ai_seq          IN INTEGER,  --고객순번
   as_input_date   IN VARCHAR2, --입금일자
   ai_inseq        IN INTEGER   --입금순번
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_maxcnt       VARCHAR2(2);

v_osrate       FLOAT;
v_dept         VARCHAR2(12);
v_htag         VARCHAR2(1);
v_user         VARCHAR2(12);
v_bank         VARCHAR(8);
v_banknm       VARCHAR2(30);

t_a_amt        NUMBER(15);  /* 약정금액 */
t_a_lamt       NUMBER(15);
t_a_bamt       NUMBER(15);
t_a_vamt       NUMBER(15);
t_a_mamt       NUMBER(15);

t_damt         NUMBER(15);  /* 할인금액 */

t_real_amt     NUMBER(15);  /* 실납입금액 */
t_real_lamt    NUMBER(15);
t_real_bamt    NUMBER(15);
t_real_vamt    NUMBER(15);
t_real_mamt    NUMBER(15);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURAGREE(a_cust IN VARCHAR2, a_seq IN INTEGER) IS
SELECT COUNTS,
       LANDAMT,
       BUILDAMT,
       VATAMT,
       MANAGEAMT
  FROM HD_HOUS_SELLDETAIL
 WHERE CUST_CODE = a_cust
   AND SEQ       = a_seq
 ORDER BY COUNTS;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*---------------------------------------------------------------------------*/
   SELECT A.INPUT_DUTY_ID, B.BANK_CODE, B.BANK_NAME, NVL(C.ONCESALERATE, 0)
     INTO v_user,          v_bank,      v_banknm,    v_osrate
     FROM HD_HOUS_DAY_INCOME A,
          HD_CODE_DEPOSIT B,
          HD_CODE_HOUSE C
    WHERE A.CUST_CODE  = as_custcode
      AND A.SEQ        = ai_seq
      AND A.INDT       = as_input_date
      AND A.INSEQ      = ai_inseq
      AND A.DEPT_CODE  = B.DEPT_CODE
      AND A.HOUSETAG   = B.HOUSETAG
      AND A.DEPOSIT_NO = B.DEPOSIT_NO
      AND A.DEPT_CODE  = C.DEPT_CODE
      AND A.HOUSETAG   = C.HOUSETAG;

   SELECT MAX(COUNTS)
     INTO v_maxcnt
     FROM HD_HOUS_SELLDETAIL
    WHERE CUST_CODE = as_custcode
      AND SEQ       = ai_seq;

   SELECT BUNAMT,  LANDAMT,  BUILDAMT, VATAMT,   MANAGEAMT
     INTO t_a_amt, t_a_lamt, t_a_bamt, t_a_vamt, t_a_mamt
     FROM HD_HOUS_SELLDETAIL
    WHERE CUST_CODE = as_custcode
      AND SEQ       = ai_seq
      AND COUNTS    = v_maxcnt;

   SELECT TRUNC(SUM(BUNAMT) * (v_osrate / 100))
     INTO t_damt
     FROM HD_HOUS_SELLDETAIL
    WHERE CUST_CODE = as_custcode
      AND SEQ       = ai_seq;

   t_real_amt := t_a_amt - t_damt; /* 실납입금액 */

   /*---------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_INCOME
                ( CUST_CODE,        SEQ,            COUNTS,          TIMES,
                  DEPT_CODE,        HOUSETAG,       BUILDNO,         HOUSENO,
                  DEPOSIT_NO,       RECEIPTDATE,
                  RECEIPTAMT,       RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT,
                  DELAYDAYS,
                  DELAYAMT,
                  DISCNTDAYS,
                  DISCNTAMT,
                  REALINCOMAMT,     REALLANDAMT,    REALBUILDAMT,    REALVATAMT,
                  BANK_CODE,        BANK_NAME,      PAYTAG,          INCOMTYPE,
                  MOD_YN,           REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                  TAXDATE,          TAXSEQ,         INSEQ,
                  INPUT_DUTY_ID,    INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                  SLIPTYPE,         VDEPOSIT_NO,    DETAILMOD_YN,    OUT_DT,
                  OUT_TM,           OUT_SEQ,        OUT_BANK,        REMARK,
                  RECEIPTMANAGEAMT, REALMANAGEAMT,
                  CDNO,             CD_BANK,        CD_EDATE,        CD_STYPE )
           SELECT A.CUST_CODE,      A.SEQ,          B.COUNTS,        1,
                  A.DEPT_CODE,      A.HOUSETAG,     A.BUILDNO,       A.HOUSENO,
                  A.DEPOSIT_NO,     A.INDT,
                  B.BUNAMT,         B.LANDAMT,      B.BUILDAMT,      B.VATAMT,
                  CASE WHEN A.INDT < B.AGREEDATE
                       THEN 0
                       ELSE TO_DATE(A.INDT, 'YYYYMMDD') - TO_DATE(B.AGREEDATE, 'YYYYMMDD')
                  END,     
                  0,
                  CASE WHEN A.INDT > B.AGREEDATE
                       THEN 0
                       ELSE TO_DATE(B.AGREEDATE, 'YYYYMMDD') - TO_DATE(A.INDT, 'YYYYMMDD')
                  END,     
                  0,
                  B.BUNAMT,         B.LANDAMT,      B.BUILDAMT,      B.VATAMT,
                  v_bank,           v_banknm,       A.INGUBUN,       A.INTYPE,
                  'N',              'Y',            '',              0,
                  '',               0,              A.INSEQ,
                  v_user,           v_sysdt,        '',              '',
                  '',               VDEPOSIT_NO,    'N',             '',
                  '',               0,              '',              A.REMARK,
                  B.MANAGEAMT,      B.MANAGEAMT,
                  '',               '',             '',              ''
             FROM HD_HOUS_DAY_INCOME A,
                  HD_HOUS_SELLDETAIL B
            WHERE A.CUST_CODE = as_custcode
              AND A.SEQ       = ai_seq
              AND A.INDT      = as_input_date
              AND A.INSEQ     = ai_inseq
              AND A.CUST_CODE = B.CUST_CODE
              AND A.SEQ       = B.SEQ
              AND B.COUNTS    < v_maxcnt;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_INCOME ER_01: ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   t_real_mamt := TRUNC(((t_a_mamt / t_a_amt) * t_real_amt) / 10) * 10;
   t_real_bamt := TRUNC(((t_a_bamt / (t_a_amt - t_a_mamt)) * (t_real_amt - t_real_mamt)) / 10) * 10;
   IF t_a_vamt = 0 THEN
      t_real_vamt := 0;
   ELSE
      t_real_vamt := t_real_bamt / 10;
   END IF;
   t_real_lamt := t_real_amt - t_real_mamt - t_real_bamt - t_real_vamt; 

   BEGIN
      INSERT INTO HD_HOUS_INCOME
                ( CUST_CODE,        SEQ,            COUNTS,          TIMES,
                  DEPT_CODE,        HOUSETAG,       BUILDNO,         HOUSENO,
                  DEPOSIT_NO,       RECEIPTDATE,
                  RECEIPTAMT,       RECEIPTLANDAMT, RECEIPTBUILDAMT, RECEIPTVATAMT,
                  DELAYDAYS,
                  DELAYAMT,
                  DISCNTDAYS,
                  DISCNTAMT,
                  REALINCOMAMT,     REALLANDAMT,    REALBUILDAMT,    REALVATAMT,
                  BANK_CODE,        BANK_NAME,      PAYTAG,          INCOMTYPE,
                  MOD_YN,           REAL_PAY_TAG,   SLIPDT,          SLIPSEQ,
                  TAXDATE,          TAXSEQ,         INSEQ,
                  INPUT_DUTY_ID,    INPUT_DATE,     CHG_DUTY_ID,     CHG_DATE,
                  SLIPTYPE,         VDEPOSIT_NO,    DETAILMOD_YN,    OUT_DT,
                  OUT_TM,           OUT_SEQ,        OUT_BANK,        REMARK,
                  RECEIPTMANAGEAMT, REALMANAGEAMT,
                  CDNO,             CD_BANK,        CD_EDATE,        CD_STYPE )

           SELECT A.CUST_CODE,      A.SEQ,          B.COUNTS,        1,
                  A.DEPT_CODE,      A.HOUSETAG,     A.BUILDNO,       A.HOUSENO,
                  A.DEPOSIT_NO,     A.INDT,
                  B.BUNAMT,         B.LANDAMT,      B.BUILDAMT,      B.VATAMT,
                  CASE WHEN A.INDT < B.AGREEDATE
                       THEN 0
                       ELSE TO_DATE(A.INDT, 'YYYYMMDD') - TO_DATE(B.AGREEDATE, 'YYYYMMDD')
                  END,     
                  0,
                  CASE WHEN A.INDT > B.AGREEDATE
                       THEN 0
                       ELSE TO_DATE(B.AGREEDATE, 'YYYYMMDD') - TO_DATE(A.INDT, 'YYYYMMDD')
                  END,     
                  t_damt,
                  t_real_amt,       t_real_lamt,    t_real_bamt,     t_real_vamt,
                  v_bank,           v_banknm,       A.INGUBUN,       A.INTYPE,
                  'N',              'Y',            '',              0,
                  '',               0,              A.INSEQ,
                  v_user,           v_sysdt,        '',              '',
                  '',               VDEPOSIT_NO,    'N',             '',
                  '',               0,              '',              A.REMARK,
                  B.MANAGEAMT,      t_real_mamt,
                  '',               '',             '',              ''
             FROM HD_HOUS_DAY_INCOME A,
                  HD_HOUS_SELLDETAIL B
            WHERE A.CUST_CODE = as_custcode
              AND A.SEQ       = ai_seq
              AND A.INDT      = as_input_date
              AND A.INSEQ     = ai_inseq
              AND A.CUST_CODE = B.CUST_CODE
              AND A.SEQ       = B.SEQ
              AND B.COUNTS    = v_maxcnt;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_INCOME ER_02: ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELLDETAIL
         SET RECEIPTAMT  = BUNAMT,
             PERPECTTAG  = 'Y',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = v_user
       WHERE CUST_CODE   = as_custcode
         AND SEQ         = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELLDETAIL ER_03: ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_DAY_INCOME
         SET IHE_YN      = 'Y',
             CHG_DUTY_ID = v_user,
             CHG_DATE    = v_sysdt
       WHERE CUST_CODE = as_custcode
         AND SEQ       = ai_seq
         AND INDT      = as_input_date
         AND INSEQ     = ai_inseq;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_DAY_INCOME ER_04: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_OUTCMS;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_OUTCMS" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일자
   as_to   IN VARCHAR2, --종료일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_inseq        NUMBER(5);

/*---------------------------------------------------------------------------*/
c_pdt          VARCHAR2(8);
c_ptm          VARCHAR2(6);
c_pseq         FLOAT;
c_pbank        VARCHAR2(6);
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_custname     VARCHAR2(100);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_deposit      VARCHAR2(100);
c_amt          NUMBER(15);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.PAYMENTDATE,
       A.PAYMENT_TIME,
       A.PAYMENTSEQ,
       A.BANK_CODE,
       B.CUST_CODE,
       B.SEQ,
       B.CUST_NAME,
       A.BUILDNO,
       A.HOUSENO,
       C.DEPOSIT_NO,
       A.PAYMENTAMT
  FROM SM_TRANS_CMS A,
       HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       HD_CODE_DEPOSIT D
 WHERE A.PAYMENTDATE BETWEEN a_fr AND a_to
   AND A.INCOMETAG   = 'I'
   AND A.CANCELTAG   = 'N'
   AND A.PROJ_CODE   = a_dept
   AND A.HOUSETAG    = a_htag
   AND A.PROC_STATUS = '0'
   AND A.PROJ_CODE   = B.DEPT_CODE
   AND A.HOUSETAG    = B.HOUSETAG
   AND A.BUILDNO     = B.BUILDNO
   AND A.HOUSENO     = B.HOUSENO
   AND B.CHANGETAG   = '1'
   AND A.PROJ_CODE   = C.DEPT_CODE
   AND A.HOUSETAG    = C.HOUSETAG
   AND A.DEPOSIT_NO  = C.OUTDEPOSITNO
   AND A.PROJ_CODE   = D.DEPT_CODE
   AND A.HOUSETAG    = D.HOUSETAG
   AND A.DEPOSIT_NO  = D.OUTDEPOSITNO
   AND D.RECEIPTTAG  NOT IN ('8', '9')
 ORDER BY A.PAYMENTDATE, A.PAYMENT_TIME, A.PAYMENTSEQ, A.BANK_CODE;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_fr)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;
--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   --오류처리
   --1.잘못된 계좌처리..
   --2.해당동호에 계약자가없는경우
   --3.현계약자가아닌경우
   --4.최종납입일보다 작은경우

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당현장에 등록되어있는 회계계좌가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND NOT EXISTS (SELECT 1
                           FROM HD_CODE_DEPOSIT A
                          WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                            AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                            AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO   
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_01: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자가 없습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                        AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO
                        AND A.RECEIPTTAG  NOT IN ('8', '9')   
                    )
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL A
                          WHERE SM_TRANS_CMS.PROJ_CODE = A.DEPT_CODE
                            AND SM_TRANS_CMS.HOUSETAG  = A.HOUSETAG
                            AND SM_TRANS_CMS.BUILDNO   = A.BUILDNO
                            AND SM_TRANS_CMS.HOUSENO   = A.HOUSENO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_02: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자는 계약상태가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                        AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO
                        AND A.RECEIPTTAG  NOT IN ('8', '9')   
                    )
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL A
                          WHERE SM_TRANS_CMS.PROJ_CODE = A.DEPT_CODE
                            AND SM_TRANS_CMS.HOUSETAG  = A.HOUSETAG
                            AND SM_TRANS_CMS.BUILDNO   = A.BUILDNO
                            AND SM_TRANS_CMS.HOUSENO   = A.HOUSENO
                            AND A.CHANGETAG            = '1'
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_03: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 입금일자 이후의 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                        AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO
                        AND A.RECEIPTTAG  NOT IN ('8', '9')   
                    )
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_INCOME A
                      WHERE SM_TRANS_CMS.PROJ_CODE   = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG    = A.HOUSETAG
                        AND SM_TRANS_CMS.BUILDNO     = A.BUILDNO
                        AND SM_TRANS_CMS.HOUSENO     = A.HOUSENO
                        AND SM_TRANS_CMS.PAYMENTDATE < A.RECEIPTDATE
                    );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_04: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURMAKE 
       INTO c_pdt, c_ptm, c_pseq,    c_pbank, c_cust, c_seq, c_custname,
            c_bno, c_hno, c_deposit, c_amt;
      EXIT WHEN CURMAKE%NOTFOUND;

      v_inseq := 0;
      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_inseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_pdt;

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO, INAMT,       INGUBUN,
                     INTYPE,        IHE_YN,     CDNO,        MOD_YN,
                     MOD_RAMT,      MOD_DAMT,   VDEPOSIT_NO,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,
                     OUT_DT,        OUT_TM,     OUT_SEQ,     OUT_BANK,
                     REMARK )
            VALUES ( as_dept,       as_htag,    c_pdt,       v_inseq,
                     c_bno,         c_hno,      c_cust,      c_seq,
                     c_custname,    c_deposit,  c_amt,       '1',
                     '2',           'N',        '',          'N',
                     0,             0,          '',
                     as_user,       v_sysdt,    '',          '',
                     c_pdt,         c_ptm,      c_pseq,      c_pbank,
                     'CMS일괄입금');
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME ER_05: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;
      PROC_HD_INCOME_CALC(c_cust, c_seq, c_pdt, v_inseq);
      
      v_cnt :=0;
      SELECT COUNT(*)
        INTO v_cnt
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_pdt
         AND INSEQ     = v_inseq
         AND IHE_YN    = 'Y';
      IF v_cnt > 0 THEN
         BEGIN
            UPDATE SM_TRANS_CMS
               SET PROC_STATUS  = '1',
                   ERR_TEXT     = '',
                   CHG_DATE     = v_sysdt,
                   CHG_DUTY_ID  = as_user
             WHERE PAYMENTDATE  = c_pdt
               AND PAYMENT_TIME = c_ptm
               AND PAYMENTSEQ   = c_pseq
               AND BANK_CODE    = c_pbank;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_06: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      ELSE
         BEGIN
            UPDATE SM_TRANS_CMS
               SET PROC_STATUS  = '2',
                   ERR_TEXT     = '입금프로시저에서 알수없는 오류가 발생했습니다',
                   CHG_DATE     = v_sysdt,
                   CHG_DUTY_ID  = as_user
             WHERE PAYMENTDATE  = c_pdt
               AND PAYMENT_TIME = c_ptm
               AND PAYMENTSEQ   = c_pseq
               AND BANK_CODE    = c_pbank;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_06: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      END IF;
      
   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_OUTVIRTURE;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_OUTVIRTURE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일자
   as_to   IN VARCHAR2, --종료일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_inseq        NUMBER(5);
v_comp         VARCHAR2(6);

/*---------------------------------------------------------------------------*/
c_outdt        VARCHAR2(8);
c_outtm        VARCHAR2(6);
c_outseq       FLOAT;
c_bank         VARCHAR2(6);
c_vdeposit     VARCHAR2(30);
c_incustnm     VARCHAR2(30);
c_amt          NUMBER(15);
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_custnm       VARCHAR2(50);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_mdeposit     VARCHAR2(50);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.TXDATE,
       A.TXTIME,
       A.JMSEQNO,
       A.CUSTNAME,
       E.VIRBANK_CODE,
       A.VACCTNO,
       NVL(A.PAYTXAMT, 0),
       B.CUST_CODE,
       B.SEQ,
       B.CUST_NAME,
       B.BUILDNO,
       B.HOUSENO,
       C.PA_DEPOSITNO
  FROM SM_TRANS_CB3_CVS_DATA A,
       (SELECT B.CUST_CODE,
               B.SEQ,
               B.CUST_NAME,
               B.BUILDNO,
               B.HOUSENO,
               B.VDEPOSIT
          FROM HD_HOUS_SELL B,
               HD_CODE_HOUSE C
         WHERE B.DEPT_CODE     = C.DEPT_CODE
           AND B.HOUSETAG      = C.HOUSETAG
           AND B.DEPT_CODE     = a_dept
           AND B.HOUSETAG      = a_htag
           AND C.VIRDEPOSIT_YN = 'Y'
           AND B.VIR_YN        = 'Y'
           AND B.CHANGETAG     = '1'
       ) B,
       (SELECT OUTDEPOSITNO, MAX(DEPOSIT_NO) AS PA_DEPOSITNO
          FROM HD_CODE_DEPOSIT
         WHERE DEPT_CODE = a_dept
           AND HOUSETAG  = a_htag
         GROUP BY OUTDEPOSITNO
       )C,
       SM_TRANS_VIRTURE_DEPOSIT D,
       HD_CODE_HOUSE E
 WHERE A.TXDATE BETWEEN  a_fr AND a_to
   AND A.PROJ_CODE   = a_dept
   AND A.HOUSETAG    = a_htag
   AND A.PROC_STATUS = 'A'
   AND A.VACCTNO      = B.VDEPOSIT
   AND D.COMPANY_CODE = '100'
   AND A.BANKCODE      = D.BANK_CODE
   AND A.VACCTNO      = D.VIR_DEPOSITNO
   AND replace(D.PA_DEPOSITNO,'-') = replace(C.OUTDEPOSITNO,'-')
   AND A.PROJ_CODE    = E.DEPT_CODE
   AND A.HOUSETAG     = E.HOUSETAG
 ORDER BY A.TXDATE, A.TXTIME, A.JMSEQNO;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_fr)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;
--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   SELECT COMPANY_CODE
     INTO v_comp
     FROM HD_CODE_DEPT
    WHERE DEPT_CODE = as_dept;

   /*------------------------------------------------------------------------*/
   --오류처리
   --1.잘못된 가상계좌
   --2.모계좌가없는경우
   --3.해당동호에 계약자가없는경우
   --4.현계약자가아닌경우
   --5.최종납입일보다 작은경우

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '9',
             ERR_TEXT    = '해당가상계좌를 사용하는 동호가 없습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = 'A'
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL A,
                                HD_CODE_HOUSE B
                          WHERE A.DEPT_CODE     = B.DEPT_CODE
                            AND A.HOUSETAG      = B.HOUSETAG
                            AND A.DEPT_CODE     = as_dept
                            AND A.HOUSETAG      = as_htag
                            AND A.VIR_YN        = 'Y'
                            AND B.VIRDEPOSIT_YN = 'Y'
                            AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        )
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A,
                                HD_CODE_HOUSE B
                          WHERE A.DEPT_CODE      = B.DEPT_CODE
                            AND A.HOUSETAG       = B.HOUSETAG
                            AND A.DEPT_CODE      = as_dept
                            AND A.HOUSETAG       = as_htag
                            AND A.VIR_YN         = 'Y'
                            AND B.VIRDEPOSIT2_YN = 'Y'
                            AND A.VDEPOSIT       = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_01: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '9',
             ERR_TEXT    = '해당 가상계좌에 모계좌가 없거나 해당현장의 등록된 계좌가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = 'A'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_CODE_HOUSE B
                      WHERE A.DEPT_CODE     = B.DEPT_CODE
                        AND A.HOUSETAG      = B.HOUSETAG
                        AND A.DEPT_CODE     = as_dept
                        AND A.HOUSETAG      = as_htag
                        AND A.VIR_YN        = 'Y'
                        AND B.VIRDEPOSIT_YN = 'Y'
                        AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                    )
         AND NOT EXISTS (SELECT 1
                           FROM SM_TRANS_VIRTURE_DEPOSIT A,
                                HD_CODE_DEPOSIT B
                          WHERE A.COMPANY_CODE  = v_comp
                            AND A.VIR_DEPOSITNO = SM_TRANS_CB3_CVS_DATA.VACCTNO
                            AND  replace(A.PA_DEPOSITNO,'-')  = replace(B.OUTDEPOSITNO,'-')
                            AND B.DEPT_CODE     = as_dept
                            AND B.HOUSETAG      = as_htag
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_02: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '9',
             ERR_TEXT    = '해당동호에 계약자는 계약상태가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = 'A'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_CODE_HOUSE B
                      WHERE A.DEPT_CODE     = B.DEPT_CODE
                        AND A.HOUSETAG      = B.HOUSETAG
                        AND A.DEPT_CODE     = as_dept
                        AND A.HOUSETAG      = as_htag
                        AND A.VIR_YN        = 'Y'
                        AND B.VIRDEPOSIT_YN = 'Y'
                        AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                    )
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL A
                          WHERE A.DEPT_CODE = SM_TRANS_CB3_CVS_DATA.PROJ_CODE
                            AND A.HOUSETAG  = SM_TRANS_CB3_CVS_DATA.HOUSETAG
                            AND A.VDEPOSIT  = SM_TRANS_CB3_CVS_DATA.VACCTNO
                            AND A.CHANGETAG = '1'
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_03: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '9',
             ERR_TEXT    = '해당동호에 입금일자 이후의 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = 'A'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_CODE_HOUSE B
                      WHERE A.DEPT_CODE     = B.DEPT_CODE
                        AND A.HOUSETAG      = B.HOUSETAG
                        AND A.DEPT_CODE     = as_dept
                        AND A.HOUSETAG      = as_htag
                        AND A.VIR_YN        = 'Y'
                        AND B.VIRDEPOSIT_YN = 'Y'
                        AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                    )
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_HOUS_INCOME B
                      WHERE A.DEPT_CODE   = SM_TRANS_CB3_CVS_DATA.PROJ_CODE
                        AND A.HOUSETAG    = SM_TRANS_CB3_CVS_DATA.HOUSETAG
                        AND A.VDEPOSIT    = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        AND A.CUST_CODE   = B.CUST_CODE
                        AND A.SEQ         = B.SEQ
                        AND B.RECEIPTDATE > SM_TRANS_CB3_CVS_DATA.TXDATE
                    );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_04: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURMAKE
       INTO c_outdt, c_outtm, c_outseq, c_incustnm, c_bank, c_vdeposit,
            c_amt,   c_cust,  c_seq,    c_custnm, c_bno,      c_hno,  c_mdeposit;
      EXIT WHEN CURMAKE%NOTFOUND;

      v_inseq := 0;
      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_inseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_outdt;

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO, INAMT,       INGUBUN,
                     INTYPE,        IHE_YN,     CDNO,        MOD_YN,
                     MOD_RAMT,      MOD_DAMT,   VDEPOSIT_NO,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,
                     OUT_DT,        OUT_TM,     OUT_SEQ,     OUT_BANK,
                     REMARK )
            VALUES ( as_dept,       as_htag,    c_outdt,     v_inseq,
                     c_bno,         c_hno,      c_cust,      c_seq,
                     c_custnm,      c_mdeposit, c_amt,       '1',
                     '5',           'N',        '',          'N',
                     0,             0,          c_vdeposit,
                     as_user,       v_sysdt,    '',          '',
                     c_outdt,       c_outtm,    c_outseq,    c_bank,
                     '가상계좌 일괄입금 : ' || c_incustnm );
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME ER_06: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;
      PROC_HD_INCOME_CALC(c_cust, c_seq, c_outdt, v_inseq);

      v_cnt :=0;
      SELECT COUNT(*)
        INTO v_cnt
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_outdt
         AND INSEQ     = v_inseq
         AND IHE_YN    = 'Y';
      IF v_cnt > 0 THEN
         BEGIN
            UPDATE SM_TRANS_CB3_CVS_DATA
               SET PROC_STATUS = '1',
                   BUILDNO     = c_bno,
                   HOUSENO     = c_hno,
                   ERR_TEXT    = '',
                   CHG_DATE    = v_sysdt,
                   CHG_DUTY_ID = as_user
             WHERE TXDATE      = c_outdt
               AND TXTIME      = c_outtm
               AND JMSEQNO     = c_outseq;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_07: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      ELSE
         BEGIN
            UPDATE SM_TRANS_CB3_CVS_DATA
               SET PROC_STATUS  = '9',
                   ERR_TEXT     = '입금프로시저에서 알수없는 오류가 발생했습니다',
                   CHG_DATE     = v_sysdt,
                   CHG_DUTY_ID  = as_user
             WHERE TXDATE       = c_outdt
               AND TXTIME      = c_outtm
               AND JMSEQNO      = c_outseq;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_08: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      END IF;
   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_OUTVIRTURE_ORG;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_OUTVIRTURE_ORG" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일자
   as_to   IN VARCHAR2, --종료일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_inseq        NUMBER(5);
v_mdeposit     VARCHAR2(50);

/*---------------------------------------------------------------------------*/
c_outdt        VARCHAR2(8);
c_outtm        VARCHAR2(6);
c_outseq       FLOAT;
c_bank         VARCHAR2(6);
c_vdeposit     VARCHAR2(30);
c_amt          NUMBER(15);
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_custnm       VARCHAR2(50);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_mdepositout  VARCHAR2(50);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.TXDATE,
       A.TXTIME,
       A.JMSEQNO,
       A.BANKCODE,
       A.VACCTNO,
       NVL(A.PAYTXAMT, 0),
       B.CUST_CODE,
       B.SEQ,
       B.CUST_NAME,
       B.BUILDNO,
       B.HOUSENO,
       C.PA_DEPOSITNO
  FROM SM_TRANS_CB3_CVS_DATA A,
       (SELECT B.CUST_CODE,
               B.SEQ,
               B.CUST_NAME,
               B.BUILDNO,
               B.HOUSENO,
               B.VDEPOSIT
          FROM HD_HOUS_SELL B,
               HD_CODE_HOUSE C
         WHERE B.DEPT_CODE     = C.DEPT_CODE
           AND B.HOUSETAG      = C.HOUSETAG
           AND B.DEPT_CODE     = a_dept
           AND B.HOUSETAG      = a_htag
           AND C.VIRDEPOSIT_YN = 'Y'
           AND B.VIR_YN        = 'Y'
           AND B.CHANGETAG     = '1'
       ) B,
       SM_TRANS_VIRTURE_DEPOSIT C
 WHERE A.TXDATE BETWEEN  a_fr AND a_to
   AND A.PROJ_CODE    = a_dept
   AND A.HOUSETAG     = a_htag
   AND A.PROC_STATUS  = '0'
   AND C.COMPANY_CODE = '100'
   AND A.VACCTNO      = B.VDEPOSIT
   AND A.BANKCODE     = C.BANK_CODE
   AND A.VACCTNO      = C.VIR_DEPOSITNO
 ORDER BY A.TXDATE, A.TXTIME, A.JMSEQNO;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_fr)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;
--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   --오류처리
   --1.잘못된 가상계좌
   --2.모계좌가없는경우
   --3.해당동호에 계약자가없는경우
   --4.현계약자가아닌경우
   --5.최종납입일보다 작은경우

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당가상계좌를 사용하는 동호가 없습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL A,
                                HD_CODE_HOUSE B
                          WHERE A.DEPT_CODE     = B.DEPT_CODE
                            AND A.HOUSETAG      = B.HOUSETAG
                            AND A.DEPT_CODE     = as_dept
                            AND A.HOUSETAG      = as_htag
                            AND A.VIR_YN        = 'Y'
                            AND B.VIRDEPOSIT_YN = 'Y'
                            AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        )
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A,
                                HD_CODE_HOUSE B
                          WHERE A.DEPT_CODE      = B.DEPT_CODE
                            AND A.HOUSETAG       = B.HOUSETAG
                            AND A.DEPT_CODE      = as_dept
                            AND A.HOUSETAG       = as_htag
                            AND A.VIR_YN         = 'Y'
                            AND B.VIRDEPOSIT2_YN = 'Y'
                            AND A.VDEPOSIT       = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_01: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당 가상계좌에 모계좌가 등록되어있지않습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_CODE_HOUSE B
                      WHERE A.DEPT_CODE     = B.DEPT_CODE
                        AND A.HOUSETAG      = B.HOUSETAG
                        AND A.DEPT_CODE     = as_dept
                        AND A.HOUSETAG      = as_htag
                        AND A.VIR_YN        = 'Y'
                        AND B.VIRDEPOSIT_YN = 'Y'
                        AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                    )
         AND NOT EXISTS (SELECT 1
                           FROM SM_TRANS_VIRTURE_DEPOSIT A
                          WHERE A.COMPANY_CODE  = '100'
                            AND A.BANK_CODE     = SM_TRANS_CB3_CVS_DATA.BANKCODE
                            AND A.VIR_DEPOSITNO = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_02: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자는 계약상태가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_CODE_HOUSE B
                      WHERE A.DEPT_CODE     = B.DEPT_CODE
                        AND A.HOUSETAG      = B.HOUSETAG
                        AND A.DEPT_CODE     = as_dept
                        AND A.HOUSETAG      = as_htag
                        AND A.VIR_YN        = 'Y'
                        AND B.VIRDEPOSIT_YN = 'Y'
                        AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                    )
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL A
                          WHERE A.DEPT_CODE = SM_TRANS_CB3_CVS_DATA.PROJ_CODE
                            AND A.HOUSETAG  = SM_TRANS_CB3_CVS_DATA.HOUSETAG
                            AND A.VDEPOSIT  = SM_TRANS_CB3_CVS_DATA.VACCTNO
                            AND A.CHANGETAG = '1'
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_03: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 입금일자 이후의 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_CODE_HOUSE B
                      WHERE A.DEPT_CODE     = B.DEPT_CODE
                        AND A.HOUSETAG      = B.HOUSETAG
                        AND A.DEPT_CODE     = as_dept
                        AND A.HOUSETAG      = as_htag
                        AND A.VIR_YN        = 'Y'
                        AND B.VIRDEPOSIT_YN = 'Y'
                        AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                    )
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A,
                            HD_HOUS_INCOME B
                      WHERE A.DEPT_CODE   = SM_TRANS_CB3_CVS_DATA.PROJ_CODE
                        AND A.HOUSETAG    = SM_TRANS_CB3_CVS_DATA.HOUSETAG
                        AND A.VDEPOSIT    = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        AND A.CUST_CODE   = B.CUST_CODE
                        AND A.SEQ         = B.SEQ
                        AND B.RECEIPTDATE > SM_TRANS_CB3_CVS_DATA.TXDATE
                    );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_04: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURMAKE 
       INTO c_outdt, c_outtm, c_outseq, c_bank,   c_vdeposit, c_amt,
            c_cust,  c_seq,   c_custnm, c_bno,    c_hno,      c_mdepositout;
      EXIT WHEN CURMAKE%NOTFOUND;

      v_inseq := 0;
      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_inseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_outdt;

      SELECT MAX(DEPOSIT_NO)
        INTO v_mdeposit
        FROM HD_CODE_DEPOSIT
       WHERE DEPT_CODE    = as_dept
         AND HOUSETAG     = as_htag
         AND OUTDEPOSITNO = c_mdepositout;

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO, INAMT,       INGUBUN,
                     INTYPE,        IHE_YN,     CDNO,        MOD_YN,
                     MOD_RAMT,      MOD_DAMT,   VDEPOSIT_NO,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,
                     OUT_DT,        OUT_TM,     OUT_SEQ,     OUT_BANK,
                     REMARK )
            VALUES ( as_dept,       as_htag,    c_outdt,     v_inseq,
                     c_bno,         c_hno,      c_cust,      c_seq,
                     c_custnm,      v_mdeposit, c_amt,       '1',
                     '5',           'N',        '',          'N',
                     0,             0,          c_vdeposit,
                     as_user,       v_sysdt,    '',          '',
                     c_outdt,       c_outtm,    c_outseq,    c_bank,
                     '가상계좌 일괄입금');
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME ER_06: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;

      COMMIT WORK;
      PROC_HD_INCOME_CALC(c_cust, c_seq, c_outdt, v_inseq);
      
      v_cnt :=0;
      SELECT COUNT(*)
        INTO v_cnt
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_outdt
         AND INSEQ     = v_inseq
         AND IHE_YN    = 'Y';
      IF v_cnt > 0 THEN
         BEGIN
            UPDATE SM_TRANS_CB3_CVS_DATA
               SET PROC_STATUS = '1',
                   ERR_TEXT    = '',
                   CHG_DATE    = v_sysdt,
                   CHG_DUTY_ID = as_user
             WHERE TXDATE      = c_outdt
               AND TXTIME      = c_outtm
               AND JMSEQNO     = c_outseq;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_07: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      ELSE
         BEGIN
            UPDATE SM_TRANS_CB3_CVS_DATA
               SET PROC_STATUS  = '2',
                   ERR_TEXT     = '입금프로시저에서 알수없는 오류가 발생했습니다',
                   CHG_DATE     = v_sysdt,
                   CHG_DUTY_ID  = as_user
             WHERE TXDATE       = c_outdt
               AND TXTIME       = c_outtm
               AND JMSEQNO      = c_outseq;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_08: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      END IF;

      COMMIT WORK;
   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
--   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_SPECIALAMT;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_SPECIALAMT" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --입금일자
   as_tp   IN VARCHAR2, --입금구분(D:이자대납, E:선공제, F:임대위탁)
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_nm           VARCHAR2(10);
v_inseq        NUMBER(5);
v_deposit      VARCHAR2(30);

c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_custname     VARCHAR2(100);
c_amt          NUMBER(15);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT A.CUST_CODE,
       A.SEQ,
       A.BUILDNO,
       A.HOUSENO,
       A.CUST_NAME,
       CASE WHEN as_tp = 'D'
            THEN A.PROXYAMT
            ELSE CASE WHEN as_tp = 'E'
                      THEN A.PREDISAMT
                      ELSE A.TRUSTAMT
                 END
       END AS AMT
  FROM HD_HOUS_SELL A
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.CHANGETAG = '1'
   AND ((as_tp = 'D' AND NVL(A.PROXY_TAG,  'N') = 'Y') OR
        (as_tp = 'E' AND NVL(A.PREDIS_TAG, 'N') = 'Y') OR
        (as_tp = 'F' AND NVL(A.TRUST_TAG,  'N') = 'Y'))
   AND ((as_tp = 'D' AND NVL(A.PROXYAMT, '0')  > 0) OR
        (as_tp = 'E' AND NVL(A.PREDISAMT, '0') > 0) OR
        (as_tp = 'F' AND NVL(A.TRUSTAMT, '0')  > 0))
   AND NOT EXISTS (SELECT 1
                     FROM HD_HOUS_INCOME D
                    WHERE D.CUST_CODE    = A.CUST_CODE
                      AND D.SEQ          = A.SEQ
                      AND (D.PAYTAG      = as_tp OR 
                           D.RECEIPTDATE > as_dt)
                  )
   AND NOT EXISTS (SELECT 1
                     FROM HD_HOUS_SELLDETAIL E
                    WHERE E.CUST_CODE   = A.CUST_CODE
                      AND E.SEQ         = A.SEQ
                      AND E.COUNTS      < '90'
                      AND E.PERPECTTAG  = 'N'
                  );

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND ((as_tp = 'D' AND NVL(PROXY_TAG, 'N')  = 'Y') OR
           (as_tp = 'E' AND NVL(PREDIS_TAG, 'N') = 'Y') OR
           (as_tp = 'F' AND NVL(TRUST_TAG, 'N')  = 'Y'));
   IF v_cnt <> 1 THEN
      IF as_tp = 'D' THEN
         v_nm := '이자대납';
      ELSIF as_tp = 'E' THEN
         v_nm := '선공제';
      ELSE
         v_nm := '임대위탁';
      END IF;

      RAISE_APPLICATION_ERROR(-20002, '해당현장은 ' || v_nm || ' 관리 현장이 아닙니다');  
      ROLLBACK;
      RETURN;
   END IF;

   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_dt)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;
--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_deposit  := '';

   SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND RECEIPTTAG NOT IN ('8', '9')
      AND ROWNUM < 2
    ORDER BY LISTORDER;
   IF v_deposit = 'XXXXX' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 입금계좌를 등록하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag);
   LOOP
      FETCH CURMAKE 
       INTO c_cust, c_seq, c_bno, c_hno, c_custname, c_amt;
      EXIT WHEN CURMAKE%NOTFOUND;

      v_inseq := 0;
      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_inseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = as_dt;

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO, INAMT,       INGUBUN,
                     INTYPE,        IHE_YN,     CDNO,        MOD_YN,
                     MOD_RAMT,      MOD_DAMT,   VDEPOSIT_NO,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,
                     OUT_DT,        OUT_TM,     OUT_SEQ,     OUT_BANK,
                     REMARK )
            VALUES ( as_dept,       as_htag,    as_dt,       v_inseq,
                     c_bno,         c_hno,      c_cust,      c_seq,
                     c_custname,    v_deposit,  0,           as_tp,
                     '8',           'N',        '',          'Y',
                     0,             c_amt,      '',
                     as_user,       v_sysdt,    '',          '',
                     '',            '',         0,           '',
                     '');
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME ER_01: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;
      PROC_HD_INCOME_CALC(c_cust, c_seq, as_dt, v_inseq);
   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_VIRTURE;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_VIRTURE" (
   as_dt      IN VARCHAR2, --처리일자
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_dept      VARCHAR2(12);
v_htag      VARCHAR2(1);
v_bno       VARCHAR2(10);
v_hno       VARCHAR2(10);
v_cust      VARCHAR2(20);
v_seq       NUMBER(5);

/*---------------------------------------------------------------------------*/
v_sysdt     VARCHAR2(14);
v_cnt       NUMBER(5);

/*---------------------------------------------------------------------------*/
c_tcd       VARCHAR2(8);
c_il        VARCHAR2(8);
c_ccd       VARCHAR2(8);
c_dseq      VARCHAR2(8);
c_vno       VARCHAR2(16);
c_damt      NUMBER(13);
c_dst       VARCHAR2(1);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURP(a_dt IN VARCHAR2) IS
SELECT TROCCORG_CD,
       TR_IL,
       CPORG_CD,
       DEPTR_SEQ,
       VA_NO,
       DEP_AMT,
       NVL(DEPT_ST, 'X')
  FROM HD_VIRTURE_ACCOUNT
 WHERE TR_IL   = a_dt;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   RAISE_APPLICATION_ERROR(-20002, '해당프로시져는 사용하지않습니다');
   ROLLBACK;
   RETURN;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_VIRTURE
    WHERE TR_IL >= as_dt
      AND PROCESSTAG = '3';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당일자 이후에 이체된 자료가 존재하므로 처리할 수 없습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

   BEGIN
      DELETE HD_HOUS_VIRTURE
       WHERE TR_IL >= as_dt;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line('UPDATE HD_HOUS_VIRTURE ERROR:' || sqlerrm); 
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_VIRTURE ERROR.');
         ROLLBACK;
         RETURN;
   END;

   OPEN CURP(as_dt);
   LOOP
      FETCH CURP 
       INTO c_tcd, c_il, c_ccd, c_dseq, c_vno, c_damt, c_dst;
       EXIT WHEN CURP%NOTFOUND;

      v_cnt := 0;
      SELECT COUNT(*)
        INTO v_cnt
        FROM HD_CODE_HOUSE A,
             HD_HOUS_SUPPLY B,
             HD_HOUS_SELL C
       WHERE A.DEPT_CODE   = B.DEPT_CODE
         AND A.HOUSETAG    = B.HOUSETAG
         AND B.DEPT_CODE   = C.DEPT_CODE
         AND B.HOUSETAG    = C.HOUSETAG
         AND B.BUILDNO     = C.BUILDNO
         AND B.HOUSENO     = C.HOUSENO
         AND ((C.CHANGETAG  = '1' AND C.CONTRACTDATE <= as_dt) OR
              (C.CHANGETAG <> '1' AND C.CHANGEDATE    > as_dt))
         AND C.LASTCHANGEDATE <= as_dt
         AND A.VIRDEPOSIT_YN   = 'Y'
         AND B.VIRDEPOSIT      = c_vno;

      IF v_cnt = 1 AND c_dst = '1' THEN BEGIN
         INSERT INTO HD_HOUS_VIRTURE
                   ( TROCCORG_CD,   TR_IL,      CPORG_CD,    DEPTR_SEQ,
                     VA_NO,         DEP_AMT,    DEPT_ST,     PROCESSTAG,
                     DEPT_CODE,     HOUSETAG,   BUILDNO,     HOUSENO,
                     CUST_CODE,     SEQ,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
              SELECT c_tcd,         c_il,       c_ccd,       c_dseq,
                     c_vno,         c_damt,     c_dst,       '2',
                     A.DEPT_CODE,   A.HOUSETAG, B.BUILDNO,   B.HOUSENO,
                     C.CUST_CODE,   C.SEQ,
                     as_user,       v_sysdt,    '',          ''
                FROM HD_CODE_HOUSE A,
                     HD_HOUS_SUPPLY B,
                     HD_HOUS_SELL C
               WHERE A.DEPT_CODE   = B.DEPT_CODE
                 AND A.HOUSETAG    = B.HOUSETAG
                 AND B.DEPT_CODE   = C.DEPT_CODE
                 AND B.HOUSETAG    = C.HOUSETAG
                 AND B.BUILDNO     = C.BUILDNO
                 AND B.HOUSENO     = C.HOUSENO
                 AND ((C.CHANGETAG  = '1' AND C.CONTRACTDATE <= as_dt) OR
                      (C.CHANGETAG <> '1' AND C.CHANGEDATE    > as_dt))
                 AND C.LASTCHANGEDATE <= as_dt
                 AND A.VIRDEPOSIT_YN   = 'Y'
                 AND B.VIRDEPOSIT      = c_vno;
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line('01: INSERT HD_HOUS_VIRTURE ERROR:' || sqlerrm); 
            RAISE_APPLICATION_ERROR(-20002, '01: INSERT HD_HOUS_VIRTURE ERROR:');
            ROLLBACK;
             RETURN;
      END; ELSE BEGIN
         INSERT INTO HD_HOUS_VIRTURE
                   ( TROCCORG_CD,   TR_IL,      CPORG_CD,    DEPTR_SEQ,
                     VA_NO,         DEP_AMT,    DEPT_ST,     PROCESSTAG,
                     DEPT_CODE,     HOUSETAG,   BUILDNO,     HOUSENO,
                     CUST_CODE,     SEQ,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
             VALUES( c_tcd,         c_il,       c_ccd,       c_dseq,
                     c_vno,         c_damt,     c_dst,       '1',
                     '',            '',         '',          '',
                     '',           0,
                     as_user,       v_sysdt,    '',          '');
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line('02: INSERT HD_HOUS_VIRTURE ERROR:' || sqlerrm); 
            RAISE_APPLICATION_ERROR(-20002, '02: INSERT HD_HOUS_VIRTURE ERROR:');
            ROLLBACK;
             RETURN;
      END; END IF;
   END LOOP;
   CLOSE CURP;
 
   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_INCO_VIRTUREICHE;

CREATE OR REPLACE PROCEDURE "PROC_HD_INCO_VIRTUREICHE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --처리일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_trcd     VARCHAR2(8);
c_tdil     VARCHAR2(8);
c_cpcd     VARCHAR2(8);
c_dseq     VARCHAR2(7);
c_vano     VARCHAR2(16);
c_amt      NUMBER(15);
c_dept     VARCHAR2(12);
c_htag     VARCHAR2(1);
c_bno      VARCHAR2(10);
c_hno      VARCHAR2(10);
c_cust     VARCHAR2(20);
c_seq      NUMBER(5);
c_custnm   VARCHAR2(50);
c_mdeposit VARCHAR2(50);

i_iseq     NUMBER(5);
i_cust     VARCHAR2(20);
i_seq      NUMBER(5);

v_incomseq NUMBER(5);
v_sysdt    VARCHAR2(14);
v_cnt      NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 가상계좌자료중 현제 계약상태이고 최종변경일이후 입금일이어야 입금처리가 가능 */
CURSOR CURVIR(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT A.TROCCORG_CD,
       A.TR_IL,
       A.CPORG_CD,
       A.DEPTR_SEQ,
       A.VA_NO,
       A.DEP_AMT,
       A.DEPT_CODE,
       A.HOUSETAG,
       A.BUILDNO,
       A.HOUSENO,
       A.CUST_CODE,
       A.SEQ,
       NVL(B.CUST_NAME, ''),
       NVL((SELECT MAX(DEPOSIT_NO)
              FROM HD_CODE_DEPOSIT C
             WHERE C.DEPT_CODE = A.DEPT_CODE
               AND C.HOUSETAG  = A.HOUSETAG
               AND C.VIR_TAG     = 'Y'
               AND C.RECEIPTTAG NOT IN ('8', '9')
               AND ROWNUM      < 2), '')
  FROM HD_HOUS_VIRTURE A,
       VW_HD_CODE_CUSTOMER B,
       HD_HOUS_SELL C
 WHERE A.CUST_CODE = B.CUST_CODE
   AND A.TR_IL      = a_dt
   AND A.DEPT_CODE  = a_dept
   AND A.HOUSETAG   = a_htag
   AND A.DEPT_ST    = '1'
   AND A.PROCESSTAG = '2'
   AND A.CUST_CODE  = C.CUST_CODE
   AND A.SEQ        = C.SEQ
   AND C.CHANGETAG  = '1'
   AND C.LASTCHANGEDATE <= A.TR_IL;

/*---------------------------------------------------------------------------*/
CURSOR CURINC(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT INSEQ, CUST_CODE, SEQ
  FROM HD_HOUS_DAY_INCOME
 WHERE DEPT_CODE  = a_dept
   AND HOUSETAG   = a_htag
   AND INDT       = a_dt
   AND INTYPE     = '5'
   AND IHE_YN     = 'N';

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   RAISE_APPLICATION_ERROR(-20002, '해당프로시져는 사용하지않습니다');
   ROLLBACK;
   RETURN;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND VIRDEPOSIT_YN = 'N';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당 현장의 분양구분은 가상계좌를 사용하지않는 현장입니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_VIRTURE A,
          HD_HOUS_INCOME B
    WHERE A.CUST_CODE    = B.CUST_CODE
      AND A.SEQ          = B.SEQ
      AND B.RECEIPTDATE >= A.TR_IL
      AND A.DEPT_CODE    = as_dept
      AND A.HOUSETAG     = as_htag
      AND A.TR_IL        = as_dt
      AND A.DEPT_ST      = '1'
      AND A.PROCESSTAG   = '2';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당 입금고객중 처리일과 같거나 큰 입금일자가 있습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   OPEN CURVIR(as_dept, as_htag, as_dt);
   LOOP
      FETCH CURVIR
       INTO c_trcd,   c_tdil, c_cpcd, c_dseq,
            c_vano,   c_amt,  c_dept, c_htag,
            c_bno,    c_hno,  c_cust, c_seq,
            c_custnm, c_mdeposit;
      EXIT WHEN CURVIR%NOTFOUND;


      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_incomseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = c_dept
         AND HOUSETAG  = c_htag
         AND INDT      = as_dt;

      -- -------------------------- HD_HOUS_VIRTURE
      BEGIN
         UPDATE HD_HOUS_VIRTURE
            SET PROCESSTAG  = '3',
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE TROCCORG_CD = c_trcd
            AND TR_IL       = c_tdil
            AND CPORG_CD    = c_cpcd
            AND DEPTR_SEQ   = c_dseq;
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line('UPDATE HD_HOUS_VIRTURE ERROR:' || sqlerrm); 
            ROLLBACK;
            RETURN;
      END;

      -- -------------------------- HD_HOUS_DAY_INCOME
      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                    (DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,      CUST_NAME,
                     DEPOSIT_NO,    INAMT,      INGUBUN,     INTYPE,   IHE_YN,
                     CDNO,          MOD_YN,     MOD_RAMT,    MOD_DAMT, VDEPOSIT_NO,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
             VALUES (c_dept,        c_htag,     c_tdil,      v_incomseq,
                     c_bno,         c_hno,      c_cust,      c_seq,    c_custnm,
                     c_mdeposit,    c_amt,      '1',         '5',      'N',
                     '',            'N',        0,           0,        c_vano,
                     as_user,       v_sysdt,    '',          '');
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line('INSERT HD_HOUS_DAY_INCOME ERROR:' || sqlerrm); 
            ROLLBACK;
            RETURN;
      END;
   END LOOP;
   CLOSE CURVIR;
   COMMIT WORK;

   -- ----------------------------- HD_HOUS_INCOME
   OPEN CURINC(as_dept, as_htag, as_dt);
   LOOP
      FETCH CURINC 
       INTO i_iseq, i_cust, i_seq;
      EXIT WHEN CURINC%NOTFOUND;
      
      PROC_HD_INCOME_CALC(i_cust, i_seq, as_dt, i_iseq);
      
   END LOOP;
   CLOSE CURINC;
   COMMIT WORK;

   -- ----------------------------- HD_HOUS_MAGAM
   BEGIN
      UPDATE HD_HOUS_MAGAM
         SET MAGAMDATE   = as_dt,
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line('UPDATE HD_HOUS_MAGAM ERROR:' || sqlerrm); 
         ROLLBACK;
         RETURN;
   END;

   COMMIT WORK;

END;
/


DROP PROCEDURE PROC_HD_RENT_CHANGEHO;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_CHANGEHO" (
   as_cust    IN VARCHAR2, --고객
   as_seq     IN VARCHAR2, --고객순번
   as_dt      IN VARCHAR2, --변경일
   as_nbno    IN VARCHAR2, --새동
   as_nhno    IN VARCHAR2, --새호
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_nseq      NUMBER(5);
v_sysdt     VARCHAR2(14);

v_vbank     VARCHAR(10);
v_vdeposit  VARCHAR(50);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   SELECT NVL(MAX(SEQ), 0) + 1, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
     INTO v_nseq,               v_sysdt
     FROM HD_RENT_MASTER
    WHERE CUST_CODE = as_cust;

   SELECT A.VIRBANK2_CODE, B.VDEPOSIT 
     INTO v_vbank,         v_vdeposit
     FROM HD_CODE_HOUSE A,
          HD_RENT_MASTER B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND B.CUST_CODE = as_cust
      AND B.SEQ       = TO_NUMBER(as_seq); 

   BEGIN
      INSERT INTO HD_RENT_MASTER
                 (CUST_CODE,         SEQ,           DEPT_CODE,     HOUSETAG,
                  BUILDNO,           HOUSENO,       CUST_NAME,     CONT_DATE,
                  CONT_NO,           CONT_TYPE,     VAT_YN,        GUARANTEE_AMT,
                  RENT_SUPPLY,       RENT_VAT,      RENT_INS,      RENT_SDATE,    RENT_EDATE,
                  REAL_CUST_NAME,    REAL_IN_DATE,  CHANGE_TAG,    CHANGE_DATE,
                  LAST_CHANGE_DATE,  RENT_CHG_SEQ,  TERM_CHG_SEQ,
                  INPUT_DUTY_ID,     INPUT_DATE,    CHG_DUTY_ID,   CHG_DATE,
                  RENTHD_YN,         RENTHD_SEQ,    DAYMONTH_TAG,  FIXRATE_TAG,
                  VIR_YN,            VDEPOSIT,      FIXRATE,       FIXRATE2,      FIXRATE_DAY,
                  HOPE_HOUSE_TAG,    RETURN_YN,     RETURN_DATE,   R_GURTAMT,     R_RENTAMT,
                  R_DELAYAMT,        R_PENALTYAMT,  R_ETCAMT1,     R_ETCAMT2,     R_ETCAMT3,
                  RETURN_AMT,        SLIP_DATE,     SLIP_SEQ,      HOUSECONTAMT )
           SELECT CUST_CODE,         v_nseq,        DEPT_CODE,     HOUSETAG,
                  as_nbno,           as_nhno,       CUST_NAME,     CONT_DATE,
                  CONT_NO,           CONT_TYPE,     VAT_YN,        GUARANTEE_AMT,
                  RENT_SUPPLY,       RENT_VAT,      RENT_INS,      RENT_SDATE,    RENT_EDATE,
                  REAL_CUST_NAME,    REAL_IN_DATE,  '1',           '29991231',
                  as_dt,             RENT_CHG_SEQ,  TERM_CHG_SEQ,
                  as_user,           v_sysdt,       '',            '',
                  RENTHD_YN,         RENTHD_SEQ,    DAYMONTH_TAG,  FIXRATE_TAG,
                  VIR_YN,            VDEPOSIT,      FIXRATE,       FIXRATE2,      FIXRATE_DAY,
                  '0',               'N',           '',            0,             0,
                  0,                 0,             0,             0,             0,
                  0,                 '',            0,             0
             FROM HD_RENT_MASTER
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#01 INSERT ERROR HD_RENT_MASTER' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_RENT_MASTER
         SET CHANGE_TAG    = '4',
             CHANGE_DATE   = as_dt,
             RELA_CUSTCODE = as_cust,
             RELA_SEQ      = v_nseq,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE CUST_CODE     = as_cust
         AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_MASTER' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_DETAIL_TERM
                 (CUST_CODE,     SEQ,        TERM_CHG_SEQ, APPLY_DATE,
                  RENT_SDATE,    RENT_EDATE, VAT_YN,       GUARANTEE_AMT,
                  RENT_SUPPLY,   RENT_VAT,   RENT_INS,     AGREE_DD,     AGREE_MM_TAG,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE,     REMARK,       CHANGECONTDT)
           SELECT CUST_CODE,     v_nseq,     TERM_CHG_SEQ, APPLY_DATE,
                  RENT_SDATE,    RENT_EDATE, VAT_YN,       GUARANTEE_AMT,
                  RENT_SUPPLY,   RENT_VAT,   RENT_INS,     AGREE_DD,     AGREE_MM_TAG,
                  as_user,       v_sysdt,    '',           '',           REMARK,       CHANGECONTDT
             FROM HD_RENT_DETAIL_TERM
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#03 INSERT ERROR HD_RENT_DETAIL_TERM' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_GURT_AGREE
                 (CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_AMT,   DISCNT_YN,    DELAY_YN,
                  PERPECT_TAG,   RECEIPT_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                  SLIP_DATE,     SLIP_SEQ)
           SELECT CUST_CODE,     v_nseq,      TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_AMT,   DISCNT_YN,    DELAY_YN,
                  PERPECT_TAG,   RECEIPT_AMT,
                  as_user,       v_sysdt,     '',           '',
                  SLIP_DATE,     SLIP_SEQ
             FROM HD_RENT_GURT_AGREE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#04 INSERT ERROR HD_RENT_GURT_AGREE' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_GURT_INCOME
                 (CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                  TIMES,         DEPT_CODE,   HOUSETAG,     IN_DATE,
                  IN_SEQ,        DEPOSIT_NO,  RECEIPT_DATE, RECEIPT_AMT,
                  DELAY_DAYS,    DELAY_AMT,   DISCNT_DAYS,  DISCNT_AMT,
                  REALINCOM_AMT, BANK_CODE,   BANK_NAME,    PAY_TAG,
                  INCOM_TYPE,    MOD_YN,      REAL_PAY_TAG, SLIP_DATE,
                  SLIP_SEQ,      TAX_DATE,    TAX_SEQ,      SLIP_TYPE,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                  REMARK,        VDEPOSIT_NO, OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK )
           SELECT CUST_CODE,     v_nseq,     TERM_CHG_SEQ, COUNTS,
                  TIMES,         DEPT_CODE,  HOUSETAG,     IN_DATE,
                  IN_SEQ,        DEPOSIT_NO, RECEIPT_DATE, RECEIPT_AMT,
                  DELAY_DAYS,    DELAY_AMT,  DISCNT_DAYS,  DISCNT_AMT,
                  REALINCOM_AMT, BANK_CODE,  BANK_NAME,    PAY_TAG,
                  INCOM_TYPE,    MOD_YN,     REAL_PAY_TAG, SLIP_DATE,
                  SLIP_SEQ,      TAX_DATE,   TAX_SEQ,      SLIP_TYPE,
                  as_user,       v_sysdt,    '',           '',
                  REMARK,         VDEPOSIT_NO,      OUT_DT,        OUT_TM,
                  OUT_SEQ,        OUT_BANK
             FROM HD_RENT_GURT_INCOME
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#05 INSERT ERROR HD_RENT_GURT_INCOME' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
/* 
   BEGIN
      INSERT INTO HD_RENT_GURT_INCOME_DAILY
                 (DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK )
           SELECT DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  CUST_CODE,     v_nseq,        DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  as_user,       v_sysdt,       '',           '',
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK
             FROM HD_RENT_GURT_INCOME_DAILY
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#06 INSERT ERROR HD_RENT_GURT_INCOME_DAILY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/
   BEGIN
      INSERT INTO HD_RENT_RENT_AGREE
                 (CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_SDATE, AGREE_EDATE,  AGREE_DAYS,
                  RENT_AMT,      VAT_YN,      RENT_SUPPLY,  RENT_VAT,   RENT_INS,
                  PERPECT_TAG,   RECEIPT_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                  SLIP_DATE,     SLIP_SEQ)
           SELECT CUST_CODE,     v_nseq,      TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_SDATE, AGREE_EDATE,  AGREE_DAYS,
                  RENT_AMT,      VAT_YN,      RENT_SUPPLY,  RENT_VAT,   RENT_INS,
                  PERPECT_TAG,   RECEIPT_AMT,
                  as_user,       v_sysdt,     '',           '',
                  SLIP_DATE,     SLIP_SEQ
             FROM HD_RENT_RENT_AGREE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#07 INSERT ERROR HD_RENT_RENT_AGREE' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_RENT_INCOME
                 (CUST_CODE,      SEQ,              TERM_CHG_SEQ,  COUNTS,
                  TIMES,          DEPT_CODE,        HOUSETAG,      IN_DATE,
                  IN_SEQ,         DEPOSIT_NO,       RECEIPT_DATE,
                  RECEIPT_AMT,    RECEIPT_SUPPLY,   RECEIPT_VAT,   RECEIPT_INS,
                  DELAY_DAYS,     DELAY_AMT,        DISCNT_DAYS,   DISCNT_AMT,
                  REALINCOM_AMT,  REALINCOM_SUPPLY, REALINCOM_VAT, REALINCOM_INS,
                  BANK_CODE,
                  BANK_NAME,      PAY_TAG,          INCOM_TYPE,    MOD_YN,
                  REAL_PAY_TAG,   SLIP_DATE,        SLIP_SEQ,      TAX_DATE,
                  TAX_SEQ,        SLIP_TYPE,
                  INPUT_DUTY_ID,  INPUT_DATE,       CHG_DUTY_ID,   CHG_DATE,
                  REMARK,         VDEPOSIT_NO,      OUT_DT,        OUT_TM,
                  OUT_SEQ,        OUT_BANK,         OUT_CUSTNO )
           SELECT CUST_CODE,      v_nseq,           TERM_CHG_SEQ,  COUNTS,
                  TIMES,          DEPT_CODE,        HOUSETAG,      IN_DATE,
                  IN_SEQ,         DEPOSIT_NO,       RECEIPT_DATE,
                  RECEIPT_AMT,    RECEIPT_SUPPLY,   RECEIPT_VAT,   RECEIPT_INS,
                  DELAY_DAYS,     DELAY_AMT,        DISCNT_DAYS,   DISCNT_AMT,
                  REALINCOM_AMT,  REALINCOM_SUPPLY, REALINCOM_VAT, REALINCOM_INS,
                  BANK_CODE,
                  BANK_NAME,      PAY_TAG,          INCOM_TYPE,    MOD_YN,
                  REAL_PAY_TAG,   SLIP_DATE,        SLIP_SEQ,      TAX_DATE,
                  TAX_SEQ,        SLIP_TYPE,
                  as_user,        v_sysdt,          '',            '',
                  REMARK,         VDEPOSIT_NO,      OUT_DT,        OUT_TM,
                  OUT_SEQ,        OUT_BANK,         OUT_CUSTNO
             FROM HD_RENT_RENT_INCOME
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#08 INSERT ERROR HD_RENT_RENT_INCOME' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
/*
   BEGIN
      INSERT INTO HD_RENT_RENT_INCOME_DAILY
                 (DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK,      OUT_CUSTNO )
           SELECT DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  CUST_CODE,     v_nseq,        DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  as_user,       v_sysdt,       '',           '',
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK,      OUT_CUSTNO
             FROM HD_RENT_RENT_INCOME_DAILY
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#09 INSERT ERROR HD_RENT_RENT_INCOME_DAILY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/
   BEGIN
      INSERT INTO HD_RENT_DETAIL_RENT
                 (CUST_CODE,     SEQ,        RENT_CHG_SEQ, APPLY_YYMM,
                  RENT_SUPPLY,   RENT_VAT,   RENT_INS,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE)
           SELECT CUST_CODE,     v_nseq,     RENT_CHG_SEQ, APPLY_YYMM,
                  RENT_SUPPLY,   RENT_VAT,   RENT_INS,
                  as_user,       v_sysdt,    '',           ''
             FROM HD_RENT_DETAIL_RENT
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#10 INSERT ERROR HD_RENT_DETAIL_RENT' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

/*
   BEGIN
      INSERT INTO HD_RENT_DONGHO
                 (CUST_CODE,     SEQ,        CONT_SEQ,    DEPT_CODE,
                  HOUSETAG,      BUILDNO,    HOUSENO,     REPRESENT_YN,
                  REMARK,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT CUST_CODE,     v_nseq,     CONT_SEQ,    DEPT_CODE,
                  HOUSETAG,      BUILDNO,    HOUSENO,     REPRESENT_YN,
                  REMARK,
                  as_user,       v_sysdt,    '',           ''
             FROM HD_RENT_DONGHO
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#11 INSERT ERROR HD_RENT_DONGHO' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/

   BEGIN
      INSERT INTO HD_RENT_RATE_DELAY
                 (CUST_CODE,     SEQ,        RATE_TAG,    START_DAYS,
                  END_DAYS,      STARTDATE,  ENDDATE,     DELAYRATE,
                  DELAYCUT,      DELAYUNIT,  START_TAG,   END_TAG,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT CUST_CODE,     v_nseq,     RATE_TAG,    START_DAYS,
                  END_DAYS,      STARTDATE,  ENDDATE,     DELAYRATE,
                  DELAYCUT,      DELAYUNIT,  START_TAG,   END_TAG,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_RENT_RATE_DELAY
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#12 INSERT ERROR HD_RENT_RATE_DELAY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_RATE_DISCOUNT
                 (CUST_CODE,     SEQ,        RATE_TAG,    STARTDATE,
                  ENDDATE,       DISCNTRATE, DISCNTCUT,   DISCNTUNIT,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT CUST_CODE,     v_nseq,     RATE_TAG,    STARTDATE,
                  ENDDATE,       DISCNTRATE, DISCNTCUT,   DISCNTUNIT,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_RENT_RATE_DISCOUNT
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#13 INSERT ERROR HD_RENT_RATE_DISCOUNT' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

/*
   BEGIN
      INSERT INTO HD_RENT_ETC
                 (CUST_CODE,     SEQ,           ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID, CHG_DATE)
           SELECT CUST_CODE,     v_nseq,        ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  as_user,       v_sysdt,       '',          ''
             FROM HD_RENT_ETC
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#14 INSERT ERROR HD_RENT_ETC' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/

   BEGIN
      INSERT INTO HD_LEASE_BONDSEIZURE
                 (CUST_CODE,     SEQ,             RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID,   CHG_DATE)
           SELECT CUST_CODE,     v_nseq,          RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  as_user,       v_sysdt,         '',            ''
             FROM HD_LEASE_BONDSEIZURE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq)
              AND RENT_YN       = 'Y';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#14 INSERT ERROR HD_LEASE_BONDSEIZURE' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_REMARK
                 (CUST_CODE,     SEQ,           REMARK_SEQ,   REMARK_DATE,
                  REMARK,        USER_ID,       CONFIRM_DATE, END_YN,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE)
           SELECT CUST_CODE,     v_nseq,        REMARK_SEQ,   REMARK_DATE,
                  REMARK,        USER_ID,       CONFIRM_DATE, END_YN,
                  as_user,       v_sysdt,       '',           ''
             FROM HD_RENT_REMARK
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#15 INSERT ERROR HD_RENT_REMARK' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;


   BEGIN
      UPDATE SM_TRANS_VIRTURE_DEPOSIT
         SET MAKE_SEQ      = as_nbno || as_nhno,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE COMPANY_CODE  = '100'
         AND BANK_CODE     = v_vbank
         AND VIR_DEPOSITNO = v_vdeposit;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#16 UPDATE ERROR SM_TRANS_VIRTURE_DEPOSIT' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_GURTDISCNT;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_GURTDISCNT" (
   as_cust    IN VARCHAR2, --고객
   as_seq     IN VARCHAR2, --고객순번
   as_fr      IN VARCHAR2, --변경계약시작일
   as_to      IN VARCHAR2, --변경계약종료일
   as_amt     IN VARCHAR2, --변경보증금
   as_vyn     IN VARCHAR2, --월임대료부가세여부
   as_samt    IN VARCHAR2, --월임대료공급가
   as_vamt    IN VARCHAR2, --월임대료부가세
   as_iamt    IN VARCHAR2, --월임대료보험료
   as_mtag    IN VARCHAR2, --월임대료부과일자구분
   as_dd      IN VARCHAR2, --월임대료부과일자
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_cnt         NUMBER(5);
v_sysdt       VARCHAR2(14);

v_amt         NUMBER(15); --인하 보증금
v_m_term      NUMBER(3);
v_m_rent      NUMBER(3);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   SELECT TO_NUMBER(as_amt) - NVL(SUM(AGREE_AMT), 0)
     INTO v_amt
     FROM HD_RENT_GURT_AGREE
    WHERE CUST_CODE = as_cust
      AND SEQ       = TO_NUMBER(as_seq);

   SELECT MAX(TERM_CHG_SEQ)
     INTO v_m_term
     FROM HD_RENT_DETAIL_TERM;

/*
    1. HD_RENT_DETAIL_TERM UPDATE
    2. HD_RENT_DETAIL_TERM INSERT
    3. HD_RENT_GURT_AGREE INSERT
    4. HD_RENT_DETAIL_RENT DELETE
    5. HD_RENT_DETAIL_RENT INSERT
    6. HD_RENT_MASTER UPDATE
*/

   /* ----------------------------------------------------------------------- */
   BEGIN
      UPDATE HD_RENT_DETAIL_TERM
         SET RENT_EDATE    = TO_CHAR(TO_DATE(as_fr, 'YYYYMMDD') - 1, 'YYYYMMDD'),
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE CUST_CODE     = as_cust
         AND SEQ          = TO_NUMBER(as_seq)
         AND TERM_CHG_SEQ = v_m_term;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_RENT_DETAIL_TERM 01 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /* ----------------------------------------------------------------------- */
   BEGIN
      INSERT INTO HD_RENT_DETAIL_TERM
                ( CUST_CODE,          SEQ,               TERM_CHG_SEQ,
                  APPLY_DATE,         RENT_SDATE,        RENT_EDATE,
                  VAT_YN,             GUARANTEE_AMT,     RENT_SUPPLY,
                  RENT_VAT,           AGREE_DD,          AGREE_MM_TAG,
                  INPUT_DUTY_ID,      INPUT_DATE,        CHG_DUTY_ID,        CHG_DATE,
                  RENT_INS,           REMARK,            CHANGECONTDT )
         VALUES ( as_cust,            TO_NUMBER(as_seq), v_m_term + 1,
                  as_fr,              as_fr,             as_to,
                  as_vyn,             v_amt,             TO_NUMBER(as_samt),
                  TO_NUMBER(as_vamt), as_dd,             as_mtag,
                  as_user,            v_sysdt,           '',                 '',
                  TO_NUMBER(as_iamt), '임대료인하',      as_fr);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_DETAIL_TERM 02 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /* ----------------------------------------------------------------------- */
   BEGIN
      INSERT INTO HD_RENT_GURT_AGREE
                ( CUST_CODE,     SEQ,               TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_AMT,         DISCNT_YN,    DELAY_YN,
                  PERPECT_TAG,   RECEIPT_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,        CHG_DUTY_ID,  CHG_DATE,
                  SLIP_DATE,     SLIP_SEQ )
         VALUES ( as_cust,       TO_NUMBER(as_seq), v_m_term + 1, '01',
                  as_fr,         v_amt,             'N',          'N',
                  'N',           0,
                  as_user,       v_sysdt,           '',           '',
                  '',            0 );
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_GURT_AGREE 03 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /* ----------------------------------------------------------------------- */
   BEGIN
      DELETE HD_RENT_DETAIL_RENT
       WHERE CUST_CODE    = as_cust
         AND SEQ          = TO_NUMBER(as_seq)
         AND APPLY_YYMM  >= as_fr;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'DELETE HD_RENT_DETAIL_RENT 04 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /* ----------------------------------------------------------------------- */
   SELECT MAX(RENT_CHG_SEQ)
     INTO v_m_rent
     FROM HD_RENT_DETAIL_RENT
    WHERE CUST_CODE = as_cust
      AND SEQ       = TO_NUMBER(as_seq);

   BEGIN
      INSERT INTO HD_RENT_DETAIL_RENT
                ( CUST_CODE,          SEQ,                RENT_CHG_SEQ,       APPLY_YYMM,
                  RENT_SUPPLY,        RENT_VAT,           RENT_INS,
                  INPUT_DUTY_ID,      INPUT_DATE,         CHG_DUTY_ID,        CHG_DATE )
         VALUES ( as_cust,            TO_NUMBER(as_seq),  v_m_rent + 1,       as_fr,
                  TO_NUMBER(as_samt), TO_NUMBER(as_vamt), TO_NUMBER(as_iamt),
                  as_user,            v_sysdt,            '',                 '' );
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_DETAIL_RENT 05 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /* ----------------------------------------------------------------------- */
   BEGIN
      UPDATE HD_RENT_MASTER
         SET RENT_EDATE   = as_to,
             TERM_CHG_SEQ = v_m_term + 1,
             RENT_CHG_SEQ = v_m_rent + 1,
             CHG_DUTY_ID  = as_user,
             CHG_DATE     = v_sysdt
       WHERE CUST_CODE     = as_cust
         AND SEQ          = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_RENT_MASTER 06 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_GURT_INCOME;

CREATE OR REPLACE PROCEDURE PROC_HD_RENT_GURT_INCOME (
  as_cust           IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_dt             IN VARCHAR2,   -- 입금일
  ai_inseq          IN INTEGER     -- 입금순번
) IS

-------------------------------------------------------------
-------------------------------------------------------------
CURSOR DETAIL_CUR (a_dt VARCHAR2, a_mon INTEGER) IS
   SELECT DELAYRATE, DELAYCUT, DELAYUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DELAY
    WHERE CUST_CODE   = as_cust
      AND SEQ         = ai_seq
      AND ENDDATE    >= a_dt
      AND STARTDATE  <= as_dt
      AND RATE_TAG    = '2' /*보증금2 임대료3*/
      AND ((END_TAG   = '1' AND END_DAYS   >= a_mon) OR
           (END_TAG   = '2' AND END_DAYS    > a_mon))
      AND ((START_TAG = '1' AND START_DAYS <= a_mon) OR
           (START_TAG = '2' AND START_DAYS  < a_mon));

CURSOR DETAIL_CUR1 (a_dt VARCHAR2) IS
   SELECT DISCNTRATE, DISCNTCUT, DISCNTUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DISCOUNT
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND RATE_TAG    = '2' /*보증금2 임대료3*/
      AND ENDDATE   >= as_dt
      AND STARTDATE <= a_dt;

-------------------------------------------------------------
-------------------------------------------------------------
-- 변수선언
   C_DEPT_CODE         VARCHAR2(12);  -- 부서코드
   C_HOUSETAG          VARCHAR2(1);   -- 분양구분
   C_REMARK            VARCHAR2(200); -- 비고
   C_OUT_DT            VARCHAR2(8);   -- 외부입력일자
   C_OUT_TM            VARCHAR2(6);   -- 외부입력시간
   C_OUT_SEQ           FLOAT;         -- 외부입력순번
   C_OUT_BANK          VARCHAR2(6);   -- 외부입력은행

   C_FIXRATE_TAG       VARCHAR2(1);   -- 고정연체이율구분
   C_FIXRATE_DAY       NUMBER(3);     -- 고정기간일수
   C_FIXRATE           FLOAT;         -- 기간이내연체이율
   C_FIXRATE2          FLOAT;         -- 기간이후연체이율

   C_DEPOSIT_NO        VARCHAR2(30);  -- 계좌번호
   C_INAMT             NUMBER(30,9);  -- 입금액
   C_INGUBUN           VARCHAR2(2);   -- 입금구분
   C_INTYPE            VARCHAR2(2);   -- 입금형태
   C_MOD_YN            VARCHAR2(1);   -- 조정여부
   C_MOD_RAMT          NUMBER(30,9);  -- 조정연체료
   C_MOD_DAMT          NUMBER(30,9);  -- 조정할인료
   C_INPUT_DUTY_ID     VARCHAR2(12);  -- 입력담당

   C_BANK_CODE         VARCHAR2(8);   -- 은행코드
   C_BANK_NAME         VARCHAR2(30);  -- 은행명칭
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_LAST_TERM         INTEGER;        -- 미납입된 마지막계약차수
   C_LAST_COUNTS       VARCHAR2(2);    -- 미납입된 마지막약정차수
   C_LAST_TIMES        INTEGER;        -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_AGREEAMT          NUMBER(30,9);   -- 약정분양금액
   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 약정계산금액
--   C_TEMP_RATE         NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   --
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_SYSDT             VARCHAR(14);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분

   C_TEMPDT            VARCHAR2(8);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr             EXCEPTION;                  -- SELECT Data Not Found

-------------------------------------------------------------
-------------------------------------------------------------
BEGIN
   SELECT COUNT(*)
     INTO C_CNT
     FROM HD_RENT_MASTER
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND (CHANGE_TAG <> '1' AND CHANGE_DATE < as_dt);
   IF C_CNT > 0 THEN
      Wk_errflag := '-20001';
      e_msg  := ' 해당 입금일에 해당계약자는 계약상태가 아닙니다.';
      GOTO EXIT_ROUTINE;
   END IF;

   BEGIN
      C_SYSDT := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

      -----------------------------------------------------
      -- 사업코드, 분양구분
      SELECT DEPT_CODE,              HOUSETAG,            daymonth_tag,
             NVL(FIXRATE_TAG, '2'),  NVL(FIXRATE_DAY, 0), NVL(FIXRATE, 0),  NVL(FIXRATE2, 0)
        INTO C_DEPT_CODE,            C_HOUSETAG,          C_DAYMONTH,
             C_FIXRATE_TAG,          C_FIXRATE_DAY,       C_FIXRATE,        C_FIXRATE2
        FROM HD_RENT_MASTER
       WHERE CUST_CODE = as_cust
         AND SEQ       = ai_seq;

      SELECT DEPOSIT_NO,   IN_AMT,   IN_GUBUN,  IN_TYPE,  MOD_YN,   MOD_DELAY_AMT, MOD_DISC_AMT, INPUT_DUTY_ID,   REMARK,
             OUT_DT,       OUT_TM,   OUT_SEQ,   OUT_BANK
        INTO C_DEPOSIT_NO, C_INAMT,  C_INGUBUN, C_INTYPE, C_MOD_YN, C_MOD_RAMT,    C_MOD_DAMT,   C_INPUT_DUTY_ID, C_REMARK,
             C_OUT_DT,     C_OUT_TM, C_OUT_SEQ, C_OUT_BANK
        FROM HD_RENT_GURT_INCOME_DAILY
       WHERE DEPT_CODE = C_DEPT_CODE
         AND HOUSETAG  = C_HOUSETAG
         AND IN_DATE   = as_dt
         AND IN_SEQ    = ai_inseq;

--      c_input_amt := C_INAMT;
--    입금예정금액 = 납입금액 - 조정연체료 + 조정할인료
      c_input_amt := C_INAMT - C_MOD_RAMT + C_MOD_DAMT;

      -----------------------------------------------------
      -- 은행코드,은행명칭을 구한다.
      SELECT BANK_CODE,   BANK_NAME
        INTO C_BANK_CODE, C_BANK_NAME
        FROM HD_CODE_DEPOSIT
       WHERE DEPT_CODE  = C_DEPT_CODE
         AND HOUSETAG   = C_HOUSETAG
         AND DEPOSIT_NO = C_DEPOSIT_NO;

      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      SELECT COUNT(*)
        INTO C_CNT
        FROM HD_RENT_GURT_AGREE
       WHERE CUST_CODE   = as_cust
         AND SEQ         = ai_seq
         AND PERPECT_TAG = 'N';

      IF C_CNT > 0 THEN
         SELECT MIN(term_chg_seq)
           INTO C_LAST_TERM
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';
         SELECT MIN(counts)
           INTO C_LAST_COUNTS
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND PERPECT_TAG  = 'N';

         SELECT NVL(MAX(times),0)
           INTO C_LAST_TIMES
           FROM hd_rent_gurt_income
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      ELSE
         SELECT COUNT(*)
           INTO C_CNT
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         IF C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다.==>' || as_cust || '-' || TO_CHAR(ai_seq);
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT MAX(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         SELECT MAX(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         SELECT NVL(MAX(TIMES),0)
           INTO C_LAST_TIMES
           FROM HD_RENT_GURT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;

      END IF;

      C_LAST_TIMES := C_LAST_TIMES + 1;

      -----------------------------------------------------
      -- LOOP 시작
      LOOP
         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         SELECT NVL((TO_DATE(AGREE_DATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD')) * -1,0),
                NVL(AGREE_AMT,0), AGREE_DATE, DISCNT_YN, DELAY_YN
           INTO C_DAYS, C_AGREEAMT, C_AGREEDATE, C_DC_YN, C_AC_YN
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;

         IF C_DAYS > 0 THEN -- 연체료일 경우
            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'N');
            IF C_TEMPDT >= as_dt THEN
               C_DAYS := 0;
            END IF;
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS),0)
--              INTO C_CNT,    C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = C_DEPT_CODE
--               AND HOUSETAG  = C_HOUSETAG
--               AND AD_TAG    = '1' --연체
--               AND RATE_TAG  = '2' --임대
--               AND HOLIDAY   = C_AGREEDATE;
--            IF C_CNT > 0 THEN
--               IF C_DAYS <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
         ELSIF C_DAYS < 0 THEN -- 할인료일 경우
            SELECT COUNT(*), NVL(MAX(GONG_DAYS), 0)
              INTO C_CNT,    C_TEMP_CNT
              FROM HD_REFER_HOLIDAY
             WHERE DEPT_CODE = C_DEPT_CODE
               AND HOUSETAG  = C_HOUSETAG
               AND AD_TAG    = '2' --할인
               AND RATE_TAG  = '2' --임대
               AND HOLIDAY   = C_AGREEDATE;
            IF C_CNT > 0 THEN
               C_CNT := C_DAYS * -1;
               IF C_CNT <= C_TEMP_CNT THEN
                  C_DAYS := 0;
               END IF;
            END IF;
         END IF;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT),0)
           INTO C_RECEIPTAMT
           FROM HD_RENT_GURT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_AGREEAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         IF C_LAST_TIMES > 89 THEN
            C_TEMP_AMT := C_INPUT_AMT;
            C_INPUT_AMT := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF (C_DAYS = 0) THEN
               IF C_WORK_AMT < C_INPUT_AMT THEN
                  C_TEMP_AMT  := C_WORK_AMT;
                  C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT  := C_INPUT_AMT;
                  C_INPUT_AMT := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            ELSE
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_RAMT >= 0) THEN -- 연체료 조정이면
                     C_DELAY_AMT := C_MOD_RAMT;
                     C_AC_YN := 'N';
                     C_DELAY_DAY   := C_DAYS;
                  END IF;
                  IF C_AC_YN = 'Y' THEN
                     -- 납입대상금액계산
                     C_DELAY_DAY   := C_DAYS;
                     C_TEMP_RATE := 0;

                     IF C_DAYMONTH = '2' THEN
                        C_MONTHS := months_between(to_date(as_dt, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'));
                     ELSE
                        C_MONTHS := to_date(as_dt, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD');
                     END IF;

                     OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                     LOOP
                        FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR%NOTFOUND;
                        IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                           C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF C_AGREEDATE >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                        ELSE
                           IF as_dt <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR;
                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                             CASE C_DELAYUNIT
                                WHEN '1' THEN 1
                                WHEN '2' THEN 10
                                WHEN '3' THEN 100
                                WHEN '4' THEN 1000
                                WHEN '5' THEN 10000
                                WHEN '6' THEN 100000
                             ELSE 1
                             END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           IF C_DELAYCUT = '1' THEN
                              C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DELAYUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
--@@                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
--@@                                 C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
--@@                                    C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DELAY_AMT := ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
 
                           IF C_DELAYCUT = '1' THEN
--@@                              C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
--@@                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DELAY_AMT := C_DELAY_AMT + ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;

/* ---> */
               ELSE
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_DAMT >= 0) THEN -- 할인료 조정이면
                  --   C_DISCOUNT_AMT := 0;
                     C_DISCOUNT_AMT := C_MOD_DAMT;
                     C_DC_YN := 'N';
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                  END IF;

                  IF C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DETAIL_CUR1(C_AGREEDATE);
                     LOOP
                        FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                        EXIT WHEN DETAIL_CUR1%NOTFOUND;
                        IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF as_dt >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                        ELSE
                           IF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR1;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
                                    C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DISCOUNT_AMT := ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
--@@                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
--@@                                 C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
--@@                                    C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DISCOUNT_AMT := ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DISCNTCUT = '1' THEN
--@@                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT + C_DISCOUNT_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;
/* ---> */


               END IF;
            END IF;
         END IF;

         ----------------------------------------------------------------------------
         IF C_MOD_YN = 'Y' THEN
            C_DELAY_AMT := C_MOD_RAMT;
            C_DISCOUNT_AMT := C_MOD_DAMT;
         END IF;

         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

         C_DAYS := TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         BEGIN
            INSERT INTO HD_RENT_GURT_INCOME
                      (CUST_CODE,       SEQ,         TERM_CHG_SEQ,   COUNTS,         TIMES,
                       DEPT_CODE,       HOUSETAG,    IN_DATE,        IN_SEQ,         DEPOSIT_NO,
                       RECEIPT_DATE,    RECEIPT_AMT,
                       DELAY_DAYS,      DELAY_AMT,   DISCNT_DAYS,    DISCNT_AMT,     REALINCOM_AMT,
                       BANK_CODE,       BANK_NAME,
                       PAY_TAG,         INCOM_TYPE,  MOD_YN,         REAL_PAY_TAG,
                       SLIP_DATE,       SLIP_SEQ,    SLIP_TYPE,
                       TAX_DATE,        TAX_SEQ,
                       INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID,    CHG_DATE,       REMARK,
                       OUT_DT,          OUT_TM,      OUT_SEQ,        OUT_BANK)
               VALUES (as_cust,         ai_seq,      C_LAST_TERM,    C_LAST_COUNTS,  C_LAST_TIMES,
                       C_DEPT_CODE,     C_HOUSETAG,  as_dt,          ai_inseq,       C_DEPOSIT_NO,
                       as_dt,           C_TEMP_AMT,
                       C_DELAY_DAY,     C_DELAY_AMT, C_DISCOUNT_DAY, C_DISCOUNT_AMT, C_R_RECEIPTAMT,
                       C_BANK_CODE,     C_BANK_NAME,
                       C_INGUBUN,       C_INTYPE,    C_MOD_YN,       'Y',
                       '',              0,           '',
                       '',              0,
                       C_INPUT_DUTY_ID, C_SYSDT,     '',             '',             C_REMARK,
                       C_OUT_DT,        C_OUT_TM,    C_OUT_SEQ,      C_OUT_BANK);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_GURT_INCOME' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0)
           INTO C_RECEIPTAMT
           FROM HD_RENT_GURT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 입금완료구분값을 구한다.
         IF C_AGREEAMT <= C_RECEIPTAMT THEN BEGIN
            C_PERPECTTAG := 'Y';
            C_RECEIPTAMT := C_AGREEAMT;
         END; ELSE
            C_PERPECTTAG := 'N';
         END IF;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         BEGIN
            UPDATE HD_RENT_GURT_AGREE
               SET PERPECT_TAG  = C_PERPECTTAG,
                   RECEIPT_AMT  = C_RECEIPTAMT,
                   CHG_DUTY_ID  = C_INPUT_DUTY_ID,
                   CHG_DATE     = C_SYSDT
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_GURT_AGREE' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF C_INPUT_AMT = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&

         SELECT COUNT(*)
           INTO c_cnt
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       > C_LAST_COUNTS
            AND PERPECT_TAG  = 'N';

         IF c_cnt < 1 THEN BEGIN
            SELECT MAX(TIMES) + 1
              INTO c_last_times
              FROM HD_RENT_GURT_INCOME 
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
            IF c_last_times < 90 THEN
               c_last_times := 90;
            END IF;   
         END; ELSE
            SELECT MIN(TERM_CHG_SEQ)
              INTO C_LAST_TERM
              FROM HD_RENT_GURT_AGREE
             WHERE CUST_CODE   = as_cust
               AND SEQ         = ai_seq
               AND PERPECT_TAG = 'N';

            SELECT MIN(COUNTS)
              INTO C_LAST_COUNTS
              FROM HD_RENT_GURT_AGREE
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       > C_LAST_COUNTS
               AND PERPECT_TAG  = 'N';

            SELECT NVL(MAX(TIMES), 0) + 1
              INTO c_last_times
              FROM HD_RENT_GURT_INCOME
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
         END IF;

         C_MOD_YN := 'N';
         C_AC_YN  := 'Y';
         C_DC_YN  := 'Y';
      END LOOP;
   END;

   BEGIN
      UPDATE HD_RENT_GURT_INCOME_DAILY
         SET TRANS_YN    = 'Y',
             CHG_DUTY_ID = C_INPUT_DUTY_ID,
             CHG_DATE    = C_SYSDT
       WHERE DEPT_CODE   = C_DEPT_CODE
         AND HOUSETAG    = C_HOUSETAG
         AND IN_DATE     = as_dt
         AND IN_SEQ      = ai_inseq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#03 UPDATE ERROR HD_RENT_GURT_INCOME_DAILY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_hd_rent_gurt_income;
/


DROP PROCEDURE PROC_HD_RENT_GURT_INCOME_ADJ;

CREATE OR REPLACE PROCEDURE PROC_HD_RENT_GURT_INCOME_ADJ (
  as_cust           IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_dt             IN VARCHAR2,   -- 입금일
  ai_inseq          IN INTEGER     -- 입금순번
) IS

-------------------------------------------------------------
-------------------------------------------------------------
CURSOR DETAIL_CUR (a_dt VARCHAR2, a_mon INTEGER) IS
   SELECT DELAYRATE, DELAYCUT, DELAYUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DELAY
    WHERE CUST_CODE   = as_cust
      AND SEQ         = ai_seq
      AND ENDDATE    >= a_dt
      AND STARTDATE  <= as_dt
      AND RATE_TAG    = '2' /*보증금2 임대료3*/
      AND ((END_TAG   = '1' AND END_DAYS   >= a_mon) OR
           (END_TAG   = '2' AND END_DAYS    > a_mon))
      AND ((START_TAG = '1' AND START_DAYS <= a_mon) OR
           (START_TAG = '2' AND START_DAYS  < a_mon));

CURSOR DETAIL_CUR1 (a_dt VARCHAR2) IS
   SELECT DISCNTRATE, DISCNTCUT, DISCNTUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DISCOUNT
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND RATE_TAG    = '2' /*보증금2 임대료3*/
      AND ENDDATE   >= as_dt
      AND STARTDATE <= a_dt;

-------------------------------------------------------------
-------------------------------------------------------------
-- 변수선언
   C_DEPT_CODE         VARCHAR2(12);  -- 부서코드
   C_HOUSETAG          VARCHAR2(1);   -- 분양구분
   C_REMARK            VARCHAR2(200); -- 비고
   C_OUT_DT            VARCHAR2(8);   -- 외부입력일자
   C_OUT_TM            VARCHAR2(6);   -- 외부입력시간
   C_OUT_SEQ           FLOAT;         -- 외부입력순번
   C_OUT_BANK          VARCHAR2(6);   -- 외부입력은행

   C_FIXRATE_TAG       VARCHAR2(1);   -- 고정연체이율구분
   C_FIXRATE_DAY       NUMBER(3);     -- 고정기간일수
   C_FIXRATE           FLOAT;         -- 기간이내연체이율
   C_FIXRATE2          FLOAT;         -- 기간이후연체이율

   C_DEPOSIT_NO        VARCHAR2(30);  -- 계좌번호
   C_INAMT             NUMBER(30,9);  -- 입금액
   C_INGUBUN           VARCHAR2(2);   -- 입금구분
   C_INTYPE            VARCHAR2(2);   -- 입금형태
   C_MOD_YN            VARCHAR2(1);   -- 조정여부
   C_MOD_RAMT          NUMBER(30,9);  -- 조정연체료
   C_MOD_DAMT          NUMBER(30,9);  -- 조정할인료
   C_INPUT_DUTY_ID     VARCHAR2(12);  -- 입력담당

   C_BANK_CODE         VARCHAR2(8);   -- 은행코드
   C_BANK_NAME         VARCHAR2(30);  -- 은행명칭
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_LAST_TERM         INTEGER;        -- 미납입된 마지막계약차수
   C_LAST_COUNTS       VARCHAR2(2);    -- 미납입된 마지막약정차수
   C_LAST_TIMES        INTEGER;        -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_AGREEAMT          NUMBER(30,9);   -- 약정분양금액
   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 약정계산금액
--   C_TEMP_RATE         NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   --
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_SYSDT             VARCHAR(14);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분

   C_TEMPDT            VARCHAR2(8);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr             EXCEPTION;                  -- SELECT Data Not Found

-------------------------------------------------------------
-------------------------------------------------------------
BEGIN
   BEGIN
      C_SYSDT := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

      -----------------------------------------------------
      -- 사업코드, 분양구분
      SELECT DEPT_CODE,              HOUSETAG,            daymonth_tag,
             NVL(FIXRATE_TAG, '2'),  NVL(FIXRATE_DAY, 0), NVL(FIXRATE, 0),  NVL(FIXRATE2, 0)
        INTO C_DEPT_CODE,            C_HOUSETAG,          C_DAYMONTH,
             C_FIXRATE_TAG,          C_FIXRATE_DAY,       C_FIXRATE,        C_FIXRATE2
        FROM HD_RENT_MASTER
       WHERE CUST_CODE = as_cust
         AND SEQ       = ai_seq;

      SELECT DEPOSIT_NO,   IN_AMT,   IN_GUBUN,  IN_TYPE,  MOD_YN,   MOD_DELAY_AMT, MOD_DISC_AMT, INPUT_DUTY_ID,   REMARK,
             OUT_DT,       OUT_TM,   OUT_SEQ,   OUT_BANK
        INTO C_DEPOSIT_NO, C_INAMT,  C_INGUBUN, C_INTYPE, C_MOD_YN, C_MOD_RAMT,    C_MOD_DAMT,   C_INPUT_DUTY_ID, C_REMARK,
             C_OUT_DT,     C_OUT_TM, C_OUT_SEQ, C_OUT_BANK
        FROM HD_RENT_GURT_INCOME_DAILY_ADJ
       WHERE DEPT_CODE = C_DEPT_CODE
         AND HOUSETAG  = C_HOUSETAG
         AND IN_DATE   = as_dt
         AND IN_SEQ    = ai_inseq;

--      c_input_amt := C_INAMT;
--    입금예정금액 = 납입금액 - 조정연체료 + 조정할인료
      c_input_amt := C_INAMT - C_MOD_RAMT + C_MOD_DAMT;

      -----------------------------------------------------
      -- 은행코드,은행명칭을 구한다.
      SELECT BANK_CODE,   BANK_NAME
        INTO C_BANK_CODE, C_BANK_NAME
        FROM HD_CODE_DEPOSIT
       WHERE DEPT_CODE  = C_DEPT_CODE
         AND HOUSETAG   = C_HOUSETAG
         AND DEPOSIT_NO = C_DEPOSIT_NO;

      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      SELECT COUNT(*)
        INTO C_CNT
        FROM HD_RENT_GURT_AGREE_ADJ
       WHERE CUST_CODE   = as_cust
         AND SEQ         = ai_seq
         AND PERPECT_TAG = 'N';

      IF C_CNT > 0 THEN
         SELECT MIN(term_chg_seq)
           INTO C_LAST_TERM
           FROM HD_RENT_GURT_AGREE_ADJ
          WHERE CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';
         SELECT MIN(counts)
           INTO C_LAST_COUNTS
           FROM HD_RENT_GURT_AGREE_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND PERPECT_TAG  = 'N';

         SELECT NVL(MAX(times),0)
           INTO C_LAST_TIMES
           FROM hd_rent_gurt_income_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      ELSE
         SELECT COUNT(*)
           INTO C_CNT
           FROM HD_RENT_GURT_AGREE_ADJ
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         IF C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다.==>' || as_cust || '-' || TO_CHAR(ai_seq);
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT MAX(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_GURT_AGREE_ADJ
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         SELECT MAX(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_GURT_AGREE_ADJ
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         SELECT NVL(MAX(TIMES),0)
           INTO C_LAST_TIMES
           FROM HD_RENT_GURT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;

      END IF;

      C_LAST_TIMES := C_LAST_TIMES + 1;

      -----------------------------------------------------
      -- LOOP 시작
      LOOP
         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         SELECT NVL((TO_DATE(AGREE_DATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD')) * -1,0),
                NVL(AGREE_AMT,0), AGREE_DATE, DISCNT_YN, DELAY_YN
           INTO C_DAYS, C_AGREEAMT, C_AGREEDATE, C_DC_YN, C_AC_YN
           FROM HD_RENT_GURT_AGREE_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;

         IF C_DAYS > 0 THEN -- 연체료일 경우
            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'N');
            IF C_TEMPDT >= as_dt THEN
               C_DAYS := 0;
            END IF;
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS),0)
--              INTO C_CNT,    C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = C_DEPT_CODE
--               AND HOUSETAG  = C_HOUSETAG
--               AND AD_TAG    = '1' --연체
--               AND RATE_TAG  = '2' --임대
--               AND HOLIDAY   = C_AGREEDATE;
--            IF C_CNT > 0 THEN
--               IF C_DAYS <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
         ELSIF C_DAYS < 0 THEN -- 할인료일 경우
            SELECT COUNT(*), NVL(MAX(GONG_DAYS), 0)
              INTO C_CNT,    C_TEMP_CNT
              FROM HD_REFER_HOLIDAY
             WHERE DEPT_CODE = C_DEPT_CODE
               AND HOUSETAG  = C_HOUSETAG
               AND AD_TAG    = '2' --할인
               AND RATE_TAG  = '2' --임대
               AND HOLIDAY   = C_AGREEDATE;
            IF C_CNT > 0 THEN
               C_CNT := C_DAYS * -1;
               IF C_CNT <= C_TEMP_CNT THEN
                  C_DAYS := 0;
               END IF;
            END IF;
         END IF;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT),0)
           INTO C_RECEIPTAMT
           FROM HD_RENT_GURT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_AGREEAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         IF C_LAST_TIMES > 89 THEN
            C_TEMP_AMT := C_INPUT_AMT;
            C_INPUT_AMT := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF (C_DAYS = 0) THEN
               IF C_WORK_AMT < C_INPUT_AMT THEN
                  C_TEMP_AMT  := C_WORK_AMT;
                  C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT  := C_INPUT_AMT;
                  C_INPUT_AMT := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            ELSE
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_RAMT >= 0) THEN -- 연체료 조정이면
                     C_DELAY_AMT := C_MOD_RAMT;
                     C_AC_YN := 'N';
                     C_DELAY_DAY   := C_DAYS;
                  END IF;
                  IF C_AC_YN = 'Y' THEN
                     -- 납입대상금액계산
                     C_DELAY_DAY   := C_DAYS;
                     C_TEMP_RATE := 0;

                     IF C_DAYMONTH = '2' THEN
                        C_MONTHS := months_between(to_date(as_dt, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'));
                     ELSE
                        C_MONTHS := to_date(as_dt, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD');
                     END IF;

                     OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                     LOOP
                        FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR%NOTFOUND;
                        IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                           C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF C_AGREEDATE >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                        ELSE
                           IF as_dt <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR;
                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                             CASE C_DELAYUNIT
                                WHEN '1' THEN 1
                                WHEN '2' THEN 10
                                WHEN '3' THEN 100
                                WHEN '4' THEN 1000
                                WHEN '5' THEN 10000
                                WHEN '6' THEN 100000
                             ELSE 1
                             END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           IF C_DELAYCUT = '1' THEN
                              C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DELAYUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
--@@                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
--@@                                 C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
--@@                                    C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DELAY_AMT := ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DELAYCUT = '1' THEN
--@@                              C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
--@@                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DELAY_AMT := C_DELAY_AMT + ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;
               ELSE
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_DAMT >= 0) THEN -- 할인료 조정이면
                  --   C_DISCOUNT_AMT := 0;
                     C_DISCOUNT_AMT := C_MOD_DAMT;
                     C_DC_YN := 'N';
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                  END IF;
                  IF C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DETAIL_CUR1(C_AGREEDATE);
                     LOOP
                        FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                        EXIT WHEN DETAIL_CUR1%NOTFOUND;
                        IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF as_dt >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                        ELSE
                           IF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR1;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
                                    C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DISCOUNT_AMT := ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
--@@                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
--@@                                 C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
--@@                                    C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DISCOUNT_AMT := ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DISCNTCUT = '1' THEN
--@@                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT + C_DISCOUNT_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         ----------------------------------------------------------------------------
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

         C_DAYS := TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         BEGIN
            INSERT INTO HD_RENT_GURT_INCOME_ADJ
                      (CUST_CODE,       SEQ,         TERM_CHG_SEQ,   COUNTS,         TIMES,
                       DEPT_CODE,       HOUSETAG,    IN_DATE,        IN_SEQ,         DEPOSIT_NO,
                       RECEIPT_DATE,    RECEIPT_AMT,
                       DELAY_DAYS,      DELAY_AMT,   DISCNT_DAYS,    DISCNT_AMT,     REALINCOM_AMT,
                       BANK_CODE,       BANK_NAME,
                       PAY_TAG,         INCOM_TYPE,  MOD_YN,         REAL_PAY_TAG,
                       SLIP_DATE,       SLIP_SEQ,    SLIP_TYPE,
                       TAX_DATE,        TAX_SEQ,
                       INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID,    CHG_DATE,       REMARK,
                       OUT_DT,          OUT_TM,      OUT_SEQ,        OUT_BANK)
               VALUES (as_cust,         ai_seq,      C_LAST_TERM,    C_LAST_COUNTS,  C_LAST_TIMES,
                       C_DEPT_CODE,     C_HOUSETAG,  as_dt,          ai_inseq,       C_DEPOSIT_NO,
                       as_dt,           C_TEMP_AMT,
                       C_DELAY_DAY,     C_DELAY_AMT, C_DISCOUNT_DAY, C_DISCOUNT_AMT, C_R_RECEIPTAMT,
                       C_BANK_CODE,     C_BANK_NAME,
                       C_INGUBUN,       C_INTYPE,    C_MOD_YN,       'Y',
                       '',              0,           '',
                       '',              0,
                       C_INPUT_DUTY_ID, C_SYSDT,     '',             '',             C_REMARK,
                       C_OUT_DT,        C_OUT_TM,    C_OUT_SEQ,      C_OUT_BANK);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 INSERT ERROR HD_RENT_GURT_INCOME_ADJ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0)
           INTO C_RECEIPTAMT
           FROM HD_RENT_GURT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 입금완료구분값을 구한다.
         IF C_AGREEAMT <= C_RECEIPTAMT THEN BEGIN
            C_PERPECTTAG := 'Y';
            C_RECEIPTAMT := C_AGREEAMT;
         END; ELSE
            C_PERPECTTAG := 'N';
         END IF;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         BEGIN
            UPDATE HD_RENT_GURT_AGREE_ADJ
               SET PERPECT_TAG  = C_PERPECTTAG,
                   RECEIPT_AMT  = C_RECEIPTAMT,
                   CHG_DUTY_ID  = C_INPUT_DUTY_ID,
                   CHG_DATE     = C_SYSDT
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_GURT_AGREE_ADJ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF C_INPUT_AMT = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&

         SELECT COUNT(*)
           INTO c_cnt
           FROM HD_RENT_GURT_AGREE_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       > C_LAST_COUNTS
            AND PERPECT_TAG  = 'N';

         IF c_cnt < 1 THEN BEGIN
            SELECT MAX(TIMES) + 1
              INTO c_last_times
              FROM HD_RENT_GURT_INCOME_ADJ
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
            IF c_last_times < 90 THEN
               c_last_times := 90;
            END IF;   
         END; ELSE
            SELECT MIN(TERM_CHG_SEQ)
              INTO C_LAST_TERM
              FROM HD_RENT_GURT_AGREE
             WHERE CUST_CODE   = as_cust
               AND SEQ         = ai_seq
               AND PERPECT_TAG = 'N';

            SELECT MIN(COUNTS)
              INTO C_LAST_COUNTS
              FROM HD_RENT_GURT_AGREE_ADJ
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       > C_LAST_COUNTS
               AND PERPECT_TAG  = 'N';

            SELECT NVL(MAX(TIMES), 0) + 1
              INTO c_last_times
              FROM HD_RENT_GURT_INCOME_ADJ
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
         END IF;

         C_MOD_YN := 'N';
         C_AC_YN  := 'Y';
         C_DC_YN  := 'Y';
      END LOOP;
   END;

   BEGIN
      UPDATE HD_RENT_GURT_INCOME_DAILY_ADJ
         SET TRANS_YN    = 'Y',
             CHG_DUTY_ID = C_INPUT_DUTY_ID,
             CHG_DATE    = C_SYSDT
       WHERE DEPT_CODE   = C_DEPT_CODE
         AND HOUSETAG    = C_HOUSETAG
         AND IN_DATE     = as_dt
         AND IN_SEQ      = ai_inseq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#03 UPDATE ERROR HD_RENT_GURT_INCOME_DAILY_ADJ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;
   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_hd_rent_gurt_income_adj;
/


DROP PROCEDURE PROC_HD_RENT_GURT_INCOME_PLAN;

CREATE OR REPLACE PROCEDURE proc_hd_rent_gurt_income_plan (
  as_cust           IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_dt             IN VARCHAR2,   -- 입금일
  ad_amt            IN NUMBER,     -- 입금액
  ad_seq_num        IN NUMBER,     -- SEQ_NUM
  ai_term           IN INTEGER,    -- 계약차수
  as_counts         IN VARCHAR2    -- 차수
) IS

-------------------------------------------------------------
-------------------------------------------------------------
CURSOR DETAIL_CUR (a_dt VARCHAR2, a_mon INTEGER) IS
   SELECT DELAYRATE, DELAYCUT, DELAYUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DELAY
    WHERE CUST_CODE   = as_cust
      AND SEQ         = ai_seq
      AND ENDDATE    >= a_dt
      AND STARTDATE  <= as_dt
      AND RATE_TAG    = '2' /*보증금2 임대료3*/
      AND ((END_TAG   = '1' AND END_DAYS   >= a_mon) OR
           (END_TAG   = '2' AND END_DAYS    > a_mon))
      AND ((START_TAG = '1' AND START_DAYS <= a_mon) OR
           (START_TAG = '2' AND START_DAYS  < a_mon));

CURSOR DETAIL_CUR1 (a_dt VARCHAR2) IS
   SELECT DISCNTRATE, DISCNTCUT, DISCNTUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DISCOUNT
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND RATE_TAG    = '2' /*보증금2 임대료3*/
      AND ENDDATE   >= as_dt
      AND STARTDATE <= a_dt;

-------------------------------------------------------------
-------------------------------------------------------------
-- 변수선언
   c_dept_code         VARCHAR2(12);  -- 부서코드
   c_housetag          VARCHAR2(1);   -- 분양구분
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_INSEQ             NUMBER;   -- 입금순번
   C_LAST_TERM         INTEGER;      -- 미납입된 마지막계약차수
   C_LAST_COUNTS       VARCHAR2(2);  -- 미납입된 마지막약정차수
   C_LAST_TIMES        INTEGER;  -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_BUNAMT            NUMBER(30,9);   -- 약정분양금액
   C_LANDAMT           NUMBER(30,9);   -- 약정토지가
   C_BUILDAMT          NUMBER(30,9);   -- 약정건물가
   C_VATAMT            NUMBER(30,9);   -- 약정부가세
   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 약정계산금액
--   C_TEMP_RATE         NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   -- 
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_DELAY_TAG         VARCHAR2(1);
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_SYSDT             VARCHAR(14);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분

   C_FIXRATE_TAG       VARCHAR2(1);   -- 고정연체이율구분
   C_FIXRATE_DAY       NUMBER(3);     -- 고정기간일수
   C_FIXRATE           FLOAT;         -- 기간이내연체이율
   C_FIXRATE2          FLOAT;         -- 기간이후연체이율

   C_TEMPDT            VARCHAR2(8);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr         EXCEPTION;                  -- SELECT Data Not Found

BEGIN
   C_SYSDT := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   BEGIN
      DELETE HD_RENT_GURT_INCOME_TEMP
       WHERE SEQ_NUM   = ad_seq_num
         AND CUST_CODE = as_cust
         AND SEQ       = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'HD_RENT_GURT_INCOME_TEMP : DELETE.');
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      DELETE HD_RENT_GURT_AGREE_TEMP
       WHERE SEQ_NUM   = ad_seq_num
         AND CUST_CODE = as_cust
         AND SEQ       = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'HD_RENT_GURT_AGREE_TEMP : DELETE.');
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      -- 약정사항을 복사한다.
      INSERT INTO HD_RENT_GURT_AGREE_TEMP
           ( SEQ_NUM,       CUST_CODE,   SEQ,         TERM_CHG_SEQ,
             COUNTS,        AGREE_DATE,  AGREE_AMT,   DISCNT_YN,
             DELAY_YN,      PERPECT_TAG, RECEIPT_AMT,
             INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID, CHG_DATE,
             SLIP_DATE,     SLIP_SEQ)
      SELECT AD_SEQ_NUM,    CUST_CODE,   SEQ,         TERM_CHG_SEQ,
             COUNTS,        AGREE_DATE,  AGREE_AMT,   DISCNT_YN,
             DELAY_YN,      PERPECT_TAG, RECEIPT_AMT,
             INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE,
             SLIP_DATE,     SLIP_SEQ
         FROM HD_RENT_GURT_AGREE
        WHERE CUST_CODE = as_cust
          AND SEQ       = ai_seq;

      -- 입금사항을 복사한다.
      INSERT INTO HD_RENT_GURT_INCOME_TEMP
            (SEQ_NUM,       CUST_CODE,     SEQ,           TERM_CHG_SEQ,
             COUNTS,        TIMES,         DEPT_CODE,     HOUSETAG,
             IN_DATE,       IN_SEQ,        DEPOSIT_NO,    RECEIPT_DATE,
             RECEIPT_AMT,   DELAY_DAYS,    DELAY_AMT,     DISCNT_DAYS,
             DISCNT_AMT,    REALINCOM_AMT, BANK_CODE,     BANK_NAME,
             PAY_TAG,       INCOM_TYPE,    MOD_YN,        REAL_PAY_TAG,
             SLIP_DATE,     SLIP_SEQ,      TAX_DATE,      TAX_SEQ,
             SLIP_TYPE,     CALC_YN,
             INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,   CHG_DATE,
             REMARK,
             OUT_DT,        OUT_TM,        OUT_SEQ,       OUT_BANK)
      SELECT ad_seq_num,    CUST_CODE,     SEQ,           TERM_CHG_SEQ,
             COUNTS,        TIMES,         DEPT_CODE,     HOUSETAG,
             IN_DATE,       IN_SEQ,        DEPOSIT_NO,    RECEIPT_DATE,
             RECEIPT_AMT,   DELAY_DAYS,    DELAY_AMT,     DISCNT_DAYS,
             DISCNT_AMT,    REALINCOM_AMT, BANK_CODE,     BANK_NAME,
             PAY_TAG,       INCOM_TYPE,    MOD_YN,        REAL_PAY_TAG,
             SLIP_DATE,     SLIP_SEQ,      TAX_DATE,      TAX_SEQ,
             SLIP_TYPE,     'N',
             INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,   CHG_DATE,
             REMARK,
             OUT_DT,        OUT_TM,        OUT_SEQ,       OUT_BANK
         FROM HD_RENT_GURT_INCOME
        WHERE CUST_CODE = as_cust
          AND SEQ       = ai_seq ;

      c_input_amt := ad_amt;
      -----------------------------------------------------
      -- 사업코드, 분양구분
      SELECT DEPT_CODE,              HOUSETAG,            daymonth_tag,
             NVL(FIXRATE_TAG, '2'),  NVL(FIXRATE_DAY, 0), NVL(FIXRATE, 0),  NVL(FIXRATE2, 0)
        INTO C_DEPT_CODE,            C_HOUSETAG,          C_DAYMONTH,
             C_FIXRATE_TAG,          C_FIXRATE_DAY,       C_FIXRATE,        C_FIXRATE2
        FROM HD_RENT_MASTER
       WHERE CUST_CODE = as_cust
         AND SEQ       = ai_seq;

      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      SELECT COUNT(*)
        INTO C_CNT
        FROM HD_RENT_GURT_AGREE_TEMP
       WHERE SEQ_NUM     = ad_seq_num
         AND CUST_CODE   = as_cust
         AND SEQ         = ai_seq
         AND PERPECT_TAG = 'N';

      IF C_CNT > 0 THEN
         SELECT MIN(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_GURT_AGREE_TEMP
          WHERE SEQ_NUM     = ad_seq_num
            AND CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';
         SELECT MIN(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_GURT_AGREE_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND PERPECT_TAG  = 'N';

         SELECT NVL(MAX(TIMES), 0)
           INTO C_LAST_TIMES
           FROM HD_RENT_GURT_INCOME_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      ELSE
         IF ad_amt = 99999999999 THEN
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT COUNT(*)
           INTO C_CNT
           FROM HD_RENT_GURT_AGREE_TEMP
          WHERE SEQ_NUM   = ad_seq_num
            AND CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         IF C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다.==>' || as_cust || '-' || TO_CHAR(ai_seq);
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT MAX(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_GURT_AGREE_TEMP
          WHERE SEQ_NUM   = ad_seq_num
            AND CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         SELECT MAX(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_GURT_AGREE_TEMP
          WHERE SEQ_NUM   = ad_seq_num
            AND CUST_CODE = as_cust
            AND SEQ       = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         SELECT NVL(MAX(TIMES), 0)
           INTO C_LAST_TIMES
           FROM HD_RENT_GURT_INCOME_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      END IF;

      C_LAST_TIMES := C_LAST_TIMES + 1;

      -----------------------------------------------------
      -- LOOP 시작
      LOOP
         IF C_LAST_TERM > ai_term OR (C_LAST_TERM = ai_term AND C_LAST_COUNTS > as_counts) THEN
            EXIT;
         END IF;

         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         SELECT NVL((TO_DATE(AGREE_DATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD')) * -1, 0),
                NVL(AGREE_AMT, 0), AGREE_DATE, DISCNT_YN, DELAY_YN
           INTO C_DAYS, C_BUNAMT, C_AGREEDATE, C_DC_YN, C_AC_YN
           FROM HD_RENT_GURT_AGREE_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;

         IF C_DAYS > 0 THEN -- 연체료일 경우
            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'N');
            IF C_TEMPDT >= as_dt THEN
               C_DAYS := 0;
            END IF;
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS), 0) INTO C_CNT, C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = c_dept_code
--               AND HOUSETAG  = c_housetag
--               AND AD_TAG    = '1'
--               AND RATE_TAG  = '2'
--               AND HOLIDAY   = C_AGREEDATE;
--            IF C_CNT > 0 THEN
--               IF C_DAYS <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
         END IF;

         IF C_DAYS < 0 THEN -- 할인료일 경우
            SELECT COUNT(*), NVL(MAX(GONG_DAYS), 0) INTO C_CNT, C_TEMP_CNT
              FROM HD_REFER_HOLIDAY
             WHERE DEPT_CODE = c_dept_code
               AND HOUSETAG  = c_housetag
               AND AD_TAG    = '2'
               AND RATE_TAG  = '2'
               AND HOLIDAY   = C_AGREEDATE;
            IF C_CNT > 0 THEN
               C_CNT := C_DAYS * -1;
               IF C_CNT <= C_TEMP_CNT THEN
                  C_DAYS := 0;
               END IF;
            END IF;
         END IF;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0)
           INTO C_RECEIPTAMT
            FROM HD_RENT_GURT_INCOME_TEMP
           WHERE SEQ_NUM      = ad_seq_num
             AND CUST_CODE    = as_cust
             AND SEQ          = ai_seq
             AND TERM_CHG_SEQ = C_LAST_TERM
             AND COUNTS       = C_LAST_COUNTS
             AND TIMES        < 90;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_BUNAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         IF C_LAST_TIMES > 89 THEN
            C_TEMP_AMT := c_input_amt;
            c_input_amt := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF (C_DAYS = 0) THEN
               IF C_WORK_AMT < c_input_amt THEN
                  C_TEMP_AMT   := C_WORK_AMT;
                  c_input_amt := c_input_amt - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT   := c_input_amt;
                  c_input_amt := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            ELSE
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN 
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF C_AC_YN = 'Y' THEN
                     -- 납입대상금액계산
                     C_DELAY_DAY   := C_DAYS;
                     C_TEMP_RATE := 0;

                     IF C_DAYMONTH = '2' THEN
                        C_MONTHS := months_between(to_date(as_dt, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'));
                     ELSE
                        C_MONTHS := to_date(as_dt, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD');
                     END IF;

                     OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                     LOOP
                        FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR%NOTFOUND;
                        IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                           C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF C_AGREEDATE >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                        ELSE
                           IF as_dt <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR;
                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE, C_DELAYCUT, C_DELAYUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                             CASE C_DELAYUNIT
                                WHEN '1' THEN 1
                                WHEN '2' THEN 10
                                WHEN '3' THEN 100
                                WHEN '4' THEN 1000
                                WHEN '5' THEN 10000
                                WHEN '6' THEN 100000
                             ELSE 1
                             END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           IF C_DELAYCUT = '1' THEN
                              C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                     ELSE
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DELAYUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
--@@                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
--@@                                 C_DELAY_AMT := TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
--@@                                    C_DELAY_AMT := TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DELAY_AMT := ROUND((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DELAYCUT = '1' THEN
--@@                              C_DELAY_AMT := C_DELAY_AMT + TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
--@@                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DELAY_AMT := C_DELAY_AMT + ROUND((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        C_TEMP_AMT   := c_input_amt - C_DELAY_AMT;
                        c_input_amt := 0;
                     END IF;
                  ELSE
                     IF C_DELAY_TAG = 'Y' THEN -- 연체료 직접 입력이면
                        IF (C_WORK_AMT + C_DELAY_AMT) < c_input_amt THEN
                           C_TEMP_AMT  := C_WORK_AMT;
                           c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                        ELSE
                           C_TEMP_AMT   := c_input_amt;
                           c_input_amt := 0;
                        END IF;
                     ELSE
                        IF C_WORK_AMT < c_input_amt THEN
                           C_TEMP_AMT   := C_WORK_AMT;
                           c_input_amt := c_input_amt - C_WORK_AMT;
                        ELSE
                           C_TEMP_AMT   := c_input_amt;
                           c_input_amt := 0;
                        END IF;
                     END IF;
                  END IF;
               ELSE
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DETAIL_CUR1(C_AGREEDATE);
                     LOOP
                        FETCH DETAIL_CUR1 INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR1%NOTFOUND;
                        IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF as_dt >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                        ELSE
                           IF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR1;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
                                    C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DISCOUNT_AMT := ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT - C_DISCOUNT_AMT);
                     ELSE
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
--@@                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
--@@                                 C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
--@@                                    C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DISCOUNT_AMT := ROUND((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DISCNTCUT = '1' THEN
--@@                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        C_TEMP_AMT   := c_input_amt + C_DISCOUNT_AMT;
                        c_input_amt := 0;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < c_input_amt THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        c_input_amt := c_input_amt - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := c_input_amt;
                        c_input_amt := 0;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         -----------------------------------------------------------------------------
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

         C_DAYS := TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         -- 계산된 값을 분양_세대별수입금에 넣어준다.
         BEGIN
            INSERT INTO HD_RENT_GURT_INCOME_TEMP
                      (SEQ_NUM,
                       CUST_CODE,       SEQ,         TERM_CHG_SEQ,   COUNTS,         TIMES,
                       DEPT_CODE,       HOUSETAG,    IN_DATE,        IN_SEQ,         DEPOSIT_NO,
                       RECEIPT_DATE,    RECEIPT_AMT,
                       DELAY_DAYS,      DELAY_AMT,   DISCNT_DAYS,    DISCNT_AMT,     REALINCOM_AMT,
                       BANK_CODE,       BANK_NAME,
                       PAY_TAG,         INCOM_TYPE,  MOD_YN,         REAL_PAY_TAG,
                       SLIP_DATE,       SLIP_SEQ,    SLIP_TYPE,
                       TAX_DATE,        TAX_SEQ,     CALC_YN,
                       INPUT_DUTY_ID,   INPUT_DATE,  CHG_DUTY_ID,    CHG_DATE)
               VALUES (ad_seq_num,
                       as_cust,         ai_seq,      C_LAST_TERM,    C_LAST_COUNTS,  C_LAST_TIMES,
                       C_DEPT_CODE,     C_HOUSETAG,  as_dt,          0000,           '예정조회',
                       as_dt,           C_TEMP_AMT,
                       C_DELAY_DAY,     C_DELAY_AMT, C_DISCOUNT_DAY, C_DISCOUNT_AMT, C_R_RECEIPTAMT,
                       ' ',             ' ',
                       'X',             'X',         'N',            'N',
                       '',              0,           '',
                       '',              0,           'Y',
                       NULL,            C_SYSDT,     '',             '');
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_GURT_INCOME_TEMP' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;
         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0)
           INTO C_RECEIPTAMT
            FROM HD_RENT_GURT_INCOME_TEMP
           WHERE SEQ_NUM      = ad_seq_num
             AND CUST_CODE    = as_cust
             AND SEQ          = ai_seq
             AND TERM_CHG_SEQ = C_LAST_TERM
             AND COUNTS       = C_LAST_COUNTS
             AND TIMES        < 90;
         -- 입금완료구분값을 구한다.
         IF C_BUNAMT <= C_RECEIPTAMT THEN BEGIN
            C_PERPECTTAG := 'Y';
            C_RECEIPTAMT := C_BUNAMT;
         END; ELSE
            C_PERPECTTAG := 'N';
         END IF;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         UPDATE HD_RENT_GURT_AGREE_TEMP
            SET PERPECT_TAG = C_PERPECTTAG,
                RECEIPT_AMT = C_RECEIPTAMT  
           WHERE SEQ_NUM      = ad_seq_num
             AND CUST_CODE    = as_cust
             AND SEQ          = ai_seq
             AND TERM_CHG_SEQ = C_LAST_TERM
             AND COUNTS       = C_LAST_COUNTS;
         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF C_INPUT_AMT = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&

         SELECT COUNT(*)
           INTO c_cnt
           FROM HD_RENT_GURT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       > C_LAST_COUNTS
            AND PERPECT_TAG  = 'N';

         IF c_cnt < 1 THEN BEGIN
            IF C_PERPECTTAG = 'Y' and ad_amt = 99999999999 THEN
               EXIT;
            END IF;

            SELECT MAX(TIMES) + 1
              INTO c_last_times
              FROM HD_RENT_GURT_INCOME 
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
            IF c_last_times < 90 THEN
               c_last_times := 90;
            END IF;   
         END; ELSE
            SELECT MIN(TERM_CHG_SEQ)
              INTO C_LAST_TERM
              FROM HD_RENT_GURT_AGREE
             WHERE CUST_CODE   = as_cust
               AND SEQ         = ai_seq
               AND PERPECT_TAG = 'N';

            SELECT MIN(COUNTS)
              INTO C_LAST_COUNTS
              FROM HD_RENT_GURT_AGREE
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       > C_LAST_COUNTS
               AND PERPECT_TAG  = 'N';

            SELECT NVL(MAX(TIMES), 0) + 1
              INTO c_last_times
              FROM HD_RENT_GURT_INCOME
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
         END IF;

         C_AC_YN  := 'Y';
         C_DC_YN  := 'Y';
      END LOOP;
   END;
   COMMIT WORK;
   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_hd_rent_gurt_income_plan;
/


DROP PROCEDURE PROC_HD_RENT_HEYAK;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_HEYAK" (
   as_cust    IN VARCHAR2, --해약자
   as_seq     IN VARCHAR2, --해약자순번
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt     VARCHAR2(14);
v_candt     VARCHAR2(8);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   SELECT CANCEL_DATE
     INTO v_candt
     FROM HD_RENT_CANCEL
    WHERE CUST_CODE = as_cust
      AND SEQ       = TO_NUMBER(as_seq); 

   BEGIN
      UPDATE HD_RENT_MASTER
         SET CHANGE_TAG  = '3',
             CHANGE_DATE = v_candt,
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE CUST_CODE   = as_cust
         AND SEQ         = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#01 UPDATE ERROR HD_RENT_MASTER' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_HOUSE;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_HOUSE" (
   as_cust    IN VARCHAR2, --고객
   as_seq     IN VARCHAR2, --고객순번
   as_dt      IN VARCHAR2, --전환일
   as_contno  IN VARCHAR2, --계약번호
   as_rent    IN VARCHAR2, --미납임대료
   as_delay   IN VARCHAR2, --연체료
   as_penalty IN VARCHAR2, --위약금
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_cnt         NUMBER(5);
v_sysdt       VARCHAR2(14);

i_rent        NUMBER(15);
i_delay       NUMBER(15);
i_penalty     NUMBER(15);

v_iseq        NUMBER(5);
v_nseq        NUMBER(5);
v_cnm         VARCHAR2(50);
v_dept        VARCHAR2(12);
v_htag        VARCHAR2(1);
v_bno         VARCHAR2(10);
v_hno         VARCHAR2(10);
v_deposit     VARCHAR2(30);
v_bank        VARCHAR2(8);
v_banknm      VARCHAR2(30);
v_msdt        VARCHAR2(8);
v_medt        VARCHAR2(8);
v_dmt         VARCHAR2(1);
v_viryn       VARCHAR2(1);
v_vdeposit    VARCHAR2(30);

v_c_cnt       VARCHAR2(2);
v_c_date      VARCHAR2(8);
v_c_amt       NUMBER(15);
v_c_lamt      NUMBER(15);
v_c_bamt      NUMBER(15);
v_c_vamt      NUMBER(15);
v_c_mamt      NUMBER(15);

v_receiptamt  NUMBER(15);
v_inamt       NUMBER(15);

v_company     VARCHAR2(6);
v_WorkNo      NUMBER(10);
v_DeptNo      NUMBER(10);
v_WorkSeq     NUMBER(10);
v_Remark      VARCHAR2(500);
v_RemarkD     VARCHAR2(500);
v_sliptp      VARCHAR2(5);

z_1c          VARCHAR2(10); /* 22103010    임대보증금 */
z_1d          VARCHAR2(10); /* 11101300    보통예금 */
z_2c          VARCHAR2(10); /* 11101300    보통예금 */
z_2d          VARCHAR2(10); /* 22103010    임대보증금 */
z_3c          VARCHAR2(10); /* 43115010    임대료 */
z_4c          VARCHAR2(10); /* 43103010    수입위약배상금 */

/* 수지 계정 */
s_1c          VARCHAR2(10);
s_1d          VARCHAR2(10);
s_2c          VARCHAR2(10);
s_2d          VARCHAR2(10);
s_3c          VARCHAR2(10);
s_4c          VARCHAR2(10);

/*---------------------------------------------------------------------------*/
c_counts      VARCHAR2(2);
c_lamt        NUMBER(15);
c_bamt        NUMBER(15);
c_vamt        NUMBER(15);
c_mamt        NUMBER(15);
c_amt         NUMBER(15);

t_temp        NUMBER(15);
t_amt         NUMBER(15);
t_lamt        NUMBER(15);
t_bamt        NUMBER(15);
t_vamt        NUMBER(15);
t_mamt        NUMBER(15);
t_pyn         VARCHAR2(1);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_cust IN VARCHAR2, a_seq IN NUMBER) IS
SELECT COUNTS, LANDAMT, BUILDAMT, VATAMT, BUNAMT
  FROM HD_HOUS_SELLDETAIL
 WHERE CUST_CODE = a_cust
   AND SEQ       = a_seq;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_deposit  := '';
   i_rent     := TO_NUMBER(as_rent);
   i_delay    := TO_NUMBER(as_delay);
   i_penalty  := TO_NUMBER(as_penalty);

   SELECT A.DEPT_CODE, A.HOUSETAG, A.BUILDNO, A.HOUSENO, A.CUST_NAME, B.COMPANY_CODE
     INTO v_dept,      v_htag,     v_bno,     v_hno,     v_cnm,       v_company
     FROM HD_RENT_MASTER A,
          HD_CODE_DEPT B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.CUST_CODE = as_cust
      AND A.SEQ       = TO_NUMBER(as_seq);

   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SELL
    WHERE DEPT_CODE  = v_dept
      AND HOUSETAG   = v_htag
      AND CONTRACTNO = as_contno;
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '계약번호가 중복 됩니다');
      ROLLBACK;
      RETURN;
   END IF;

   SELECT SUM(RECEIPT_AMT)
     INTO v_receiptamt
     FROM HD_RENT_GURT_INCOME
    WHERE CUST_CODE     = as_cust
      AND SEQ           = TO_NUMBER(as_seq)
      AND TERM_CHG_SEQ <> 99;

   v_inamt := v_receiptamt - i_rent  - i_delay - i_penalty;

   SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE = v_dept
      AND HOUSETAG  = v_htag
      AND RECEIPTTAG NOT IN ('8', '9')
      AND ROWNUM < 2
    ORDER BY LISTORDER;
   IF v_deposit = 'XXXXX' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 분양입금계좌를 등록하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   SELECT MAX(BANK_CODE), MAX(BANK_NAME)
     INTO v_bank, v_banknm
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE  = v_dept
      AND HOUSETAG   = v_htag
      AND DEPOSIT_NO = v_deposit;

   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SELL
    WHERE DEPT_CODE = v_dept
      AND HOUSETAG  = v_htag
      AND BUILDNO   = v_bno
      AND HOUSENO   = v_hno
      AND CHANGETAG = '1';
   IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '해당동호는 이미 분양관리 중입니다');
      ROLLBACK;
      RETURN;
   END IF;

   SELECT NVL(MAX(SEQ), 0) + 1
     INTO v_nseq
     FROM HD_HOUS_SELL
    WHERE CUST_CODE = as_cust;

   SELECT MOVEINSTARTDATE, MOVEINENDDATE, HD_DAYMONTH_TAG, VIRDEPOSIT_YN
     INTO v_msdt,          v_medt,        v_dmt,           v_viryn
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = v_dept
      AND HOUSETAG  = v_htag;

   v_vdeposit := '';
   IF v_viryn = 'Y' THEN
      SELECT VIRDEPOSIT
        INTO v_vdeposit
        FROM HD_HOUS_SUPPLY
       WHERE DEPT_CODE = v_dept
         AND HOUSETAG  = v_htag
         AND BUILDNO   = v_bno
         AND HOUSENO   = v_hno;
   END IF;

   SELECT COUNTS,  AGREEDATE, AGREEAMT, LANDAMT,  BUILDAMT, VATAMT,   MANAGEAMT
     INTO v_c_cnt, v_c_date,  v_c_amt,  v_c_lamt, v_c_bamt, v_c_vamt, v_c_mamt
     FROM HD_REFER_SELLDETAIL
    WHERE DEPT_CODE = v_dept
      AND HOUSETAG  = v_htag
      AND BUILDNO   = v_bno
      AND HOUSENO   = v_hno
      AND COUNTS    = (SELECT MIN(COUNTS)
                         FROM HD_REFER_SELLDETAIL
                        WHERE DEPT_CODE = v_dept
                          AND HOUSETAG  = v_htag
                          AND BUILDNO   = v_bno
                          AND HOUSENO   = v_hno);

   /*---------------------------------------------------------------------*/
   /*---------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_SELL
                ( CUST_CODE,             SEQ,                   DEPT_CODE,               HOUSETAG,             BUILDNO,
                  HOUSENO,               DONGHO,                                         CUST_NAME,            SQUARE,
                  PRTSQUARE,             TYPE,                  CLASS,                   OPTIONCODE,           CONTRACTTAG,
                  CONTRACTDATE,          CONTRACTNO,
                  LOAN_TAG,              LEASETAG,              LASTCHANGEDATE,          CHANGETAG,
                  CHANGEDATE,            CANCEL_REASON,         CHILD_BUILDNO,           CHILD_HOUSENO,        RELA_CUSTCODE,
                  RELA_SEQ,              VATTAG,                EXCLUSIVEAREA,           COMMONAREA,           ETCCOMMONAREA,
                  PARKINGAREA,           SERVICEAREA,           SITEAREA,                MOVEINSTARTDATE,      MOVEINENDDATE,
                  UNION_CNT,             REMARK,                REFUNDMENTDATE,          REFUNDMENTAMT,        PENALTYAMT,
                  COMP_LOANAMT,          LOAN_INTEREST,         SODUK_TAX,               JUMIN_TAX,            ETC_AMT,
                  BANK_LOAN_ORGAMT,      BANK_LOAN_INTEREST,    BANK_LOAN_INTEREST2,
                  BILL_RETURNAMT,        DELAY_INDEMINITY,      DEPOSIT_COUNT,           CO_CUSTCODE,          CO_SANGHO,
                  CO_CONDITION,          CO_CATEGORY,           LOANBANK,                LOANDEPOSIT,          LOANUSER,
                  SLIPDATE,              SLIPSEQ,
                  INPUT_DUTY_ID,         INPUT_DATE,            CHG_DUTY_ID,             CHG_DATE,
                  APPLY_YN,              APPLY_EMPNO,           APPLY_DATE,              RENTHD_YN,            RENTHD_SEQ,
                  BALCONY_TAG,           BALCONYAREA,           DAYMONTH_TAG,            FLOOR,                CONT_CONDITION,
                  LAND_RETURN,           INT_CALC_DATE,         PREDISAMT,               PROXYAMT,
                  INCONT_DATE,
                  TRUSTAMT,              PREDIS_TAG,            PROXY_TAG,               TRUST_TAG,            VIR_YN,
                  VDEPOSIT )
           SELECT as_cust,               v_nseq,                v_dept,                  v_htag,               BUILDNO,
                  HOUSENO,               BUILDNO || '-' || HOUSENO,                      v_cnm,                SQUARE,
                  PRTSQUARE,             TYPE,                  CLASS,                   OPTIONCODE,           '1',
                  as_dt,                 as_contno,
                  'N',                   'N',                   as_dt,                   '1',
                  '29991231',            '',                    '',                      '',                   '',
                  0,                     NVL(VATTAG, 'N'),      NVL(EXCLUSIVEAREA, 0),   NVL(COMMONAREA, 0),   NVL(ETCCOMMONAREA, 0),
                  NVL(PARKINGAREA, 0),   NVL(SERVICEAREA, 0),   NVL(SITEAREA, 0),        v_msdt,               v_medt,
                  0,                     '',                    '',                      0,                    0,
                  0,                     0,                     0,                       0,                    0,
                  0,                     0,                     0,
                  0,                     0,                     0,                       as_cust,              v_cnm,
                  '',                    '',                    '',                      '',                   '',
                  '',                    0,
                  as_user,               v_sysdt ,              '',                      '',
                  'N',                   '',                    '',                      'Y',                  TO_NUMBER(as_seq),
                  'N',                   0,                     v_dmt,                   FLOOR,                '00',
                  '00',                  '',                    0,                       0,
                  as_dt,
                  0,                     'N',                   'N',                     'N',                  v_viryn,
                  v_vdeposit
             FROM HD_HOUS_SUPPLY
            WHERE DEPT_CODE = v_dept
              AND HOUSETAG  = v_htag
              AND BUILDNO   = v_bno
              AND HOUSENO   = v_hno;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_SELL 01 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_SELLDETAIL
                ( CUST_CODE,     SEQ,             COUNTS,      DEPT_CODE,
                  HOUSETAG,      BUILDNO,         HOUSENO,     AGREEDATE,
                  LANDAMT,       BUILDAMT,        VATAMT,      MANAGEAMT, BUNAMT,
                  DC_YN,         AC_YN,           PERPECTTAG,
                  RECEIPTAMT,    DISTRIBUTE_RATE, SLIPDT,      SLIPSEQ,
                  INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID, CHG_DATE )
           SELECT as_cust,       v_nseq,          COUNTS,      DEPT_CODE,
                  HOUSETAG,      BUILDNO,         HOUSENO,     CASE WHEN COUNTS = '00' OR as_dt > AGREEDATE THEN as_dt ELSE AGREEDATE END,
                  LANDAMT,       BUILDAMT,        VATAMT,      MANAGEAMT, AGREEAMT,
                  DC_YN,         AC_YN,           'N',
                  0,             DISTRIBUTE_RATE, '',          NULL,
                  as_user,       v_sysdt,         '',          ''
             FROM HD_REFER_SELLDETAIL
            WHERE DEPT_CODE = v_dept
              AND HOUSETAG  = v_htag
              AND BUILDNO   = v_bno
              AND HOUSENO   = v_hno;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_SELLDETAIL 02 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
   
   /*---------------------------------------------------------------------*/
   t_temp := v_inamt;
   IF t_temp > 0 THEN
      v_iseq := 0;
      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_iseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = v_dept
         AND HOUSETAG  = v_htag
         AND INDT      = as_dt;

      /*---------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,   INDT,          INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,     SEQ,
                     CUST_NAME,     DEPOSIT_NO, INAMT,         INGUBUN,
                     INTYPE,        IHE_YN,     CDNO,          MOD_YN,
                     MOD_RAMT,      MOD_DAMT,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,   CHG_DATE,
                     VDEPOSIT_NO,   OUT_DT,     OUT_TM,        OUT_SEQ,
                     OUT_BANK,      REMARK )
             VALUES (v_dept,        v_htag,     as_dt,         v_iseq,
                     v_bno,         v_hno,      as_cust,       v_nseq,
                     v_cnm,         v_deposit,  v_inamt,       '1',
                     '1',           'Y',        '',            'N',
                     0,             0,
                     as_user,       v_sysdt,    '',            '',
                     '',            '',         '',            0,
                     '',            '임대분양전환금' );
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME 03 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      OPEN CURMAKE(as_cust, v_nseq);
      LOOP
         FETCH CURMAKE 
          INTO c_counts, c_lamt, c_bamt, c_vamt, c_amt;
         EXIT WHEN CURMAKE%NOTFOUND;

         IF t_temp = 0 THEN
            EXIT;
         END IF;

         IF t_temp >= c_amt THEN
            t_amt  := c_amt;
            t_lamt := c_lamt;
            t_bamt := c_bamt;
            t_vamt := c_vamt;
            t_mamt := c_mamt;
            t_temp := t_temp - c_amt;
            t_pyn  := 'Y';
         ELSE
            t_amt  := t_temp;

            t_mamt := TRUNC(((c_mamt / c_amt) * t_amt) / 10) * 10;
            t_bamt := TRUNC(((c_bamt / (c_amt - c_mamt)) * (t_amt - t_mamt)) / 10) * 10;
            IF c_vamt = 0 THEN
               t_vamt := 0;
            ELSE
               t_vamt := t_bamt / 10;
            END IF;
            t_lamt := t_amt - t_mamt - t_bamt - t_vamt;
            t_temp := 0;
            t_pyn  := 'N';
         END IF;

         BEGIN
            INSERT INTO HD_HOUS_INCOME
                      ( CUST_CODE,       SEQ,           COUNTS,           TIMES,
                        DEPT_CODE,       HOUSETAG,      BUILDNO,          HOUSENO,
                        DEPOSIT_NO,      RECEIPTDATE,   RECEIPTAMT,       RECEIPTLANDAMT,
                        RECEIPTBUILDAMT, RECEIPTVATAMT, RECEIPTMANAGEAMT, DELAYDAYS,      DELAYAMT,
                        DISCNTDAYS,      DISCNTAMT,     REALINCOMAMT,     REALLANDAMT,
                        REALBUILDAMT,    REALVATAMT,    REALMANAGEAMT,    BANK_CODE,      BANK_NAME,
                        PAYTAG,          INCOMTYPE,     MOD_YN,           REAL_PAY_TAG,
                        SLIPDT,          SLIPSEQ,       TAXDATE,          TAXSEQ,
                        INSEQ,
                        INPUT_DUTY_ID,   INPUT_DATE,    CHG_DUTY_ID,      CHG_DATE,
                        SLIPTYPE,        VDEPOSIT_NO,   DETAILMOD_YN,     OUT_DT,
                        OUT_TM,          OUT_SEQ,       OUT_BANK,         REMARK )
                VALUES (as_cust,         v_nseq,        c_counts,         1,
                        v_dept,          v_htag,        v_bno,            v_hno,
                        v_deposit,       as_dt,         t_amt,            t_lamt,
                        t_bamt,          t_vamt,        t_mamt,           0,              0,
                        0,               0,             t_amt,            t_lamt,
                        t_bamt,          t_vamt,        t_mamt,           v_bank,         v_banknm,
                        '1',             '1',           'N',              'Y',
                        '',              NULL,          '',               NULL,
                        v_iseq,
                        as_user,         v_sysdt,       '',               '',
                        NULL,            '',            'N',              '',
                        '',              0,             '',               '임대분양전환금' );
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_INCOME 04 ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         BEGIN
            UPDATE HD_HOUS_SELLDETAIL
               SET DC_YN      = 'N',
                   AC_YN      = 'N',
                   RECEIPTAMT = t_amt,
                   PERPECTTAG = t_pyn
             WHERE CUST_CODE  = as_cust
               AND SEQ        = v_nseq
               AND COUNTS     = c_counts;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SELLDETAIL 05 ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;
      END LOOP;
      CLOSE CURMAKE;
   END IF;

   /*---------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_RATE_DISCOUNT
                 (CUST_CODE,     SEQ,        STARTDATE,   ENDDATE,
                  DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
           SELECT as_cust,       v_nseq,     STARTDATE,   ENDDATE,
                  DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                  as_user,       v_sysdt,         '',          ''
             FROM HD_REFER_RATE_DISCOUNT
            WHERE DEPT_CODE = v_dept
              AND HOUSETAG  = v_htag
              AND RATE_TAG  = '1';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_RATE_DISCOUNT 06 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_HOUS_RATE_DELAY
                 (CUST_CODE,     SEQ,        START_DAYS,  END_DAYS,
                  STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                  DELAYUNIT,     START_TAG,  END_TAG,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
           SELECT as_cust,       v_nseq,     START_DAYS,  END_DAYS,
                  STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                  DELAYUNIT,     START_TAG,  END_TAG,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_REFER_RATE_DELAY
            WHERE DEPT_CODE = v_dept
              AND HOUSETAG  = v_htag
              AND RATETAG   = '1';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_RATE_DELAY 07 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SUPPLY
         SET CONTRACTYESNO = 'Y',
             VIRDEPOSIT    = '',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = v_dept
         AND HOUSETAG      = v_htag
         AND BUILDNO       = v_bno
         AND HOUSENO       = v_hno;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUPPLY 08 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   /*환불 전표 처리 */
   v_WorkSeq := 0;
   v_Remark := '임대분양전환 (' || v_bno || '-' || v_hno || ')';
   v_sliptp := 'HDB';

   /* --- 계정셋팅 --- */
   SELECT NVL(MAX(Z1C), 'ERR'), NVL(MAX(Z1D), 'ERR'), NVL(MAX(Z2C), 'ERR'), NVL(MAX(Z2D), 'ERR'),
          NVL(MAX(Z3C), 'ERR'), NVL(MAX(Z4C), 'ERR'),
          NVL(MAX(S1C), ''),    NVL(MAX(S1D), ''),    NVL(MAX(S2C), ''),    NVL(MAX(S2D), ''),
          NVL(MAX(S3C), ''),    NVL(MAX(S4C), '')

     INTO z_1c, z_1d, z_2c, z_2d, z_3c, z_4c,
          s_1c, s_1d, s_2c, s_2d, s_3c, s_4c

     FROM (SELECT DECODE(JCODE, '1C', JACNTCODE, '') AS Z1C, DECODE(JCODE, '1D', JACNTCODE, '') AS Z1D,
                  DECODE(JCODE, '2C', JACNTCODE, '') AS Z2C, DECODE(JCODE, '2D', JACNTCODE, '') AS Z2D,
                  DECODE(JCODE, '3C', JACNTCODE, '') AS Z3C, DECODE(JCODE, '4C', JACNTCODE, '') AS Z4C,
                  DECODE(JCODE, '1C', DETAILCODE, '') AS S1C, DECODE(JCODE, '1D', DETAILCODE, '') AS S1D,
                  DECODE(JCODE, '2C', DETAILCODE, '') AS S2C, DECODE(JCODE, '2D', DETAILCODE, '') AS S2D,
                  DECODE(JCODE, '3C', DETAILCODE, '') AS S3C, DECODE(JCODE, '4C', DETAILCODE, '') AS S4C
             FROM HD_CODE_ACNT
            WHERE DEPT_CODE = 'ZZZZZZZZZZZZ' 
          );
   IF 'ERR' IN (z_1c, z_1d, z_2c, z_2d, z_3c, z_4c) THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '전표계정이 정확히 등록되어 있지 않습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE  = v_dept
      AND HOUSETAG   = v_htag
      AND RECEIPTTAG = '8'
      AND ROWNUM < 2
    ORDER BY LISTORDER;
   IF v_deposit = 'XXXXX' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 입금계좌를 등록하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   SELECT MAX(BANK_CODE), MAX(BANK_NAME)
     INTO v_bank, v_banknm
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE  = v_dept
      AND HOUSETAG   = v_htag
      AND DEPOSIT_NO = v_deposit;

   SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
     INTO v_WorkNo
     FROM TM_WORK_WORKNO
    WHERE COMPANY_CODE = v_company
      AND WORK_DATE    = as_dt;

   SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
     INTO v_DeptNo
     FROM TM_WORK_WORKDEPTNO
    WHERE COMPANY_CODE = v_company
      AND DEPT_CODE    = v_dept
      AND WORK_DATE    = as_dt;

   BEGIN
      INSERT INTO TM_SLIP_MASTER
                ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                  WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                  INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                  CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                  APPR_DATE,       DC_YN )
         VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      v_dept,
                  v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                  v_sysdt,         NULL,           NULL,        NULL,          NULL,
                  NULL,            NULL,           v_Remark,    v_receiptamt,  NULL,
                  NULL,            'Y' );
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-1(분양전환환불): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   v_WorkSeq := v_WorkSeq + 1;
   v_remarkD := v_remark || ' (임대보증금)';
   BEGIN
      INSERT INTO TM_SLIP_DETAIL
                ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                  WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                  SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                  COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                  DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                  CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                  CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                  SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                  BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                  CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                  RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                  CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                  QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                  AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                  DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                  DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                  INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
         VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                  v_WorkNo,       v_dept,        v_DeptNo,        v_sliptp,       '002',
                  NULL,           NULL,          NULL,            NULL,           z_2d,
                  v_company,      v_dept,        NULL,            v_receiptamt,   0,
                  0,              v_receiptamt,  0,               0,              0,
                  0,              v_remarkd,     NULL,            NULL,           v_bank,
                  v_banknm,       NULL,          NULL,            NULL,           NULL,
                  NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  as_dt,          NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           s_2d,
                  as_user,        v_sysdt,       NULL,            NULL);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-2(분양전환환불): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   v_WorkSeq := v_WorkSeq + 1;
   v_remarkD := v_remark || ' (보통예금)';
   BEGIN
      INSERT INTO TM_SLIP_DETAIL
                ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                  WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                  SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                  COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                  DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                  CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                  CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                  SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                  BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                  CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                  RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                  CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                  QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                  AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                  DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                  DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                  INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
         VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                  v_WorkNo,       v_dept,        v_DeptNo,        v_sliptp,       '002',
                  NULL,           NULL,          NULL,            NULL,           z_2c,
                  v_company,      v_dept,        NULL,            0,              0,
                  0,              0,             v_inamt,         0,              0,
                  v_inamt,        v_remarkd,     NULL,            NULL,           v_bank,
                  v_banknm,       NULL,          NULL,            NULL,           NULL,
                  NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  as_dt,          NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           s_2c,
                  as_user,        v_sysdt,       NULL,            NULL);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-3(보통예금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   v_WorkSeq := v_WorkSeq + 1;
   v_remarkD := v_remark || ' (임대료)';
   BEGIN
      INSERT INTO TM_SLIP_DETAIL
                ( WORK_COMP,        WORK_DATE,     WORK_NO,          WORK_SEQ,       WORK_SEQ_SCR,
                  WORK_NO_GROUP,    WORK_DEPT,     WORK_DEPT_NO,     SLIP_KIND_CODE, SLIP_DIV,
                  SLIP_DATE,        SLIP_NO,       CONFIRM_DUTY_ID,  CONFIRM_DATE,   ACNT_CODE,
                  COMPANY_CODE,     DEPT_CODE,     PROJ_CODE,        DR_AMT,         DR_CASH,
                  DR_VAT,           DR_SUPPLY,     CR_AMT,           CR_CASH,        CR_VAT,
                  CR_SUPPLY,        REMARK1,       REMARK2,          TAX_COMP_CODE,  CUST_CODE,
                  CUST_NAME,        EVIDENCE_CODE, EVIDENCE_DATE,    EVIDENCE_KIND,  EVIDENCE_NO,
                  SALES_DIV,        SLIP_SEQ,      BANK_CODE,        DEPOSIT_NO,     CHECK_NO,
                  BILL_NO,          BILL_R_NO,     LOAN_NO,          STCK_CODE,      FA_NO,
                  CD_CARD_NO,       USER_ID,       PHONE,            INCOME_CODE,    SALES_CODE,
                  RECEPTION_AREA,   BILL_KIND,     BILL_DIV,         SECU_TYPE_CODE, RECEIPT_DIV,
                  CURRENCY_DIV,     TAXSUM_DIV,    INTEREST_DIV,     QTY1,           QTY2,
                  QTY3,             AMT1,          AMT2,             AMT3,           AMT4,
                  AMT5,             AMT6,          RATE1,            RATE2,          RATE3,
                  DATE1,            DATE2,         DATE3,            DATE4,          DESC1,
                  DESC2,            DESC3,         DESC4,            DESC5,          DETAIL_CODE,
                  INPUT_DUTY_ID,    INPUT_DATE,    CHG_DUTY_ID,      CHG_DATE )
         VALUES ( v_company,        as_dt,         v_WorkNo,         v_WorkSeq,      v_WorkSeq,
                  v_WorkNo,         v_dept,        v_DeptNo,         v_sliptp,       '002',
                  NULL,             NULL,          NULL,             NULL,           z_3c,
                  v_company,        v_dept,        NULL,             0,              0,
                  0,                0,             i_rent + i_delay, 0,              0,
                  i_rent + i_delay, v_remarkd,     NULL,             NULL,           v_bank,
                  v_banknm,         NULL,          NULL,             NULL,           NULL,
                  NULL,             v_WorkSeq,     v_bank,           v_deposit,      NULL,
                  NULL,             NULL,          NULL,             NULL,           NULL,
                  NULL,             NULL,          NULL,             NULL,           NULL,
                  NULL,             NULL,          NULL,             NULL,           NULL,
                  NULL,             NULL,          NULL,             NULL,           NULL,
                  NULL,             NULL,          NULL,             NULL,           NULL,
                  NULL,             NULL,          NULL,             NULL,           NULL,
                  as_dt,            NULL,          NULL,             NULL,           NULL,
                  NULL,             NULL,          NULL,             NULL,           s_3c,
                  as_user,          v_sysdt,       NULL,             NULL);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-4(임대료): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   v_WorkSeq := v_WorkSeq + 1;
   v_remarkD := v_remark || ' (수입위약배상금)';
   BEGIN
      INSERT INTO TM_SLIP_DETAIL
                ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                  WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                  SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                  COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                  DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                  CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                  CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                  SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                  BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                  CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                  RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                  CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                  QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                  AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                  DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                  DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                  INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
         VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                  v_WorkNo,       v_dept,        v_DeptNo,        v_sliptp,       '002',
                  NULL,           NULL,          NULL,            NULL,           z_4c,
                  v_company,      v_dept,        NULL,            0,              0,
                  0,              0,             i_penalty,       0,              0,
                  i_penalty,      v_remarkd,     NULL,            NULL,           v_bank,
                  v_banknm,       NULL,          NULL,            NULL,           NULL,
                  NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  as_dt,          NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           s_4c,
                  as_user,        v_sysdt,       NULL,            NULL);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-5(수입위약배상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_RENT_MASTER
         SET RENTHD_YN    = 'Y',
             RENTHD_SEQ   = v_nseq,
             HOUSECONTAMT = v_inamt,
             CHANGE_TAG   = '3',
             CHANGE_DATE  = as_dt,
             RETURN_DATE  = as_dt,
             RETURN_YN    = 'Y',
             R_GURTAMT    = v_receiptamt,
             R_RENTAMT    = i_rent,
             R_DELAYAMT   = i_delay,
             R_PENALTYAMT = i_penalty,
             R_ETCAMT1    = 0,
             R_ETCAMT2    = 0,
             R_ETCAMT3    = 0,
             RETURN_AMT   = v_inamt,
             R_BANK       = '',
             R_DEPOSIT    = '',
             R_DEPOSITOR  = '',
             SLIP_DATE    = as_dt,
             SLIP_SEQ     = v_WorkNo,
             CHG_DUTY_ID  = as_user,
             CHG_DATE     = v_sysdt
       WHERE CUST_CODE = as_cust
         AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_RENT_MASTER 09 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_JUNME;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_JUNME" (
   as_cust     IN VARCHAR2, --매도자
   as_seq      IN VARCHAR2, --매도자순번
   as_ncust    IN VARCHAR2, --매수자
   as_dt       IN VARCHAR2, --매수일
   as_viryn    IN VARCHAR2, --가상계좌사용여부
   as_vdeposit IN VARCHAR2, --가상계좌번호
   as_user     IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_nseq      NUMBER(5);
v_sysdt     VARCHAR2(14);
v_custnm    VARCHAR2(50);

v_vbank     VARCHAR(10);
v_vdeposit  VARCHAR(50);
v_bno       VARCHAR(10);
v_hno       VARCHAR(10);
                        
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   SELECT NVL(MAX(SEQ), 0) + 1, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
     INTO v_nseq,               v_sysdt
     FROM HD_RENT_MASTER
    WHERE CUST_CODE = as_ncust;

   SELECT CUST_NAME
     INTO v_custnm
     FROM VW_HD_CODE_CUSTOMER
    WHERE CUST_CODE = as_ncust;

   SELECT A.VIRBANK2_CODE, B.VDEPOSIT, B.BUILDNO, B.HOUSENO
     INTO v_vbank,         v_vdeposit, v_bno,     v_hno
     FROM HD_CODE_HOUSE A,
          HD_RENT_MASTER B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND B.CUST_CODE = as_cust
      AND B.SEQ       = TO_NUMBER(as_seq); 

   BEGIN
      INSERT INTO HD_RENT_MASTER
                 (CUST_CODE,         SEQ,           DEPT_CODE,     HOUSETAG,
                  BUILDNO,           HOUSENO,       CUST_NAME,     CONT_DATE,
                  CONT_NO,           CONT_TYPE,     VAT_YN,        GUARANTEE_AMT,
                  RENT_SUPPLY,       RENT_VAT,      RENT_INS,      RENT_SDATE,    RENT_EDATE,
                  REAL_CUST_NAME,    REAL_IN_DATE,  CHANGE_TAG,    CHANGE_DATE,
                  LAST_CHANGE_DATE,  RENT_CHG_SEQ,  TERM_CHG_SEQ,
                  INPUT_DUTY_ID,     INPUT_DATE,    CHG_DUTY_ID,   CHG_DATE,
                  RENTHD_YN,         RENTHD_SEQ,    DAYMONTH_TAG,  FIXRATE_TAG,
                  VIR_YN,            VDEPOSIT,      FIXRATE,       FIXRATE2,      FIXRATE_DAY,
                  HOPE_HOUSE_TAG,    RETURN_YN,     RETURN_DATE,   R_GURTAMT,     R_RENTAMT,
                  R_DELAYAMT,        R_PENALTYAMT,  R_ETCAMT1,     R_ETCAMT2,     R_ETCAMT3,
                  RETURN_AMT,        SLIP_DATE,     SLIP_SEQ,      HOUSECONTAMT )
           SELECT as_ncust,          v_nseq,        DEPT_CODE,     HOUSETAG,
                  BUILDNO,           HOUSENO,       v_custnm,      CONT_DATE,
                  CONT_NO,           CONT_TYPE,     VAT_YN,        GUARANTEE_AMT,
                  RENT_SUPPLY,       RENT_VAT,      RENT_INS,      RENT_SDATE,    RENT_EDATE,
                  v_custnm,          REAL_IN_DATE,  '1',           '29991231',
                  as_dt,             RENT_CHG_SEQ,  TERM_CHG_SEQ,
                  as_user,           v_sysdt,       '',            '',
                  RENTHD_YN,         RENTHD_SEQ,    DAYMONTH_TAG,  FIXRATE_TAG,
                  as_viryn,          as_vdeposit,   FIXRATE,       FIXRATE2,      FIXRATE_DAY,
                  '0',               'N',           '',            0,             0,
                  0,                 0,             0,             0,             0,
                  0,                 '',            0,             0
             FROM HD_RENT_MASTER
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#01 INSERT ERROR HD_RENT_MASTER' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE HD_RENT_MASTER
         SET CHANGE_TAG    = '2',
             CHANGE_DATE   = as_dt,
             RELA_CUSTCODE = as_ncust,
             RELA_SEQ      = v_nseq,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE CUST_CODE     = as_cust
         AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_MASTER' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_DETAIL_TERM
                 (CUST_CODE,     SEQ,          TERM_CHG_SEQ, APPLY_DATE,
                  RENT_SDATE,    RENT_EDATE,   VAT_YN,       GUARANTEE_AMT,
                  RENT_SUPPLY,   RENT_VAT,     RENT_INS,     AGREE_DD,     AGREE_MM_TAG,
                  REMARK,
                  CHANGECONTDT,
                  INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID,  CHG_DATE)
           SELECT as_ncust,      v_nseq,       TERM_CHG_SEQ, APPLY_DATE,
                  RENT_SDATE,    RENT_EDATE,   VAT_YN,       GUARANTEE_AMT,
                  RENT_SUPPLY,   RENT_VAT,     RENT_INS,     AGREE_DD,     AGREE_MM_TAG,
                  REMARK,
                  CHANGECONTDT,
                  as_user,       v_sysdt,      '',           ''
             FROM HD_RENT_DETAIL_TERM
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#03 INSERT ERROR HD_RENT_DETAIL_TERM' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_GURT_AGREE
                 (CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_AMT,   DISCNT_YN,    DELAY_YN,
                  PERPECT_TAG,   RECEIPT_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                  SLIP_DATE,     SLIP_SEQ)
           SELECT as_ncust,      v_nseq,      TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_AMT,   DISCNT_YN,    DELAY_YN,
                  PERPECT_TAG,   RECEIPT_AMT,
                  as_user,       v_sysdt,     '',           '',
                  SLIP_DATE,     SLIP_SEQ
             FROM HD_RENT_GURT_AGREE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#04 INSERT ERROR HD_RENT_GURT_AGREE' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_GURT_INCOME
                 (CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                  TIMES,         DEPT_CODE,   HOUSETAG,     IN_DATE,
                  IN_SEQ,        DEPOSIT_NO,  RECEIPT_DATE, RECEIPT_AMT,
                  DELAY_DAYS,    DELAY_AMT,   DISCNT_DAYS,  DISCNT_AMT,
                  REALINCOM_AMT, BANK_CODE,   BANK_NAME,    PAY_TAG,
                  INCOM_TYPE,    MOD_YN,      REAL_PAY_TAG, SLIP_DATE,
                  SLIP_SEQ,      TAX_DATE,    TAX_SEQ,      SLIP_TYPE,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                  REMARK,        VDEPOSIT_NO, OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK )
           SELECT as_ncust,      v_nseq,      TERM_CHG_SEQ, COUNTS,
                  TIMES,         DEPT_CODE,   HOUSETAG,     IN_DATE,
                  IN_SEQ,        DEPOSIT_NO,  RECEIPT_DATE, RECEIPT_AMT,
                  DELAY_DAYS,    DELAY_AMT,   DISCNT_DAYS,  DISCNT_AMT,
                  REALINCOM_AMT, BANK_CODE,   BANK_NAME,    PAY_TAG,
                  INCOM_TYPE,    MOD_YN,      REAL_PAY_TAG, SLIP_DATE,
                  SLIP_SEQ,      TAX_DATE,    TAX_SEQ,      SLIP_TYPE,
                  as_user,       v_sysdt,     '',           '',
                  REMARK,        VDEPOSIT_NO, OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK
             FROM HD_RENT_GURT_INCOME
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#05 INSERT ERROR HD_RENT_GURT_INCOME' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
/*
   BEGIN
      INSERT INTO HD_RENT_GURT_INCOME_DAILY
                 (DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK )
           SELECT DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  as_ncust,      v_nseq,        DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  as_user,       v_sysdt,       '',           '',
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK
             FROM HD_RENT_GURT_INCOME_DAILY
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#06 INSERT ERROR HD_RENT_GURT_INCOME_DAILY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/
   BEGIN
      INSERT INTO HD_RENT_RENT_AGREE
                 (CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_SDATE, AGREE_EDATE,  AGREE_DAYS,
                  RENT_AMT,      VAT_YN,      RENT_SUPPLY,  RENT_VAT,   RENT_INS,
                  PERPECT_TAG,   RECEIPT_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                  SLIP_DATE,     SLIP_SEQ)
           SELECT as_ncust,      v_nseq,      TERM_CHG_SEQ, COUNTS,
                  AGREE_DATE,    AGREE_SDATE, AGREE_EDATE,  AGREE_DAYS,
                  RENT_AMT,      VAT_YN,      RENT_SUPPLY,  RENT_VAT,   RENT_INS,
                  PERPECT_TAG,   RECEIPT_AMT,
                  as_user,       v_sysdt,     '',           '',
                  SLIP_DATE,     SLIP_SEQ
             FROM HD_RENT_RENT_AGREE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#07 INSERT ERROR HD_RENT_RENT_AGREE' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_RENT_INCOME
                 (CUST_CODE,      SEQ,              TERM_CHG_SEQ,  COUNTS,
                  TIMES,          DEPT_CODE,        HOUSETAG,      IN_DATE,
                  IN_SEQ,         DEPOSIT_NO,       RECEIPT_DATE,
                  RECEIPT_AMT,    RECEIPT_SUPPLY,   RECEIPT_VAT,   RECEIPT_INS,
                  DELAY_DAYS,     DELAY_AMT,        DISCNT_DAYS,   DISCNT_AMT,
                  REALINCOM_AMT,  REALINCOM_SUPPLY, REALINCOM_VAT, REALINCOM_INS,
                  BANK_CODE,
                  BANK_NAME,      PAY_TAG,          INCOM_TYPE,    MOD_YN,
                  REAL_PAY_TAG,   SLIP_DATE,        SLIP_SEQ,      TAX_DATE,
                  TAX_SEQ,        SLIP_TYPE,
                  INPUT_DUTY_ID,  INPUT_DATE,       CHG_DUTY_ID,   CHG_DATE,
                  REMARK,         VDEPOSIT_NO,      OUT_DT,        OUT_TM,
                  OUT_SEQ,        OUT_BANK,         OUT_CUSTNO )
           SELECT as_ncust,       v_nseq,           TERM_CHG_SEQ,  COUNTS,
                  TIMES,          DEPT_CODE,        HOUSETAG,      IN_DATE,
                  IN_SEQ,         DEPOSIT_NO,       RECEIPT_DATE,
                  RECEIPT_AMT,    RECEIPT_SUPPLY,   RECEIPT_VAT,   RECEIPT_INS,
                  DELAY_DAYS,     DELAY_AMT,        DISCNT_DAYS,   DISCNT_AMT,
                  REALINCOM_AMT,  REALINCOM_SUPPLY, REALINCOM_VAT, REALINCOM_INS,
                  BANK_CODE,
                  BANK_NAME,      PAY_TAG,          INCOM_TYPE,    MOD_YN,
                  REAL_PAY_TAG,   SLIP_DATE,        SLIP_SEQ,      TAX_DATE,
                  TAX_SEQ,        SLIP_TYPE,
                  as_user,        v_sysdt,          '',            '',
                  REMARK,         VDEPOSIT_NO,      OUT_DT,        OUT_TM,
                  OUT_SEQ,        OUT_BANK,         OUT_CUSTNO
             FROM HD_RENT_RENT_INCOME
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#08 INSERT ERROR HD_RENT_RENT_INCOME' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
/*
   BEGIN
      INSERT INTO HD_RENT_RENT_INCOME_DAILY
                 (DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK,      OUT_CUSTNO )
           SELECT DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                  as_ncust,      v_nseq,        DEPOSIT_NO,   IN_AMT,
                  IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                  MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                  as_user,       v_sysdt,       '',           '',
                  REMARK,        VDEPOSIT_NO,   OUT_DT,       OUT_TM,
                  OUT_SEQ,       OUT_BANK,      OUT_CUSTNO
             FROM HD_RENT_RENT_INCOME_DAILY
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#09 INSERT ERROR HD_RENT_RENT_INCOME_DAILY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/
   BEGIN
      INSERT INTO HD_RENT_DETAIL_RENT
                 (CUST_CODE,     SEQ,        RENT_CHG_SEQ, APPLY_YYMM,
                  RENT_SUPPLY,   RENT_VAT,   RENT_INS,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE)
           SELECT as_ncust,      v_nseq,     RENT_CHG_SEQ, APPLY_YYMM,
                  RENT_SUPPLY,   RENT_VAT,   RENT_INS,
                  as_user,       v_sysdt,    '',           ''
             FROM HD_RENT_DETAIL_RENT
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#10 INSERT ERROR HD_RENT_DETAIL_RENT' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

/*
   BEGIN
      INSERT INTO HD_RENT_DONGHO
                 (CUST_CODE,     SEQ,        CONT_SEQ,    DEPT_CODE,
                  HOUSETAG,      BUILDNO,    HOUSENO,     REPRESENT_YN,
                  REMARK,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,     CONT_SEQ,    DEPT_CODE,
                  HOUSETAG,      BUILDNO,    HOUSENO,     REPRESENT_YN,
                  REMARK,
                  as_user,       v_sysdt,    '',           ''
             FROM HD_RENT_DONGHO
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#11 INSERT ERROR HD_RENT_DONGHO' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/

   BEGIN
      INSERT INTO HD_RENT_RATE_DELAY
                 (CUST_CODE,     SEQ,        RATE_TAG,    START_DAYS,
                  END_DAYS,      STARTDATE,  ENDDATE,     DELAYRATE,
                  DELAYCUT,      DELAYUNIT,  START_TAG,   END_TAG,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,     RATE_TAG,    START_DAYS,
                  END_DAYS,      STARTDATE,  ENDDATE,     DELAYRATE,
                  DELAYCUT,      DELAYUNIT,  START_TAG,   END_TAG,
                  as_user,       v_sysdt,    '',           ''
             FROM HD_RENT_RATE_DELAY
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#12 INSERT ERROR HD_RENT_RATE_DELAY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_RATE_DISCOUNT
                 (CUST_CODE,     SEQ,        RATE_TAG,    STARTDATE,
                  ENDDATE,       DISCNTRATE, DISCNTCUT,   DISCNTUNIT,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,     RATE_TAG,    STARTDATE,
                  ENDDATE,       DISCNTRATE, DISCNTCUT,   DISCNTUNIT,
                  as_user,       v_sysdt,    '',           ''
             FROM HD_RENT_RATE_DISCOUNT
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#13 INSERT ERROR HD_RENT_RATE_DISCOUNT' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

/*
   BEGIN
      INSERT INTO HD_RENT_ETC
                 (CUST_CODE,     SEQ,           ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID, CHG_DATE)
           SELECT as_ncust,      v_nseq,        ETC_SEQ,     UNIQUE_DIV,
                  EFFECT_NO,     DELIVERY_DATE, CREDITOR,    BOND_AMT,
                  CANCEL_YN,     CANCEL_DATE,   CANCEL_DESC, REMARK,
                  as_user,       v_sysdt,       '',          ''
             FROM HD_RENT_ETC
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#14 INSERT ERROR HD_RENT_ETC' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;
*/

   BEGIN
      INSERT INTO HD_LEASE_BONDSEIZURE
                 (CUST_CODE,     SEQ,             RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID,   CHG_DATE)
           SELECT as_ncust,      v_nseq,          RENT_YN,       BONDSEQ,
                  SEIZURE_NO,    SEIZOR,          SEIZUREAMT,    REMARK,
                  SEIZURE_NAME,  COURT,           DEBT,          DEBT3,
                  REQUEST_BOND,  REQUEST_CONTENT, DECISION_DATE, RECEIPT_DATE,
                  CANCEL_YN,     CANCEL_DATE,     SEIZURE_CODE,  DEBT_CODE,
                  DEBT3_CODE,    DEBT_RELATION,
                  as_user,       v_sysdt,         '',            ''
             FROM HD_LEASE_BONDSEIZURE
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq)
              AND RENT_YN       = 'Y';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#14 INSERT ERROR HD_LEASE_BONDSEIZURE' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      INSERT INTO HD_RENT_REMARK
                 (CUST_CODE,     SEQ,           REMARK_SEQ,   REMARK_DATE,
                  REMARK,        USER_ID,       CONFIRM_DATE, END_YN,
                  INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE)
           SELECT as_ncust,      v_nseq,        REMARK_SEQ,   REMARK_DATE,
                  REMARK,        USER_ID,       CONFIRM_DATE, END_YN,
                  as_user,       v_sysdt,       '',           ''
             FROM HD_RENT_REMARK
            WHERE CUST_CODE     = as_cust
              AND SEQ           = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#15 INSERT ERROR HD_RENT_REMARK' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_VIRTURE_DEPOSIT
         SET USE_YN        = 'Y',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE COMPANY_CODE  = '100'
         AND BANK_CODE     = v_vbank
         AND VIR_DEPOSITNO = v_vdeposit;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#16 UPDATE ERROR SM_TRANS_VIRTURE_DEPOSIT' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_VIRTURE_DEPOSIT
         SET USE_YN        = 'N',
             MAKE_SEQ      = v_bno || v_hno,
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE COMPANY_CODE  = '100'
         AND BANK_CODE     = v_vbank
         AND VIR_DEPOSITNO = as_vdeposit;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#17 UPDATE ERROR SM_TRANS_VIRTURE_DEPOSIT' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_MAKEGIRO;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_MAKEGIRO" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_ym   IN VARCHAR2, --생성월
   as_mdt  IN VARCHAR2, --기준일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);

v_jamt         NUMBER(15);
v_ramt         NUMBER(15);
v_amt          NUMBER(15);

v_deposit      VARCHAR2(100);
v_custno       VARCHAR2(20);
v_bno          VARCHAR2(4);
v_hno          VARCHAR2(4);
v_htagcd       VARCHAR2(2);

v_gironok      VARCHAR2(10);
v_custnok      VARCHAR2(20);
v_amtnok       VARCHAR2(15);

v_tmpamt       NUMBER(15);
v_tmpdt        VARCHAR2(8);
v_term         NUMBER(5);
v_counts       VARCHAR2(2);
v_jym1         VARCHAR2(8);
v_jym2         VARCHAR2(8);
v_jym3         VARCHAR2(8);
v_jymamt1      NUMBER(15);
v_jymamt2      NUMBER(15);
v_jymamt3      NUMBER(15);

/*---------------------------------------------------------------------------*/
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_adt          VARCHAR2(8);
c_sdt          VARCHAR2(8);
c_edt          VARCHAR2(8);
c_cseq         NUMBER(5);
c_count        VARCHAR2(2);
c_viryn        VARCHAR2(1);
c_deposit      VARCHAR2(100);
c_jdamt        NUMBER(15);
c_dsamt        NUMBER(15);
c_vsamt        NUMBER(15);
c_isamt        NUMBER(15);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_ym IN VARCHAR2, a_mdt IN VARCHAR2) IS
SELECT A.CUST_CODE,    A.SEQ,         A.BNO,     A.HNO,
       A.AGREE_DATE,   A.AGREE_SDATE, A.AGREE_EDATE,
       A.TERM_CHG_SEQ, A.COUNTS,      A.VIRYN,       A.DEPOSIT_NO,
       F_HD_GET_RENT_RENT_DELAYALL(A.CUST_CODE, TO_CHAR(A.SEQ), a_mdt) AS J_DAMT,
       A.RENT_SUPPLY - NVL(SUM(B.RECEIPT_SUPPLY), 0) AS D_SAMT,
       A.RENT_VAT    - NVL(SUM(B.RECEIPT_VAT), 0)    AS D_VAMT,
       A.RENT_INS    - NVL(SUM(B.RECEIPT_INS), 0)    AS D_IAMT
  FROM (SELECT A.CUST_CODE,  A.SEQ,         TRIM(A.BUILDNO) AS BNO, TRIM(A.HOUSENO) AS HNO,
               CASE WHEN C.VIRDEPOSIT2_YN = 'Y' AND A.VIR_YN = 'Y' THEN 'Y' ELSE 'N' END AS VIRYN,
               CASE WHEN C.VIRDEPOSIT2_YN = 'Y' AND A.VIR_YN = 'Y' THEN A.VDEPOSIT ELSE 'X' END AS DEPOSIT_NO,
               B.AGREE_DATE, B.AGREE_SDATE, B.AGREE_EDATE,   B.RENT_SUPPLY,
               B.RENT_VAT,   B.RENT_INS,    B.TERM_CHG_SEQ,  B.COUNTS
          FROM HD_RENT_MASTER A,
               HD_RENT_RENT_AGREE B,
               HD_CODE_HOUSE C
         WHERE A.DEPT_CODE  = a_dept
           AND A.HOUSETAG   = a_htag
           AND A.CHANGE_TAG = '1'
           AND A.CONT_TYPE  = '2'
           AND A.CUST_CODE  = B.CUST_CODE
           AND A.SEQ        = B.SEQ
           AND SUBSTR(B.AGREE_SDATE, 1, 6) = a_ym
           AND A.DEPT_CODE  = C.DEPT_CODE
           AND A.HOUSETAG   = C.HOUSETAG
       ) A,
       HD_RENT_RENT_INCOME B
 WHERE A.CUST_CODE    = B.CUST_CODE    (+)
   AND A.SEQ          = B.SEQ          (+)
   AND A.TERM_CHG_SEQ = B.TERM_CHG_SEQ (+)
   AND A.COUNTS       = B.COUNTS       (+)
 GROUP BY A.CUST_CODE,    A.SEQ,         A.BNO,         A.HNO,
          A.AGREE_DATE,   A.AGREE_SDATE, A.AGREE_EDATE,
          A.RENT_SUPPLY,  A.RENT_VAT,    A.RENT_INS,
          A.TERM_CHG_SEQ, A.COUNTS,      A.VIRYN,       A.DEPOSIT_NO
 ORDER BY A.CUST_CODE,    A.SEQ,         A.BNO,         A.HNO;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt   := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_gironok := '6503381';
   v_htagcd  := '00';  -- 이놈이 현장마다 다른 현장구분?

   SELECT NVL(MIN(DEPOSIT_NO), 'X')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT
    WHERE DEPT_CODE  = as_dept
      AND HOUSETAG   = as_htag
      AND RECEIPTTAG = '9';

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_ym, as_mdt);
   LOOP
      FETCH CURMAKE 
       INTO c_cust,  c_seq,   c_bno,   c_hno,
            c_adt,   c_sdt,   c_edt,
            c_cseq,  c_count, c_viryn, c_deposit,
            c_jdamt, c_dsamt, c_vsamt, c_isamt;
      EXIT WHEN CURMAKE%NOTFOUND;

      /*.....................................................................*/
      v_jamt := 0;
      SELECT NVL(SUM(A.RENT_AMT), 0) - NVL(SUM(A.RECEIPT_AMT), 0)
        INTO v_jamt
        FROM HD_RENT_RENT_AGREE A,
             HD_RENT_RENT_INCOME B
       WHERE A.CUST_CODE = c_cust
         AND A.SEQ       = c_seq
         AND ((A.TERM_CHG_SEQ < c_cseq) OR
              (A.TERM_CHG_SEQ = c_cseq AND A.COUNTS < c_count))
         AND A.CUST_CODE = B.CUST_CODE       (+)
         AND A.SEQ       = B.SEQ             (+)
         AND A.TERM_CHG_SEQ = B.TERM_CHG_SEQ (+)
         AND A.COUNTS       = B.COUNTS       (+);

      /*.....................................................................*/
      SELECT NVL(MAX(AGREE_DATE), 'X')
        INTO v_tmpdt
        FROM HD_RENT_RENT_AGREE
       WHERE CUST_CODE  = c_cust
         AND SEQ        = c_seq
         AND AGREE_DATE < c_adt;
      IF v_tmpdt = 'X' THEN
         v_jym1 := 'X';
         v_jymamt1 := 0;
      ELSE
         v_jym1 := v_tmpdt;
         SELECT TERM_CHG_SEQ, COUNTS
           INTO v_term,       v_counts
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE  = c_cust
            AND SEQ        = c_seq
            AND AGREE_DATE = v_tmpdt;

         SELECT NVL(SUM(A.RENT_AMT), 0) - NVL(SUM(A.RECEIPT_AMT), 0)
           INTO v_jymamt1
           FROM HD_RENT_RENT_AGREE A,
                HD_RENT_RENT_INCOME B
          WHERE A.CUST_CODE    = c_cust
            AND A.SEQ          = c_seq
            AND A.TERM_CHG_SEQ = v_term
            AND A.COUNTS       = v_counts
            AND A.CUST_CODE    = B.CUST_CODE    (+)
            AND A.SEQ          = B.SEQ          (+)
            AND A.TERM_CHG_SEQ = B.TERM_CHG_SEQ (+)
            AND A.COUNTS       = B.COUNTS       (+);
         IF v_jymamt1 > 0 THEN
            v_jymamt1 := v_jymamt1 + F_HD_GET_RENT_RENT_DELAY(c_cust, TO_CHAR(c_seq), TO_CHAR(v_term), v_counts, as_mdt);
         END IF;
      END IF;

      /*.....................................................................*/
      IF v_jym1 = 'X' THEN
         v_jym2 := 'X';
         v_jymamt2 := 0;
      ELSE
         SELECT NVL(MAX(AGREE_DATE), 'X')
           INTO v_tmpdt
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE  = c_cust
            AND SEQ        = c_seq
            AND AGREE_DATE < v_jym1;
         IF v_tmpdt = 'X' THEN
            v_jym2 := 'X';
            v_jymamt2 := 0;
         ELSE
            v_jym2 := v_tmpdt;
            SELECT TERM_CHG_SEQ, COUNTS
              INTO v_term,       v_counts
              FROM HD_RENT_RENT_AGREE
             WHERE CUST_CODE  = c_cust
               AND SEQ        = c_seq
               AND AGREE_DATE = v_tmpdt;

            SELECT NVL(SUM(A.RENT_AMT), 0) - NVL(SUM(A.RECEIPT_AMT), 0)
              INTO v_jymamt2
              FROM HD_RENT_RENT_AGREE A,
                   HD_RENT_RENT_INCOME B
             WHERE A.CUST_CODE    = c_cust
               AND A.SEQ          = c_seq
               AND A.TERM_CHG_SEQ = v_term
               AND A.COUNTS       = v_counts
               AND A.CUST_CODE    = B.CUST_CODE    (+)
               AND A.SEQ          = B.SEQ          (+)
               AND A.TERM_CHG_SEQ = B.TERM_CHG_SEQ (+)
               AND A.COUNTS       = B.COUNTS       (+);
            IF v_jymamt2 > 0 THEN
               v_jymamt2 := v_jymamt2 + F_HD_GET_RENT_RENT_DELAY(c_cust, TO_CHAR(c_seq), TO_CHAR(v_term), v_counts, as_mdt);
            END IF;
         END IF;
      END IF;

      /*.....................................................................*/
      IF v_jym2 = 'X' THEN
         v_jym3 := 'X';
         v_jymamt3 := 0;
      ELSE
         SELECT NVL(MAX(AGREE_DATE), 'X')
           INTO v_tmpdt
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE  = c_cust
            AND SEQ        = c_seq
            AND AGREE_DATE < v_jym2;
         IF v_tmpdt = 'X' THEN
            v_jym3 := 'X';
            v_jymamt3 := 0;
         ELSE
            v_jym3 := v_tmpdt;
            SELECT TERM_CHG_SEQ, COUNTS
              INTO v_term,       v_counts
              FROM HD_RENT_RENT_AGREE
             WHERE CUST_CODE  = c_cust
               AND SEQ        = c_seq
               AND AGREE_DATE = v_tmpdt;

            SELECT NVL(SUM(A.RENT_AMT), 0) - NVL(SUM(A.RECEIPT_AMT), 0)
              INTO v_jymamt3
              FROM HD_RENT_RENT_AGREE A,
                   HD_RENT_RENT_INCOME B
             WHERE A.CUST_CODE    = c_cust
               AND A.SEQ          = c_seq
               AND ((A.TERM_CHG_SEQ < v_term) OR
                    (A.TERM_CHG_SEQ = v_term AND A.COUNTS < v_counts))
               AND A.CUST_CODE    = B.CUST_CODE    (+)
               AND A.SEQ          = B.SEQ          (+)
               AND A.TERM_CHG_SEQ = B.TERM_CHG_SEQ (+)
               AND A.COUNTS       = B.COUNTS       (+);
            IF v_jymamt3 > 0 THEN
               SELECT NVL(SUM(F_HD_GET_RENT_RENT_DELAY(c_cust, TO_CHAR(c_seq), TO_CHAR(TERM_CHG_SEQ), COUNTS, as_mdt)), 0)
                 INTO v_tmpamt
                 FROM HD_RENT_RENT_AGREE
                WHERE CUST_CODE    = c_cust
                  AND SEQ          = c_seq
                  AND ((TERM_CHG_SEQ < v_term) OR
                       (TERM_CHG_SEQ = v_term AND COUNTS < v_counts));
               v_jymamt3 := v_jymamt3 + v_tmpamt;
            END IF;
         END IF;
      END IF;

      /*.....................................................................*/
      IF v_jym1 = 'X' THEN
         v_jym1 := '';
      ELSE
         v_jym1 := SUBSTR(v_jym1, 1, 6);
      END IF;

      IF v_jym2 = 'X' THEN
         v_jym2 := '';
      ELSE
         v_jym2 := SUBSTR(v_jym2, 1, 6);
      END IF;

      IF v_jym3 = 'X' THEN
         v_jym3 := '';
      ELSE
         v_jym3 := SUBSTR(v_jym3, 1, 6);
      END IF;

      /*.....................................................................*/
      IF c_viryn = 'N' THEN
         IF v_deposit = 'X' THEN
            RAISE_APPLICATION_ERROR(-20002, '해당현장에 임대료 납입 계좌정보가 없습니다.');
            ROLLBACK;
            RETURN;
         END IF;
         c_deposit := v_deposit;
      END IF;

      /*.....................................................................*/
      v_bno := CASE LENGTH(c_bno)
                    WHEN 4 THEN c_bno
                    WHEN 3 THEN '0' || c_bno
                    WHEN 2 THEN '00' || c_bno
                    WHEN 1 THEN '000' || c_bno
                    ELSE 'X'
               END;
      v_hno := CASE LENGTH(c_hno)
                    WHEN 4 THEN c_hno
                    WHEN 3 THEN '0' || c_hno
                    WHEN 2 THEN '00' || c_hno
                    WHEN 1 THEN '000' || c_hno
                    ELSE 'X'
               END;
      IF v_bno = 'X' OR v_hno = 'X' THEN
         RAISE_APPLICATION_ERROR(-20002, '해당현장에는 동호자릿수가 4를 넘는 동호가 있습니다');
         ROLLBACK;
         RETURN;
      END IF;

      v_custno  := as_ym || v_htagcd || v_bno || v_hno;
      v_custnok := v_custno || F_HD_GET_CHKDGT(TRIM(v_custno), '1');

      /*.....................................................................*/
      v_ramt   := c_dsamt + c_vsamt + c_isamt;
      v_amt    := c_dsamt + c_vsamt + c_isamt + v_jamt + c_jdamt;
      v_amtnok := TRIM(TO_CHAR(v_amt)) || F_HD_GET_CHKDGT(TRIM(TO_CHAR(v_amt)), '2');

      /*.....................................................................*/
      BEGIN
         DELETE HD_RENT_GIRO
          WHERE CUST_CODE = c_cust
            AND SEQ       = c_seq
            AND GIRO_TAG  = '2'
            AND BILL_YM   = as_ym;
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'DELETE HD_RENT_GIRO ER_01: ' || sqlerrm);
            ROLLBACK;
            RETURN;
      END;

      /*.....................................................................*/
      BEGIN
         INSERT INTO HD_RENT_GIRO
                   ( CUST_CODE,     SEQ,        GIRO_TAG,    BILL_YM,
                     END_DATE,      MAKE_DATE,  J_AMT,       J_DAMT,
                     D_AMT,         D_SAMT,     D_VAMT,      D_IAMT,
                     AMT,           GIRO_NO,    CUST_NO,     AMT_NO,
                     DEPOSIT_NO,    DEPOSIT_TAG,
                     JYM1,          JYMAMT1,    JYM2,        JYMAMT2,
                     JYM3,          JYMAMT3,    PRINT_YN,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
            VALUES ( c_cust,        c_seq,      '2',         as_ym,
                     c_adt,         as_mdt,     v_jamt,      c_jdamt,
                     v_ramt,        c_dsamt,    c_vsamt,     c_isamt,
                     v_amt,         v_gironok,  v_custnok,   v_amtnok,
                     c_deposit,     c_viryn,
                     v_jym1,        v_jymamt1,  v_jym2,      v_jymamt2,
                     v_jym3,        v_jymamt3,  'N',
                     as_user,       v_sysdt,    '',          '' );
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_GIRO ER_02: ' || sqlerrm);
            ROLLBACK;
            RETURN;
      END;

   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_MANAGEMENT_CONV;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_MANAGEMENT_CONV" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt          VARCHAR2(14);
v_cnt            NUMBER(5);

/*---------------------------------------------------------------------------*/
s_seq            NUMBER(5);
s_bno            VARCHAR2(10);
s_hno            VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   /*------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_RENT_MANAGEMENT
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND EXISTS (SELECT 1
                       FROM HD_RENT_MANAGEMENT_CONV A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.YM        = HD_RENT_MANAGEMENT.YM
                    );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'DELETE HD_RENT_MANAGEMENT #01#' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO HD_RENT_MANAGEMENT
                ( DEPT_CODE,     HOUSETAG,   YM,
                  BUILDNO,       HOUSENO,    AMT,         REMARK,
                  INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
           SELECT DEPT_CODE,     HOUSETAG,   YM,
                  BUILDNO,       HOUSENO,    AMT,         REMARK,
                  as_user,       v_sysdt,    '',          ''
             FROM HD_RENT_MANAGEMENT_CONV
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag;
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_MANAGEMENT #02#' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_RENT_AGREE;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_RENT_AGREE" (
   as_dept    IN VARCHAR2, --해당현장
   as_htag    IN VARCHAR2, --해당분양구분
   as_ymd     IN VARCHAR2, --생성일
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt     VARCHAR2(14);
v_cnt       NUMBER(5);
v_temp      VARCHAR2(8);
v_mday      NUMBER(3);

v_mmtag     VARCHAR2(1);
v_dd        VARCHAR2(2);

v_C_samt    NUMBER(15); --임대기간 공급가
v_C_vamt    NUMBER(15); --임대기간 부가세
v_C_iamt    NUMBER(15); --임대기간 보증보험

v_S_samt    NUMBER(15); --임대료부과 공급가
v_S_vamt    NUMBER(15); --임대료부과 부가세
v_S_iamt    NUMBER(15); --임대료부과 보증보험

v_A_term    NUMBER(3);
v_A_cnt     VARCHAR2(2);
v_A_dt      VARCHAR2(8);
v_A_sdt     VARCHAR2(8);
v_A_edt     VARCHAR2(8);
v_A_day     NUMBER(3);
v_A_amt     NUMBER(15);
v_A_samt    NUMBER(15);
v_A_vamt    NUMBER(15);
v_A_iamt    NUMBER(15);
v_A_vatyn   VARCHAR2(1);

/*---------------------------------------------------------------------------*/
c_cust      VARCHAR2(20);
c_seq       NUMBER(5);
c_sdt       VARCHAR2(8);
c_edt       VARCHAR2(8);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_ymd IN VARCHAR2) IS
SELECT A.CUST_CODE,
       A.SEQ,
       A.RENT_SDATE,
       NVL(MAX(B.AGREE_EDATE), 'X')
  FROM HD_RENT_MASTER A,
       HD_RENT_RENT_AGREE B
 WHERE A.DEPT_CODE  = a_dept
   AND A.HOUSETAG   = a_htag
   AND A.CHANGE_TAG = '1'
   AND A.CONT_TYPE  = '2'
   AND a_ymd BETWEEN A.RENT_SDATE AND A.RENT_EDATE
   AND A.CUST_CODE  = B.CUST_CODE (+)
   AND A.SEQ        = B.SEQ       (+)
   AND NOT EXISTS (SELECT 1
                     FROM HD_RENT_RENT_AGREE B
                    WHERE B.CUST_CODE = A.CUST_CODE
                      AND B.SEQ       = A.SEQ
                      AND a_ymd BETWEEN B.AGREE_SDATE AND B.AGREE_EDATE
                  )
 GROUP BY A.CUST_CODE, A.SEQ, A.RENT_SDATE;

/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_ymd);
   LOOP
      FETCH CURMAKE 
       INTO c_cust,  c_seq,  c_sdt,  c_edt;
      EXIT WHEN CURMAKE%NOTFOUND;

      LOOP
         /* 약정기간 산정 ------------------------------ */
         SELECT NVL(MAX(AGREE_EDATE), 'X')
           INTO v_A_sdt
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE = c_cust
            AND SEQ       = c_seq; 

         IF v_A_sdt = 'X' THEN
            v_A_sdt := c_sdt;
         ELSIF v_A_sdt >= as_ymd THEN
            EXIT;
         ELSE
            v_A_sdt := TO_CHAR(TO_DATE(v_A_sdt, 'YYYYMMDD') + 1, 'YYYYMMDD');
         END IF;

         v_A_edt := TO_CHAR(LAST_DAY(TO_DATE(v_A_sdt, 'YYYYMMDD')), 'YYYYMMDD');
         v_A_day := TO_DATE(v_A_edt, 'YYYYMMDD') - TO_DATE(v_A_sdt, 'YYYYMMDD') + 1; 
         v_mday := LAST_DAY(TO_DATE(SUBSTR(v_A_sdt, 1, 6) || '01', 'YYYYMMDD')) - TO_DATE(SUBSTR(v_A_sdt, 1, 6) || '01', 'YYYYMMDD') + 1;

         /* 약정일자 산정 ------------------------------ */
         SELECT A.TERM_CHG_SEQ, A.AGREE_MM_TAG, NVL(A.AGREE_DD, '25'), A.RENT_SUPPLY, A.RENT_VAT, A.RENT_INS
           INTO v_A_term,       v_mmtag,        v_dd,                  v_C_samt,      v_C_vamt,   v_C_iamt
           FROM HD_RENT_DETAIL_TERM A
          WHERE A.CUST_CODE    = c_cust
            AND A.SEQ          = c_seq
            AND A.TERM_CHG_SEQ = (SELECT MAX(B.TERM_CHG_SEQ)
                                    FROM HD_RENT_DETAIL_TERM B
                                   WHERE B.CUST_CODE   = A.CUST_CODE
                                     AND B.SEQ         = A.SEQ
                                     AND B.RENT_SDATE <= v_A_sdt
                                 )
            AND v_A_sdt BETWEEN RENT_SDATE AND RENT_EDATE;

         SELECT TO_NUMBER(NVL(MAX(COUNTS), '00')) + 1
           INTO v_cnt
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE    = c_cust
            AND SEQ          = c_seq
            AND TERM_CHG_SEQ = v_A_term;
         IF v_cnt < 10 THEN
            v_A_cnt := TRIM('0' || TRIM(TO_CHAR(v_cnt)));
         ELSE
            v_A_cnt := TRIM(TO_CHAR(v_cnt));
         END IF;

         v_A_dt := CASE v_mmtag
                        WHEN '1' THEN
                             SUBSTR(v_A_sdt, 1, 6) || v_dd
                        WHEN '2' THEN
                             SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(v_A_sdt, 1, 6) || '01', 'YYYYMMDD'), 1), 'YYYYMMDD'), 1, 6) || v_dd
                        WHEN '3' THEN
                             TO_CHAR(LAST_DAY(TO_DATE(v_A_sdt, 'YYYYMMDD')), 'YYYYMMDD')
                        ELSE
                             TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(SUBSTR(v_A_sdt, 1, 6) || '01', 'YYYYMMDD'), 1)), 'YYYYMMDD')
                   END;
         v_temp := TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(v_A_dt, 1, 6) || '01', 'YYYYMMDD')), 'YYYYMMDD');
         IF v_A_dt > v_temp THEN
            v_A_dt := v_temp;
         END IF;

         /* 임대료 산정 -------------------------------- */
         SELECT NVL(MAX(APPLY_YYMM), 'X')
           INTO v_temp
           FROM HD_RENT_DETAIL_RENT
          WHERE CUST_CODE   = c_cust
            AND SEQ         = c_seq
            AND APPLY_YYMM <= as_ymd;

         IF v_temp = 'X' THEN
            /* 임대료부과가 없는 경우 임대기간자료를 근거로 생성 */
            BEGIN
               INSERT INTO HD_RENT_DETAIL_RENT
                         ( CUST_CODE,     SEQ,         RENT_CHG_SEQ,
                           APPLY_YYMM,    RENT_SUPPLY, RENT_VAT,     RENT_INS,
                           INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE )
                  VALUES ( c_cust,        c_seq,       v_A_term,
                           v_A_sdt,       v_C_samt,    v_C_vamt,     v_C_iamt,
                           as_user,       v_sysdt,     '',           '' );
               EXCEPTION
                  WHEN OTHERS THEN
                       dbms_output.put_line(sqlerrm); 
                       RAISE_APPLICATION_ERROR(-20002, '#01 INSERT ERROR HD_RENT_DETAIL_RENT' || sqlerrm);
--                       RAISE_APPLICATION_ERROR(-20002, c_cust || '-' || c_seq || '-' || v_A_term || '-' || v_A_sdt);
                       ROLLBACK;
                       RETURN;
            END;

            v_A_samt := TRUNC((v_A_day / v_mday) * v_C_samt);
            v_A_vamt := TRUNC((v_A_day / v_mday) * v_C_vamt);
            v_A_iamt := TRUNC((v_A_day / v_mday) * v_C_iamt);
         ELSE
            SELECT F_HD_GET_RENTAMT(c_cust, TO_CHAR(c_seq), v_A_sdt, v_A_edt, '1', TO_CHAR(v_mday)),
                   F_HD_GET_RENTAMT(c_cust, TO_CHAR(c_seq), v_A_sdt, v_A_edt, '2', TO_CHAR(v_mday)),
                   F_HD_GET_RENTAMT(c_cust, TO_CHAR(c_seq), v_A_sdt, v_A_edt, '3', TO_CHAR(v_mday))
              INTO v_A_samt, v_A_vamt, v_A_iamt
              FROM DUAL;
         END IF;

         v_A_amt  := v_A_samt + v_A_vamt + v_A_iamt;

         IF v_A_vamt > 0 THEN
            v_A_vatyn := 'Y';
         ELSE
            v_A_vatyn := 'N';
         END IF;

         /* ............................................ */
         BEGIN
            INSERT INTO HD_RENT_RENT_AGREE
                      ( CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                        AGREE_DATE,    AGREE_SDATE, AGREE_EDATE,  AGREE_DAYS,
                        RENT_AMT,      VAT_YN,      RENT_SUPPLY,  RENT_VAT,
                        RENT_INS,      PERPECT_TAG, RECEIPT_AMT,
                        INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                        SLIP_DATE,     SLIP_SEQ )
               VALUES ( c_cust,        c_seq,       v_A_term,     v_A_cnt,
                        v_A_dt,        v_A_sdt,     v_A_edt,      v_A_day,
                        v_A_amt,       v_A_vatyn,   v_A_samt,     v_A_vamt,
                        v_A_iamt,      'N',         0,
                        as_user,       v_sysdt,     '',           '',
                        '',            0 );
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 INSERT ERROR HD_RENT_RENT_AGREE' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;
      END LOOP;
   END LOOP;
   CLOSE CURMAKE;

/*---------------------------------------------------------------------------*/
   COMMIT WORK;

/*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_RENT_INCOME;

CREATE OR REPLACE PROCEDURE PROC_HD_RENT_RENT_INCOME (
  as_cust           IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_dt             IN VARCHAR2,   -- 입금일
  ai_inseq          IN INTEGER     -- 입금순번
) IS

-------------------------------------------------------------
-------------------------------------------------------------
CURSOR DETAIL_CUR (a_dt VARCHAR2, a_mon INTEGER) IS
   SELECT DELAYRATE, DELAYCUT, DELAYUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DELAY
    WHERE CUST_CODE   = as_cust
      AND SEQ         = ai_seq
      AND ENDDATE    >= a_dt
      AND STARTDATE  <= as_dt
      AND RATE_TAG    = '3' /*보증금2 임대료3*/
      AND ((END_TAG   = '1' AND END_DAYS   >= a_mon) OR
           (END_TAG   = '2' AND END_DAYS    > a_mon))
      AND ((START_TAG = '1' AND START_DAYS <= a_mon) OR
           (START_TAG = '2' AND START_DAYS  < a_mon));

CURSOR DETAIL_CUR1 (a_dt VARCHAR2) IS
   SELECT DISCNTRATE, DISCNTCUT, DISCNTUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DISCOUNT
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND RATE_TAG    = '3' /*보증금2 임대료3*/
      AND ENDDATE   >= as_dt
      AND STARTDATE <= a_dt;

-------------------------------------------------------------
-------------------------------------------------------------
-- 변수선언
   C_DEPT_CODE         VARCHAR2(12);  -- 부서코드
   C_HOUSETAG          VARCHAR2(1);   -- 분양구분
   C_REMARK            VARCHAR2(200); -- 비고
   C_OUT_DT            VARCHAR2(8);   -- 외부입력일자
   C_OUT_TM            VARCHAR2(6);   -- 외부입력시간
   C_OUT_SEQ           FLOAT;         -- 외부입력순번
   C_OUT_BANK          VARCHAR2(6);   -- 외부입력은행
   C_OUT_CUSTNO        VARCHAR2(20);  -- 외부입력고객번호

   C_FIXRATE_TAG       VARCHAR2(1);   -- 고정연체이율구분
   C_FIXRATE_DAY       NUMBER(3);     -- 고정기간일수
   C_FIXRATE           FLOAT;         -- 기간이내연체이율
   C_FIXRATE2          FLOAT;         -- 기간이후연체이율

   C_DEPOSIT_NO        VARCHAR2(30);  -- 계좌번호
   C_INAMT             NUMBER(30,9);  -- 입금액
   C_INGUBUN           VARCHAR2(2);   -- 입금구분
   C_INTYPE            VARCHAR2(2);   -- 입금형태
   C_MOD_YN            VARCHAR2(1);   -- 조정여부
   C_MOD_RAMT          NUMBER(30,9);  -- 조정연체료
   C_MOD_DAMT          NUMBER(30,9);  -- 조정할인료
   C_INPUT_DUTY_ID     VARCHAR2(12);  -- 입력담당

   C_BANK_CODE         VARCHAR2(8);   -- 은행코드
   C_BANK_NAME         VARCHAR2(30);  -- 은행명칭
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_LAST_TERM         INTEGER;      -- 미납입된 마지막계약차수
   C_LAST_COUNTS       VARCHAR2(2);  -- 미납입된 마지막약정차수
   C_MAX_TERM          INTEGER;      -- 마지막계약차수
   C_MAX_COUNTS        VARCHAR2(2);  -- 마지막약정차수
   C_LAST_TIMES        INTEGER;        -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_AGREEAMT          NUMBER(30,9);   -- 약정분양금액
   C_A_SAMT            NUMBER(30,9);   -- 약정공급가
   C_A_VAMT            NUMBER(30,9);   -- 약정부가세
   C_A_IAMT            NUMBER(30,9);   -- 약정보증보험료
   C_A_FRDT            VARCHAR2(8);    -- 약정시작일
   C_A_TODT            VARCHAR2(8);    -- 약정종료일
   C_A_MMTAG           VARCHAR2(1);    -- 약정생성일구분
   C_A_DD              VARCHAR2(20);   -- 약정생성일자
   C_A_RSDT            VARCHAR2(8);    -- 계약시작일
   C_A_REDT            VARCHAR2(8);    -- 계약종료일

   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_RECEIPTSAMT       NUMBER(30,9);   -- 기납입공급가
   C_RECEIPTVAMT       NUMBER(30,9);   -- 기납입부가세
   C_RECEIPTIAMT       NUMBER(30,9);   -- 기납입보험료

   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 납입인정금액
   C_TEMP_SAMT         NUMBER(30,9);   -- 납입인정금액(공급가)
   C_TEMP_VAMT         NUMBER(30,9);   -- 납입인정금액(부가세)
   C_TEMP_IAMT         NUMBER(30,9);   -- 납입인정금액(보증보험)

   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_R_SAMT            NUMBER(30,9);   -- 납입금액(보증보험)
   C_R_VAMT            NUMBER(30,9);   -- 납입금액(보증보험)
   C_R_IAMT            NUMBER(30,9);   -- 납입금액(보증보험)

--   C_TEMP_RATE         NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   --
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_VAT_YN            VARCHAR2(1); -- 부가세여부
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_SYSDT             VARCHAR(14);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분
   C_TEMP__AMT         NUMBER(30,9);

   C_TEMPDT            VARCHAR2(8);

   M_COUNTS            VARCHAR2(2);
   M_ADT               VARCHAR2(8);
   M_FRDT              VARCHAR2(8);
   M_TODT              VARCHAR2(8);
   M_DAY               NUMBER(3);
   M_RENT              NUMBER(13);
   M_SAMT              NUMBER(13);
   M_VAMT              NUMBER(13);
   M_IAMT              NUMBER(13);
   M_VATYN             VARCHAR2(1);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr             EXCEPTION;                  -- SELECT Data Not Found

-------------------------------------------------------------
-------------------------------------------------------------
BEGIN
   SELECT COUNT(*)
     INTO C_CNT
     FROM HD_RENT_MASTER
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND (CHANGE_TAG <> '1' AND CHANGE_DATE < as_dt);
   IF C_CNT > 0 THEN
      Wk_errflag := '-20001';
      e_msg  := ' 해당 입금일에 해당계약자는 계약상태가 아닙니다.';
      GOTO EXIT_ROUTINE;
   END IF;

   BEGIN
      C_SYSDT := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

      -----------------------------------------------------
      -- 사업코드, 분양구분
      SELECT DEPT_CODE,              HOUSETAG,            daymonth_tag,
             NVL(FIXRATE_TAG, '2'),  NVL(FIXRATE_DAY, 0), NVL(FIXRATE, 0),  NVL(FIXRATE2, 0)
        INTO C_DEPT_CODE,            C_HOUSETAG,          C_DAYMONTH,
             C_FIXRATE_TAG,          C_FIXRATE_DAY,       C_FIXRATE,        C_FIXRATE2
        FROM HD_RENT_MASTER
       WHERE CUST_CODE = as_cust
         AND SEQ       = ai_seq;

      SELECT DEPOSIT_NO,   IN_AMT,   IN_GUBUN,  IN_TYPE,  MOD_YN,   MOD_DELAY_AMT, MOD_DISC_AMT, INPUT_DUTY_ID,   REMARK,
             OUT_DT,       OUT_TM,   OUT_SEQ,   OUT_BANK,   OUT_CUSTNO
        INTO C_DEPOSIT_NO, C_INAMT,  C_INGUBUN, C_INTYPE, C_MOD_YN, C_MOD_RAMT,    C_MOD_DAMT,   C_INPUT_DUTY_ID, C_REMARK,
             C_OUT_DT,     C_OUT_TM, C_OUT_SEQ, C_OUT_BANK, C_OUT_CUSTNO
        FROM HD_RENT_RENT_INCOME_DAILY
       WHERE DEPT_CODE = C_DEPT_CODE
         AND HOUSETAG  = C_HOUSETAG
         AND IN_DATE   = as_dt
         AND IN_SEQ    = ai_inseq;

--      c_input_amt := C_INAMT;
--    입금예정금액 = 납입금액 - 조정연체료 + 조정할인료
      c_input_amt := C_INAMT - C_MOD_RAMT + C_MOD_DAMT;

      -----------------------------------------------------
      -- 은행코드,은행명칭을 구한다.
      SELECT BANK_CODE,   BANK_NAME
        INTO C_BANK_CODE, C_BANK_NAME
        FROM HD_CODE_DEPOSIT
       WHERE DEPT_CODE  = C_DEPT_CODE
         AND HOUSETAG   = C_HOUSETAG
         AND DEPOSIT_NO = C_DEPOSIT_NO;
      -----------------------------------------------------
      -- 마지막 약정차수
      SELECT MAX(TERM_CHG_SEQ)
        INTO C_MAX_TERM
        FROM HD_RENT_RENT_AGREE
       WHERE CUST_CODE    = as_cust
         AND SEQ          = ai_seq;
      SELECT MAX(COUNTS)
        INTO C_MAX_COUNTS
        FROM HD_RENT_RENT_AGREE
       WHERE CUST_CODE    = as_cust
         AND SEQ          = ai_seq
         AND TERM_CHG_SEQ = C_MAX_TERM;
      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      SELECT COUNT(*)
        INTO C_CNT
        FROM HD_RENT_RENT_AGREE
       WHERE CUST_CODE   = as_cust
         AND SEQ         = ai_seq
         AND PERPECT_TAG = 'N';

      IF C_CNT > 0 THEN
         SELECT MIN(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';
         SELECT MIN(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND PERPECT_TAG  = 'N';

         SELECT NVL(MAX(TIMES), 0)
           INTO C_LAST_TIMES
           FROM HD_RENT_RENT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      ELSE
         SELECT COUNT(*)
           INTO C_CNT
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         IF C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다.==>' || as_cust || '-' || TO_CHAR(ai_seq);
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT MAX(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         SELECT MAX(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         SELECT NVL(MAX(TIMES),0)
           INTO C_LAST_TIMES
           FROM HD_RENT_RENT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      END IF;

      C_LAST_TIMES := C_LAST_TIMES + 1;

      -----------------------------------------------------
      -- LOOP 시작
      LOOP
         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         SELECT NVL((TO_DATE(AGREE_DATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD')) * -1,0),
                NVL(RENT_AMT,0), RENT_SUPPLY, RENT_VAT, RENT_INS, AGREE_DATE,  VAT_YN,
                AGREE_SDATE,     AGREE_EDATE
           INTO C_DAYS,
                C_AGREEAMT,      C_A_SAMT,    C_A_VAMT, C_A_IAMT, C_AGREEDATE, C_VAT_YN,
                C_A_FRDT,        C_A_TODT
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;

         SELECT AGREE_MM_TAG, AGREE_DD, RENT_SDATE, RENT_EDATE
           INTO C_A_MMTAG,    C_A_DD,   C_A_RSDT,   C_A_REDT
           FROM HD_RENT_DETAIL_TERM
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         C_DC_YN := 'N'; --할인은 무조건 없다
         C_AC_YN := 'Y'; --연체는 무조건 있다

         IF C_DAYS > 0 THEN -- 연체료일 경우
            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'N');
            IF C_TEMPDT >= as_dt THEN
               C_DAYS := 0;
            END IF;
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS),0)
--              INTO C_CNT,C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = C_DEPT_CODE
--               AND HOUSETAG  = C_HOUSETAG
--               AND RATE_TAG  = '2' --임대
--               AND AD_TAG    = '1' --연체
--               AND HOLIDAY = C_AGREEDATE;
--            IF C_CNT > 0 THEN
--               IF C_DAYS <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
         ELSIF C_DAYS < 0 THEN -- 할인료일 경우
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS),0)
--              INTO C_CNT,    C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = C_DEPT_CODE
--               AND HOUSETAG  = C_HOUSETAG
--               AND AD_TAG    = '2' --할인
--               AND RATE_TAG  = '2' --임대료
--               AND HOLIDAY = C_AGREEDATE;
--            IF C_CNT > 0 THEN
--               C_CNT := C_DAYS * -1;
--               IF C_CNT <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
            C_DAYS := 0;
         END IF;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT),0), NVL(SUM(RECEIPT_SUPPLY), 0), NVL(SUM(RECEIPT_VAT), 0), NVL(SUM(RECEIPT_INS), 0) 
           INTO C_RECEIPTAMT,            C_RECEIPTSAMT,               C_RECEIPTVAMT,            C_RECEIPTIAMT
           FROM HD_RENT_RENT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_AGREEAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         IF C_LAST_TIMES > 89 THEN
            C_TEMP_AMT := C_INPUT_AMT;
            C_INPUT_AMT := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF (C_DAYS = 0) THEN
               IF C_WORK_AMT < C_INPUT_AMT THEN
                  C_TEMP_AMT  := C_WORK_AMT;
                  C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT  := C_INPUT_AMT;
                  C_INPUT_AMT := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            ELSE
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_RAMT >= 0) THEN -- 연체료 조정이면
                     C_DELAY_AMT := C_MOD_RAMT;
                     C_AC_YN := 'N';
                     C_DELAY_DAY   := C_DAYS;
                  END IF;
                  IF C_AC_YN = 'Y' THEN
                     -- 납입대상금액계산
                     C_DELAY_DAY   := C_DAYS;
                     C_TEMP_RATE := 0;

                     IF C_DAYMONTH = '2' THEN
                        C_MONTHS := months_between(to_date(as_dt, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'));
                     ELSE
                        C_MONTHS := to_date(as_dt, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD');
                     END IF;

                     OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                     LOOP
                        FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR%NOTFOUND;
                        IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                           C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                           EXIT;
                        END IF;

                        IF C_AGREEDATE >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                        ELSE
                           IF as_dt <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR;


                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                             CASE C_DELAYUNIT
                                WHEN '1' THEN 1
                                WHEN '2' THEN 10
                                WHEN '3' THEN 100
                                WHEN '4' THEN 1000
                                WHEN '5' THEN 10000
                                WHEN '6' THEN 100000
                             ELSE 1
                             END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           IF C_DELAYCUT = '1' THEN
                              C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DELAYUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
--@@                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
--@@                                 C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
--@@                                    C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DELAY_AMT := ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DELAYCUT = '1' THEN
--@@                              C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
--@@                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DELAY_AMT := C_DELAY_AMT + ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;
               ELSE
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_DAMT >= 0) THEN -- 할인료 조정이면
                  --   C_DISCOUNT_AMT := 0;
                     C_DISCOUNT_AMT := C_MOD_DAMT;
                     C_DC_YN := 'N';
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                  END IF;
                  IF C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DETAIL_CUR1(C_AGREEDATE);
                     LOOP
                        FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                        EXIT WHEN DETAIL_CUR1%NOTFOUND;
                        IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF as_dt >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                        ELSE
                           IF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR1;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
                                    C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DISCOUNT_AMT := ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
--@@                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
--@@                                 C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
--@@                                    C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DISCOUNT_AMT := ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DISCNTCUT = '1' THEN
--@@                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT + C_DISCOUNT_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         -----------------------------------------------------------------------------
         IF C_WORK_AMT = C_TEMP_AMT THEN  -- 완납일경우 (약정 - 납입누계)
            C_TEMP_SAMT  := C_A_SAMT - C_RECEIPTSAMT;
            C_TEMP_VAMT  := C_A_VAMT - C_RECEIPTVAMT;
            C_TEMP_IAMT  := C_A_IAMT - C_RECEIPTIAMT;

            C_R_RECEIPTAMT := C_TEMP_AMT;   -- 실납입금액
            C_R_SAMT       := C_TEMP_SAMT;
            C_R_VAMT       := C_TEMP_VAMT;
            C_R_IAMT       := C_TEMP_IAMT;
         ELSE
--            IF C_AGREEAMT <> 0 THEN
--               C_TEMP_IAMT := TRUNC((C_A_IAMT / C_AGREEAMT) * C_TEMP_AMT);
--                IF C_A_VAMT = 0 THEN
--                  C_TEMP_VAMT := 0;
--                  C_TEMP_SAMT := C_TEMP_AMT - C_TEMP_IAMT;
--               ELSE
--                  C_TEMP_VAMT := TRUNC((C_TEMP_AMT - C_TEMP_IAMT) * 0.1);
--                  C_TEMP_SAMT := C_TEMP_AMT - C_TEMP_IAMT - C_TEMP_VAMT;
--               END IF;
--            ELSE
--               C_TEMP_SAMT := 0;
--               C_TEMP_VAMT := 0;
--               C_TEMP_IAMT := 0;
--            END IF;
            IF C_AGREEAMT <> 0 THEN
               C_TEMP_SAMT := TRUNC(((C_A_SAMT / C_AGREEAMT) * C_TEMP_AMT) / 10) * 10;
               IF C_A_VAMT = 0 THEN
                  C_TEMP_VAMT := 0;
               ELSE
                  C_TEMP_VAMT := C_TEMP_SAMT * 0.1;
               END IF;
               C_TEMP_IAMT := C_TEMP_AMT - C_TEMP_SAMT - C_TEMP_VAMT;
            ELSE
               C_TEMP_SAMT := 0;
               C_TEMP_VAMT := 0;
               C_TEMP_IAMT := 0;
            END IF;

            C_TEMP__AMT := ((C_RECEIPTIAMT + C_TEMP_IAMT) - C_A_IAMT);
            IF C_TEMP__AMT > 0 THEN
               C_TEMP_IAMT := C_A_IAMT    - C_RECEIPTIAMT;
               C_TEMP_SAMT := C_TEMP_SAMT + C_TEMP__AMT;
               
               C_TEMP__AMT := ((C_RECEIPTSAMT + C_TEMP_SAMT) - C_A_SAMT);
               IF C_TEMP__AMT > 0 THEN
                  C_TEMP_SAMT  := C_A_SAMT - C_RECEIPTSAMT;
                  C_TEMP_VAMT  := C_TEMP_VAMT + C_TEMP__AMT;
               END IF;
            END IF;

            C_R_SAMT := C_TEMP_SAMT;
            C_R_VAMT := C_TEMP_VAMT;
            C_R_IAMT := C_TEMP_IAMT;
         END IF;

         -- 할인료가 있을 경우만 실납입금액 공급가, 부가세, 보험료를 별도로 계산한다
         IF C_DISCOUNT_AMT <> 0 THEN
	         C_R_RECEIPTAMT := C_TEMP_AMT - C_DISCOUNT_AMT; -- 실납입금액 계산용(연체료를 포함 안한다.)
	         IF C_AGREEAMT <> 0 THEN
                 C_R_SAMT := TRUNC(((C_A_SAMT / C_AGREEAMT) * C_R_RECEIPTAMT) / 10) * 10;
                 IF C_A_VAMT = 0 THEN
                    C_R_VAMT := 0;
                 ELSE
                    C_R_VAMT := C_R_SAMT * 0.1;
                 END IF;
                 C_R_IAMT := C_R_RECEIPTAMT - C_R_SAMT - C_R_VAMT;
 	         ELSE
	            C_R_SAMT := 0;
	            C_R_VAMT := 0;
	            C_R_IAMT := 0;
	         END IF;
	     END IF;    

         ----------------------------------------------------------------------------
         IF C_MOD_YN = 'Y' THEN
            C_DELAY_AMT := C_MOD_RAMT;
            C_DISCOUNT_AMT := C_MOD_DAMT;
         END IF;

         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

/* 원래 있던내용
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액
         IF C_VAT_YN = 'Y' THEN
            C_TEMP_SAMT := TRUNC(C_TEMP_AMT / 1.1, 0);
            C_TEMP_VAMT := C_TEMP_AMT - C_TEMP_SAMT;
            C_TEMP_IAMT := 0;
         ELSE
            C_TEMP_VAMT := 0;
            C_TEMP_SAMT := C_TEMP_AMT;
            C_TEMP_IAMT := 0;
         END IF;
*/
         C_DAYS := TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         -----------------------------------------------------------------------------
         BEGIN
            INSERT INTO HD_RENT_RENT_INCOME
                      (CUST_CODE,       SEQ,              TERM_CHG_SEQ,   COUNTS,         TIMES,
                       DEPT_CODE,       HOUSETAG,         IN_DATE,        IN_SEQ,         DEPOSIT_NO,
                       RECEIPT_DATE,    RECEIPT_AMT,      RECEIPT_SUPPLY, RECEIPT_VAT,    RECEIPT_INS,
                       DELAY_DAYS,      DELAY_AMT,        DISCNT_DAYS,    DISCNT_AMT,
                       REALINCOM_AMT,   REALINCOM_SUPPLY, REALINCOM_VAT,  REALINCOM_INS,
                       BANK_CODE,       BANK_NAME,
                       PAY_TAG,         INCOM_TYPE,       MOD_YN,         REAL_PAY_TAG,
                       SLIP_DATE,       SLIP_SEQ,         SLIP_TYPE,
                       TAX_DATE,        TAX_SEQ,
                       INPUT_DUTY_ID,   INPUT_DATE,       CHG_DUTY_ID,    CHG_DATE,       REMARK,
                       OUT_DT,          OUT_TM,           OUT_SEQ,        OUT_BANK,       OUT_CUSTNO)
               VALUES (as_cust,         ai_seq,           C_LAST_TERM,    C_LAST_COUNTS,  C_LAST_TIMES,
                       C_DEPT_CODE,     C_HOUSETAG,       as_dt,          ai_inseq,       C_DEPOSIT_NO,
                       as_dt,           C_TEMP_AMT,       C_TEMP_SAMT,    C_TEMP_VAMT,    C_TEMP_IAMT,
                       C_DELAY_DAY,     C_DELAY_AMT,      C_DISCOUNT_DAY, C_DISCOUNT_AMT,
                       C_R_RECEIPTAMT,  C_R_SAMT,         C_R_VAMT,       C_R_IAMT,
                       C_BANK_CODE,     C_BANK_NAME,
                       C_INGUBUN,       C_INTYPE,         C_MOD_YN,       'Y',
                       '',              0,                '',
                       '',              0,
                       C_INPUT_DUTY_ID, C_SYSDT,          '',             '',             C_REMARK,
                       C_OUT_DT,        C_OUT_TM,         C_OUT_SEQ,      C_OUT_BANK,     C_OUT_CUSTNO);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#01 INSERT ERROR HD_RENT_RENT_INCOME' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0)
           INTO C_RECEIPTAMT
           FROM HD_RENT_RENT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 입금완료구분값을 구한다.
         IF C_AGREEAMT <= C_RECEIPTAMT THEN BEGIN
            C_PERPECTTAG := 'Y';
            C_RECEIPTAMT := C_AGREEAMT;
         END; ELSE
            C_PERPECTTAG := 'N';
         END IF;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         BEGIN
            UPDATE HD_RENT_RENT_AGREE
               SET PERPECT_TAG  = C_PERPECTTAG,
                   RECEIPT_AMT  = C_RECEIPTAMT,
                   CHG_DUTY_ID  = C_INPUT_DUTY_ID,
                   CHG_DATE     = C_SYSDT
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_RENT_AGREE' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF C_INPUT_AMT = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&
         -- 이때 다음약정이 없으면 생성한다

         SELECT COUNT(*)
           INTO c_cnt
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND ((TERM_CHG_SEQ > c_last_term) OR
                 (TERM_CHG_SEQ = c_last_term AND COUNTS > c_last_counts))
            AND PERPECT_TAG  = 'N';
         IF c_cnt < 1 THEN
            c_cnt := TO_NUMBER(c_last_counts) + 1;
            IF c_cnt < 9 THEN
               M_COUNTS := TRIM('0' || TRIM(TO_CHAR(c_cnt)));
            ELSE
               M_COUNTS := TRIM(TO_CHAR(c_cnt));
            END IF;

            M_FRDT := TO_CHAR(TO_DATE(C_A_TODT, 'YYYYMMDD') + 1, 'YYYYMMDD');
            M_TODT := TO_CHAR(LAST_DAY(TO_DATE(M_FRDT, 'YYYYMMDD')), 'YYYYMMDD');
            M_DAY  := TO_DATE(M_TODT, 'YYYYMMDD') - TO_DATE(M_FRDT, 'YYYYMMDD') + 1;

            IF C_A_MMTAG = '1' THEN
               M_ADT := SUBSTR(M_FRDT, 1, 6) || C_A_DD;
            ELSIF C_A_MMTAG = '2' THEN
               M_ADT := SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(M_FRDT, 1, 6) || '01', 'YYYYMMDD'), 1), 'YYYYMMDD'), 1, 6) || C_A_DD;
            ELSIF C_A_MMTAG = '3' THEN
               M_ADT := TO_CHAR(LAST_DAY(TO_DATE(M_FRDT, 'YYYYMMDD')), 'YYYYMMDD');
            ELSE
               M_ADT := TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(SUBSTR(M_FRDT, 1, 6) || '01', 'YYYYMMDD'), 1)), 'YYYYMMDD');
            END IF;

            IF M_ADT > TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(M_ADT, 1, 6) || '01', 'YYYYMMDD')), 'YYYYMMDD') THEN
               M_ADT := TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(M_ADT, 1, 6) || '01', 'YYYYMMDD')), 'YYYYMMDD');
            END IF;

            c_cnt := LAST_DAY(TO_DATE(M_FRDT, 'YYYYMMDD')) - TO_DATE(SUBSTR(M_FRDT, 1, 6) || '01', 'YYYYMMDD') + 1;
                   
/*
            SELECT TRUNC(M_DAY / c_cnt * MIN(RENT_SUPPLY)),
                   TRUNC(M_DAY / c_cnt * MIN(RENT_VAT)),
                   TRUNC(M_DAY / c_cnt * MIN(RENT_INS))
              INTO M_SAMT,
                   M_VAMT,
                   M_IAMT
              FROM HD_RENT_DETAIL_RENT
             WHERE CUST_CODE   = as_cust
               AND SEQ         = ai_seq
               AND APPLY_YYMM <= (SELECT MAX(APPLY_YYMM)
                                    FROM HD_RENT_DETAIL_RENT
                                   WHERE CUST_CODE   = as_cust
                                     AND SEQ         = ai_seq
                                     AND APPLY_YYMM <= SUBSTR(M_FRDT, 1, 6));
*/
            SELECT F_HD_GET_RENTAMT(as_cust, TO_CHAR(ai_seq), M_FRDT, M_TODT, '1', TO_CHAR(c_cnt)),
                   F_HD_GET_RENTAMT(as_cust, TO_CHAR(ai_seq), M_FRDT, M_TODT, '2', TO_CHAR(c_cnt)),
                   F_HD_GET_RENTAMT(as_cust, TO_CHAR(ai_seq), M_FRDT, M_TODT, '3', TO_CHAR(c_cnt))
              INTO M_SAMT, M_VAMT, M_IAMT
              FROM DUAL;

            M_RENT := M_SAMT + M_VAMT + M_IAMT;

            IF M_VAMT <> 0 THEN
               M_VATYN := 'Y';
            ELSE
               M_VATYN := 'N';
            END IF;

            BEGIN
               INSERT INTO HD_RENT_RENT_AGREE
                         ( CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                           AGREE_DATE,    AGREE_SDATE, AGREE_EDATE,  AGREE_DAYS,
                           RENT_AMT,      VAT_YN,
                           RENT_SUPPLY,   RENT_VAT,    RENT_INS,     PERPECT_TAG, RECEIPT_AMT,
                           INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                           SLIP_DATE,     SLIP_SEQ )
                    SELECT CUST_CODE,     SEQ,         TERM_CHG_SEQ, M_COUNTS,
                           M_ADT,         M_FRDT,      M_TODT,       M_DAY,
                           M_RENT,        M_VATYN,
                           M_SAMT,        M_VAMT,      M_IAMT,       'N',         0,
                           INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                           '',            0
                      FROM HD_RENT_RENT_AGREE
                     WHERE CUST_CODE    = as_cust
                       AND SEQ          = ai_seq
                       AND TERM_CHG_SEQ = c_last_term
                       AND COUNTS       = c_last_counts;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#03 INSERT ERROR HD_RENT_RENT_AGREE' || sqlerrm);
                    ROLLBACK;
                    RETURN;
            END;
         END IF;

         SELECT MIN(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';

         SELECT MIN(COUNTS)
           INTO c_last_counts
           FROM HD_RENT_RENT_AGREE
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND PERPECT_TAG  = 'N';
 
         SELECT NVL(MAX(TIMES), 0) + 1
           INTO c_last_times
           FROM HD_RENT_RENT_INCOME
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND COUNTS       = c_last_counts;

         C_MOD_YN := 'N';
         C_AC_YN  := 'Y';
         C_DC_YN  := 'N';
      END LOOP;
   END;

   BEGIN
      UPDATE HD_RENT_RENT_INCOME_DAILY
         SET TRANS_YN    = 'Y',
             CHG_DUTY_ID = C_INPUT_DUTY_ID,
             CHG_DATE    = C_SYSDT
       WHERE DEPT_CODE   = C_DEPT_CODE
         AND HOUSETAG    = C_HOUSETAG
         AND IN_DATE     = as_dt
         AND IN_SEQ      = ai_inseq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#03 UPDATE ERROR HD_RENT_RENT_INCOME_DAILY' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_HD_RENT_RENT_INCOME;
/


DROP PROCEDURE PROC_HD_RENT_RENT_INCOME_ADJ;

CREATE OR REPLACE PROCEDURE PROC_HD_RENT_RENT_INCOME_ADJ (
  as_cust           IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_dt             IN VARCHAR2,   -- 입금일
  ai_inseq          IN INTEGER     -- 입금순번
) IS

-------------------------------------------------------------
-------------------------------------------------------------
CURSOR DETAIL_CUR (a_dt VARCHAR2, a_mon INTEGER) IS
   SELECT DELAYRATE, DELAYCUT, DELAYUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DELAY
    WHERE CUST_CODE   = as_cust
      AND SEQ         = ai_seq
      AND ENDDATE    >= a_dt
      AND STARTDATE  <= as_dt
      AND RATE_TAG    = '3' /*보증금2 임대료3*/
      AND ((END_TAG   = '1' AND END_DAYS   >= a_mon) OR
           (END_TAG   = '2' AND END_DAYS    > a_mon))
      AND ((START_TAG = '1' AND START_DAYS <= a_mon) OR
           (START_TAG = '2' AND START_DAYS  < a_mon));

CURSOR DETAIL_CUR1 (a_dt VARCHAR2) IS
   SELECT DISCNTRATE, DISCNTCUT, DISCNTUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DISCOUNT
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND RATE_TAG    = '3' /*보증금2 임대료3*/
      AND ENDDATE   >= as_dt
      AND STARTDATE <= a_dt;

-------------------------------------------------------------
-------------------------------------------------------------
-- 변수선언
   C_DEPT_CODE         VARCHAR2(12);  -- 부서코드
   C_HOUSETAG          VARCHAR2(1);   -- 분양구분
   C_REMARK            VARCHAR2(200); -- 비고
   C_OUT_DT            VARCHAR2(8);   -- 외부입력일자
   C_OUT_TM            VARCHAR2(6);   -- 외부입력시간
   C_OUT_SEQ           FLOAT;         -- 외부입력순번
   C_OUT_BANK          VARCHAR2(6);   -- 외부입력은행
   C_OUT_CUSTNO        VARCHAR2(20);  -- 외부입력고객번호

   C_FIXRATE_TAG       VARCHAR2(1);   -- 고정연체이율구분
   C_FIXRATE_DAY       NUMBER(3);     -- 고정기간일수
   C_FIXRATE           FLOAT;         -- 기간이내연체이율
   C_FIXRATE2          FLOAT;         -- 기간이후연체이율

   C_DEPOSIT_NO        VARCHAR2(30);  -- 계좌번호
   C_INAMT             NUMBER(30,9);  -- 입금액
   C_INGUBUN           VARCHAR2(2);   -- 입금구분
   C_INTYPE            VARCHAR2(2);   -- 입금형태
   C_MOD_YN            VARCHAR2(1);   -- 조정여부
   C_MOD_RAMT          NUMBER(30,9);  -- 조정연체료
   C_MOD_DAMT          NUMBER(30,9);  -- 조정할인료
   C_INPUT_DUTY_ID     VARCHAR2(12);  -- 입력담당

   C_BANK_CODE         VARCHAR2(8);   -- 은행코드
   C_BANK_NAME         VARCHAR2(30);  -- 은행명칭
   C_CUST_NAME         VARCHAR2(50);  -- 고객명
   C_CNT               NUMBER;   --
   C_LAST_TERM         INTEGER;      -- 미납입된 마지막계약차수
   C_LAST_COUNTS       VARCHAR2(2);  -- 미납입된 마지막약정차수
   C_MAX_TERM          INTEGER;      -- 마지막계약차수
   C_MAX_COUNTS        VARCHAR2(2);  -- 마지막약정차수
   C_LAST_TIMES        INTEGER;        -- 마지막회수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_AGREEAMT          NUMBER(30,9);   -- 약정분양금액
   C_A_SAMT            NUMBER(30,9);   -- 약정공급가
   C_A_VAMT            NUMBER(30,9);   -- 약정부가세
   C_A_IAMT            NUMBER(30,9);   -- 약정보증보험료
   C_A_FRDT            VARCHAR2(8);    -- 약정시작일
   C_A_TODT            VARCHAR2(8);    -- 약정종료일
   C_A_MMTAG           VARCHAR2(1);    -- 약정생성일구분
   C_A_DD              VARCHAR2(20);   -- 약정생성일자
   C_A_RSDT            VARCHAR2(8);    -- 계약시작일
   C_A_REDT            VARCHAR2(8);    -- 계약종료일

   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_RECEIPTSAMT       NUMBER(30,9);   -- 기납입공급가
   C_RECEIPTVAMT       NUMBER(30,9);   -- 기납입부가세
   C_RECEIPTIAMT       NUMBER(30,9);   -- 기납입보험료

   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 납입인정금액
   C_TEMP_SAMT         NUMBER(30,9);   -- 납입인정금액(공급가)
   C_TEMP_VAMT         NUMBER(30,9);   -- 납입인정금액(부가세)
   C_TEMP_IAMT         NUMBER(30,9);   -- 납입인정금액(보증보험)

   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_R_SAMT            NUMBER(30,9);   -- 납입금액(보증보험)
   C_R_VAMT            NUMBER(30,9);   -- 납입금액(보증보험)
   C_R_IAMT            NUMBER(30,9);   -- 납입금액(보증보험)

--   C_TEMP_RATE         NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   --
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_VAT_YN            VARCHAR2(1); -- 부가세여부
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_SYSDT             VARCHAR(14);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분
   C_TEMP__AMT         NUMBER(30,9);

   C_TEMPDT            VARCHAR2(8);

   M_COUNTS            VARCHAR2(2);
   M_ADT               VARCHAR2(8);
   M_FRDT              VARCHAR2(8);
   M_TODT              VARCHAR2(8);
   M_DAY               NUMBER(3);
   M_RENT              NUMBER(13);
   M_SAMT              NUMBER(13);
   M_VAMT              NUMBER(13);
   M_IAMT              NUMBER(13);
   M_VATYN             VARCHAR2(1);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr             EXCEPTION;                  -- SELECT Data Not Found

-------------------------------------------------------------
-------------------------------------------------------------
BEGIN
--RAISE_APPLICATION_ERROR(-20002, as_cust || '-' || ai_seq || '-' ||  as_dt || '-' || ai_inseq);
--ROLLBACK;
--RETURN;

   BEGIN
      C_SYSDT := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

      -----------------------------------------------------
      -- 사업코드, 분양구분
      SELECT DEPT_CODE,              HOUSETAG,            daymonth_tag,
             NVL(FIXRATE_TAG, '2'),  NVL(FIXRATE_DAY, 0), NVL(FIXRATE, 0),  NVL(FIXRATE2, 0)
        INTO C_DEPT_CODE,            C_HOUSETAG,          C_DAYMONTH,
             C_FIXRATE_TAG,          C_FIXRATE_DAY,       C_FIXRATE,        C_FIXRATE2
        FROM HD_RENT_MASTER
       WHERE CUST_CODE = as_cust
         AND SEQ       = ai_seq;

      SELECT DEPOSIT_NO,   IN_AMT,   IN_GUBUN,  IN_TYPE,  MOD_YN,   MOD_DELAY_AMT, MOD_DISC_AMT, INPUT_DUTY_ID,   REMARK,
             OUT_DT,       OUT_TM,   OUT_SEQ,   OUT_BANK,   OUT_CUSTNO
        INTO C_DEPOSIT_NO, C_INAMT,  C_INGUBUN, C_INTYPE, C_MOD_YN, C_MOD_RAMT,    C_MOD_DAMT,   C_INPUT_DUTY_ID, C_REMARK,
             C_OUT_DT,     C_OUT_TM, C_OUT_SEQ, C_OUT_BANK, C_OUT_CUSTNO
        FROM HD_RENT_RENT_INCOME_DAILY_ADJ
       WHERE DEPT_CODE = C_DEPT_CODE
         AND HOUSETAG  = C_HOUSETAG
         AND IN_DATE   = as_dt
         AND IN_SEQ    = ai_inseq;

--      c_input_amt := C_INAMT;
--    입금예정금액 = 납입금액 - 조정연체료 + 조정할인료
      c_input_amt := C_INAMT - C_MOD_RAMT + C_MOD_DAMT;

      -----------------------------------------------------
      -- 은행코드,은행명칭을 구한다.
      SELECT BANK_CODE,   BANK_NAME
        INTO C_BANK_CODE, C_BANK_NAME
        FROM HD_CODE_DEPOSIT
       WHERE DEPT_CODE  = C_DEPT_CODE
         AND HOUSETAG   = C_HOUSETAG
         AND DEPOSIT_NO = C_DEPOSIT_NO;
      -----------------------------------------------------
      -- 마지막 약정차수
      SELECT MAX(TERM_CHG_SEQ)
        INTO C_MAX_TERM
        FROM HD_RENT_RENT_AGREE_ADJ
       WHERE CUST_CODE    = as_cust
         AND SEQ          = ai_seq;
      SELECT MAX(COUNTS)
        INTO C_MAX_COUNTS
        FROM HD_RENT_RENT_AGREE_ADJ
       WHERE CUST_CODE    = as_cust
         AND SEQ          = ai_seq
         AND TERM_CHG_SEQ = C_MAX_TERM;
      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      SELECT COUNT(*)
        INTO C_CNT
        FROM HD_RENT_RENT_AGREE_ADJ
       WHERE CUST_CODE   = as_cust
         AND SEQ         = ai_seq
         AND PERPECT_TAG = 'N';

      IF C_CNT > 0 THEN
         SELECT MIN(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';
         SELECT MIN(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND PERPECT_TAG  = 'N';

         SELECT NVL(MAX(TIMES), 0)
           INTO C_LAST_TIMES
           FROM HD_RENT_RENT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      ELSE
         SELECT COUNT(*)
           INTO C_CNT
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         IF C_CNT < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다.==>' || as_cust || '-' || TO_CHAR(ai_seq);
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT MAX(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         SELECT MAX(COUNTS)
           INTO C_LAST_COUNTS
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE = as_cust
            AND SEQ       = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         SELECT NVL(MAX(TIMES),0)
           INTO C_LAST_TIMES
           FROM HD_RENT_RENT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;
      END IF;

      C_LAST_TIMES := C_LAST_TIMES + 1;

      -----------------------------------------------------
      -- LOOP 시작
      LOOP
         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         SELECT NVL((TO_DATE(AGREE_DATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD')) * -1,0),
                NVL(RENT_AMT,0), RENT_SUPPLY, RENT_VAT, RENT_INS, AGREE_DATE,  VAT_YN,
                AGREE_SDATE,     AGREE_EDATE
           INTO C_DAYS,
                C_AGREEAMT,      C_A_SAMT,    C_A_VAMT, C_A_IAMT, C_AGREEDATE, C_VAT_YN,
                C_A_FRDT,        C_A_TODT
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS;

         SELECT AGREE_MM_TAG, AGREE_DD, RENT_SDATE, RENT_EDATE
           INTO C_A_MMTAG,    C_A_DD,   C_A_RSDT,   C_A_REDT
           FROM HD_RENT_DETAIL_TERM
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         C_DC_YN := 'N'; --할인은 무조건 없다
         C_AC_YN := 'Y'; --연체는 무조건 있다

         IF C_DAYS > 0 THEN -- 연체료일 경우
            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'N');
            IF C_TEMPDT >= as_dt THEN
               C_DAYS := 0;
            END IF;
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS),0)
--              INTO C_CNT,C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = C_DEPT_CODE
--               AND HOUSETAG  = C_HOUSETAG
--               AND RATE_TAG  = '2' --임대
--               AND AD_TAG    = '1' --연체
--               AND HOLIDAY = C_AGREEDATE;
--            IF C_CNT > 0 THEN
--               IF C_DAYS <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
         ELSIF C_DAYS < 0 THEN -- 할인료일 경우
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS),0)
--              INTO C_CNT,    C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = C_DEPT_CODE
--               AND HOUSETAG  = C_HOUSETAG
--               AND AD_TAG    = '2' --할인
--               AND RATE_TAG  = '2' --임대료
--               AND HOLIDAY = C_AGREEDATE;
--            IF C_CNT > 0 THEN
--               C_CNT := C_DAYS * -1;
--               IF C_CNT <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
            C_DAYS := 0;
         END IF;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT),0), NVL(SUM(RECEIPT_SUPPLY), 0), NVL(SUM(RECEIPT_VAT), 0), NVL(SUM(RECEIPT_INS), 0) 
           INTO C_RECEIPTAMT,            C_RECEIPTSAMT,               C_RECEIPTVAMT,            C_RECEIPTIAMT
           FROM HD_RENT_RENT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_AGREEAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         IF C_LAST_TIMES > 89 THEN
            C_TEMP_AMT := C_INPUT_AMT;
            C_INPUT_AMT := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF (C_DAYS = 0) THEN
               IF C_WORK_AMT < C_INPUT_AMT THEN
                  C_TEMP_AMT  := C_WORK_AMT;
                  C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT  := C_INPUT_AMT;
                  C_INPUT_AMT := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            ELSE
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_RAMT >= 0) THEN -- 연체료 조정이면
                     C_DELAY_AMT := C_MOD_RAMT;
                     C_AC_YN := 'N';
                     C_DELAY_DAY   := C_DAYS;
                  END IF;
                  IF C_AC_YN = 'Y' THEN
                     -- 납입대상금액계산
                     C_DELAY_DAY   := C_DAYS;
                     C_TEMP_RATE := 0;

                     IF C_DAYMONTH = '2' THEN
                        C_MONTHS := months_between(to_date(as_dt, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'));
                     ELSE
                        C_MONTHS := to_date(as_dt, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD');
                     END IF;

                     OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                     LOOP
                        FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR%NOTFOUND;
                        IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                           C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                           EXIT;
                        END IF;

                        IF C_AGREEDATE >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                        ELSE
                           IF as_dt <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR;


                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                             CASE C_DELAYUNIT
                                WHEN '1' THEN 1
                                WHEN '2' THEN 10
                                WHEN '3' THEN 100
                                WHEN '4' THEN 1000
                                WHEN '5' THEN 10000
                                WHEN '6' THEN 100000
                             ELSE 1
                             END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           IF C_DELAYCUT = '1' THEN
                              C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DELAYUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
--@@                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
--@@                                 C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
--@@                                    C_DELAY_AMT := TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DELAY_AMT := ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DELAYCUT = '1' THEN
--@@                              C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
--@@                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DELAY_AMT := C_DELAY_AMT + ROUND((C_INPUT_AMT - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        IF C_MOD_YN = 'Y' THEN -- 연체료 조정이면
                           IF C_MOD_RAMT <= C_DELAY_AMT THEN
                              C_DELAY_AMT := C_MOD_RAMT;
                              C_MOD_RAMT := 0;
                           ELSE
                              C_MOD_RAMT := C_MOD_RAMT - C_DELAY_AMT;
                           END IF;
                           IF (C_WORK_AMT + C_DELAY_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT + C_DELAY_AMT);
                           ELSE
                              C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT - C_DELAY_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;
               ELSE
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF (C_MOD_YN = 'Y') AND (C_MOD_DAMT >= 0) THEN -- 할인료 조정이면
                  --   C_DISCOUNT_AMT := 0;
                     C_DISCOUNT_AMT := C_MOD_DAMT;
                     C_DC_YN := 'N';
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                  END IF;
                  IF C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DETAIL_CUR1(C_AGREEDATE);
                     LOOP
                        FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                        EXIT WHEN DETAIL_CUR1%NOTFOUND;
                        IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF as_dt >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                        ELSE
                           IF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR1;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
                                    C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DISCOUNT_AMT := ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT := C_WORK_AMT;
                           C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                        END IF;
                     ELSE
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE, C_DISCNTCUT, C_DISCNTUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
--@@                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
--@@                                 C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
--@@                                    C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DISCOUNT_AMT := ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := C_INPUT_AMT / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DISCNTCUT = '1' THEN
--@@                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_TEMP_AMT - C_INPUT_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        IF C_MOD_YN = 'Y' THEN -- 할인료 조정이면
                           IF C_MOD_DAMT <= C_DISCOUNT_AMT THEN
                              C_DISCOUNT_AMT := C_MOD_DAMT;
                              C_MOD_DAMT := 0;
                           ELSE
                              C_MOD_DAMT := C_MOD_DAMT - C_DISCOUNT_AMT;
                           END IF;
                           IF (C_WORK_AMT - C_DISCOUNT_AMT) < C_INPUT_AMT THEN
                              C_TEMP_AMT  := C_WORK_AMT;
                              C_INPUT_AMT := C_INPUT_AMT - (C_WORK_AMT - C_DISCOUNT_AMT);
                           ELSE
                              C_TEMP_AMT  := C_INPUT_AMT + C_DISCOUNT_AMT;
                              C_INPUT_AMT := 0;
                           END IF;
                        ELSE
                           C_TEMP_AMT   := C_INPUT_AMT + C_DISCOUNT_AMT;
                           C_INPUT_AMT := 0;
                        END IF;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < C_INPUT_AMT THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        C_INPUT_AMT := C_INPUT_AMT - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := C_INPUT_AMT;
                        C_INPUT_AMT := 0;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         -----------------------------------------------------------------------------
         IF C_WORK_AMT = C_TEMP_AMT THEN  -- 완납일경우 (약정 - 납입누계)
            C_TEMP_SAMT  := C_A_SAMT - C_RECEIPTSAMT;
            C_TEMP_VAMT  := C_A_VAMT - C_RECEIPTVAMT;
            C_TEMP_IAMT  := C_A_IAMT - C_RECEIPTIAMT;

            C_R_RECEIPTAMT := C_TEMP_AMT;   -- 실납입금액
            C_R_SAMT       := C_TEMP_SAMT;
            C_R_VAMT       := C_TEMP_VAMT;
            C_R_IAMT       := C_TEMP_IAMT;
         ELSE
--            IF C_AGREEAMT <> 0 THEN
--               C_TEMP_IAMT := TRUNC((C_A_IAMT / C_AGREEAMT) * C_TEMP_AMT);
--                IF C_A_VAMT = 0 THEN
--                  C_TEMP_VAMT := 0;
--                  C_TEMP_SAMT := C_TEMP_AMT - C_TEMP_IAMT;
--               ELSE
--                  C_TEMP_VAMT := TRUNC((C_TEMP_AMT - C_TEMP_IAMT) * 0.1);
--                  C_TEMP_SAMT := C_TEMP_AMT - C_TEMP_IAMT - C_TEMP_VAMT;
--               END IF;
--            ELSE
--               C_TEMP_SAMT := 0;
--               C_TEMP_VAMT := 0;
--               C_TEMP_IAMT := 0;
--            END IF;
            IF C_AGREEAMT <> 0 THEN
               C_TEMP_SAMT := TRUNC(((C_A_SAMT / C_AGREEAMT) * C_TEMP_AMT) / 10) * 10;
               IF C_A_VAMT = 0 THEN
                  C_TEMP_VAMT := 0;
               ELSE
                  C_TEMP_VAMT := C_TEMP_SAMT * 0.1;
               END IF;
               C_TEMP_IAMT := C_TEMP_AMT - C_TEMP_SAMT - C_TEMP_VAMT;
            ELSE
               C_TEMP_SAMT := 0;
               C_TEMP_VAMT := 0;
               C_TEMP_IAMT := 0;
            END IF;

            C_TEMP__AMT := ((C_RECEIPTIAMT + C_TEMP_IAMT) - C_A_IAMT);
            IF C_TEMP__AMT > 0 THEN
               C_TEMP_IAMT := C_A_IAMT    - C_RECEIPTIAMT;
               C_TEMP_SAMT := C_TEMP_SAMT + C_TEMP__AMT;
               
               C_TEMP__AMT := ((C_RECEIPTSAMT + C_TEMP_SAMT) - C_A_SAMT);
               IF C_TEMP__AMT > 0 THEN
                  C_TEMP_SAMT  := C_A_SAMT - C_RECEIPTSAMT;
                  C_TEMP_VAMT  := C_TEMP_VAMT + C_TEMP__AMT;
               END IF;
            END IF;

            C_R_SAMT := C_TEMP_SAMT;
            C_R_VAMT := C_TEMP_VAMT;
            C_R_IAMT := C_TEMP_IAMT;
         END IF;

         -- 할인료가 있을 경우만 실납입금액 공급가, 부가세, 보험료를 별도로 계산한다
         IF C_DISCOUNT_AMT <> 0 THEN
	         C_R_RECEIPTAMT := C_TEMP_AMT - C_DISCOUNT_AMT; -- 실납입금액 계산용(연체료를 포함 안한다.)
	         IF C_AGREEAMT <> 0 THEN
                 C_R_SAMT := TRUNC(((C_A_SAMT / C_AGREEAMT) * C_R_RECEIPTAMT) / 10) * 10;
                 IF C_A_VAMT = 0 THEN
                    C_R_VAMT := 0;
                 ELSE
                    C_R_VAMT := C_R_SAMT * 0.1;
                 END IF;
                 C_R_IAMT := C_R_RECEIPTAMT - C_R_SAMT - C_R_VAMT;
 	         ELSE
	            C_R_SAMT := 0;
	            C_R_VAMT := 0;
	            C_R_IAMT := 0;
	         END IF;
	     END IF;    
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

/* 원래 있던내용
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액
         IF C_VAT_YN = 'Y' THEN
            C_TEMP_SAMT := TRUNC(C_TEMP_AMT / 1.1, 0);
            C_TEMP_VAMT := C_TEMP_AMT - C_TEMP_SAMT;
            C_TEMP_IAMT := 0;
         ELSE
            C_TEMP_VAMT := 0;
            C_TEMP_SAMT := C_TEMP_AMT;
            C_TEMP_IAMT := 0;
         END IF;
*/
         C_DAYS := TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         -----------------------------------------------------------------------------
         BEGIN
            INSERT INTO HD_RENT_RENT_INCOME_ADJ
                      (CUST_CODE,       SEQ,              TERM_CHG_SEQ,   COUNTS,         TIMES,
                       DEPT_CODE,       HOUSETAG,         IN_DATE,        IN_SEQ,         DEPOSIT_NO,
                       RECEIPT_DATE,    RECEIPT_AMT,      RECEIPT_SUPPLY, RECEIPT_VAT,    RECEIPT_INS,
                       DELAY_DAYS,      DELAY_AMT,        DISCNT_DAYS,    DISCNT_AMT,
                       REALINCOM_AMT,   REALINCOM_SUPPLY, REALINCOM_VAT,  REALINCOM_INS,
                       BANK_CODE,       BANK_NAME,
                       PAY_TAG,         INCOM_TYPE,       MOD_YN,         REAL_PAY_TAG,
                       SLIP_DATE,       SLIP_SEQ,         SLIP_TYPE,
                       TAX_DATE,        TAX_SEQ,
                       INPUT_DUTY_ID,   INPUT_DATE,       CHG_DUTY_ID,    CHG_DATE,       REMARK,
                       OUT_DT,          OUT_TM,           OUT_SEQ,        OUT_BANK,       OUT_CUSTNO)
               VALUES (as_cust,         ai_seq,           C_LAST_TERM,    C_LAST_COUNTS,  C_LAST_TIMES,
                       C_DEPT_CODE,     C_HOUSETAG,       as_dt,          ai_inseq,       C_DEPOSIT_NO,
                       as_dt,           C_TEMP_AMT,       C_TEMP_SAMT,    C_TEMP_VAMT,    C_TEMP_IAMT,
                       C_DELAY_DAY,     C_DELAY_AMT,      C_DISCOUNT_DAY, C_DISCOUNT_AMT,
                       C_R_RECEIPTAMT,  C_R_SAMT,         C_R_VAMT,       C_R_IAMT,
                       C_BANK_CODE,     C_BANK_NAME,
                       C_INGUBUN,       C_INTYPE,         C_MOD_YN,       'Y',
                       '',              0,                '',
                       '',              0,
                       C_INPUT_DUTY_ID, C_SYSDT,          '',             '',             C_REMARK,
                       C_OUT_DT,        C_OUT_TM,         C_OUT_SEQ,      C_OUT_BANK,     C_OUT_CUSTNO);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#01 INSERT ERROR HD_RENT_RENT_INCOME_ADJ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0)
           INTO C_RECEIPTAMT
           FROM HD_RENT_RENT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM
            AND COUNTS       = C_LAST_COUNTS
            AND TIMES        < 90;
         -- 입금완료구분값을 구한다.
         IF C_AGREEAMT <= C_RECEIPTAMT THEN BEGIN
            C_PERPECTTAG := 'Y';
            C_RECEIPTAMT := C_AGREEAMT;
         END; ELSE
            C_PERPECTTAG := 'N';
         END IF;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         BEGIN
            UPDATE HD_RENT_RENT_AGREE_ADJ
               SET PERPECT_TAG  = C_PERPECTTAG,
                   RECEIPT_AMT  = C_RECEIPTAMT,
                   CHG_DUTY_ID  = C_INPUT_DUTY_ID,
                   CHG_DATE     = C_SYSDT
             WHERE CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = C_LAST_TERM
               AND COUNTS       = C_LAST_COUNTS;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_RENT_AGREE_ADJ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;

         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF C_INPUT_AMT = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&
         -- 이때 다음약정이 없으면 생성한다

         SELECT COUNT(*)
           INTO c_cnt
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND ((TERM_CHG_SEQ > c_last_term) OR
                 (TERM_CHG_SEQ = c_last_term AND COUNTS > c_last_counts))
            AND PERPECT_TAG  = 'N';
         IF c_cnt < 1 THEN
            c_cnt := TO_NUMBER(c_last_counts) + 1;
            IF c_cnt < 9 THEN
               M_COUNTS := TRIM('0' || TRIM(TO_CHAR(c_cnt)));
            ELSE
               M_COUNTS := TRIM(TO_CHAR(c_cnt));
            END IF;

            M_FRDT := TO_CHAR(TO_DATE(C_A_TODT, 'YYYYMMDD') + 1, 'YYYYMMDD');
            M_TODT := TO_CHAR(LAST_DAY(TO_DATE(M_FRDT, 'YYYYMMDD')), 'YYYYMMDD');
            M_DAY  := TO_DATE(M_TODT, 'YYYYMMDD') - TO_DATE(M_FRDT, 'YYYYMMDD') + 1;

            IF C_A_MMTAG = '1' THEN
               M_ADT := SUBSTR(M_FRDT, 1, 6) || C_A_DD;
            ELSIF C_A_MMTAG = '2' THEN
               M_ADT := SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(M_FRDT, 1, 6) || '01', 'YYYYMMDD'), 1), 'YYYYMMDD'), 1, 6) || C_A_DD;
            ELSIF C_A_MMTAG = '3' THEN
               M_ADT := TO_CHAR(LAST_DAY(TO_DATE(M_FRDT, 'YYYYMMDD')), 'YYYYMMDD');
            ELSE
               M_ADT := TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(SUBSTR(M_FRDT, 1, 6) || '01', 'YYYYMMDD'), 1)), 'YYYYMMDD');
            END IF;

            IF M_ADT > TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(M_ADT, 1, 6) || '01', 'YYYYMMDD')), 'YYYYMMDD') THEN
               M_ADT := TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(M_ADT, 1, 6) || '01', 'YYYYMMDD')), 'YYYYMMDD');
            END IF;

            c_cnt := LAST_DAY(TO_DATE(M_FRDT, 'YYYYMMDD')) - TO_DATE(SUBSTR(M_FRDT, 1, 6) || '01', 'YYYYMMDD') + 1;

            SELECT TRUNC(M_DAY / c_cnt * MIN(RENT_SUPPLY)),
                   TRUNC(M_DAY / c_cnt * MIN(RENT_VAT)),
                   TRUNC(M_DAY / c_cnt * MIN(RENT_INS))
              INTO M_SAMT,
                   M_VAMT,
                   M_IAMT
              FROM HD_RENT_DETAIL_RENT
             WHERE CUST_CODE   = as_cust
               AND SEQ         = ai_seq
               AND APPLY_YYMM <= (SELECT MAX(APPLY_YYMM)
                                    FROM HD_RENT_DETAIL_RENT
                                   WHERE CUST_CODE   = as_cust
                                     AND SEQ         = ai_seq
                                     AND APPLY_YYMM <= SUBSTR(M_FRDT, 1, 6));
            M_RENT := M_SAMT + M_VAMT + M_IAMT;

            IF M_VAMT <> 0 THEN
               M_VATYN := 'Y';
            ELSE
               M_VATYN := 'N';
            END IF;

            BEGIN
               INSERT INTO HD_RENT_RENT_AGREE_ADJ
                         ( CUST_CODE,     SEQ,         TERM_CHG_SEQ, COUNTS,
                           AGREE_DATE,    AGREE_SDATE, AGREE_EDATE,  AGREE_DAYS,
                           RENT_AMT,      VAT_YN,
                           RENT_SUPPLY,   RENT_VAT,    RENT_INS,     PERPECT_TAG, RECEIPT_AMT,
                           INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                           SLIP_DATE,     SLIP_SEQ )
                    SELECT CUST_CODE,     SEQ,         TERM_CHG_SEQ, M_COUNTS,
                           M_ADT,         M_FRDT,      M_TODT,       M_DAY,
                           M_RENT,        M_VATYN,
                           M_SAMT,        M_VAMT,      M_IAMT,       'N',         0,
                           INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,  CHG_DATE,
                           '',            0
                      FROM HD_RENT_RENT_AGREE_ADJ
                     WHERE CUST_CODE    = as_cust
                       AND SEQ          = ai_seq
                       AND TERM_CHG_SEQ = c_last_term
                       AND COUNTS       = c_last_counts;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#03 INSERT ERROR HD_RENT_RENT_AGREE_ADJ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
            END;
         END IF;

         SELECT MIN(TERM_CHG_SEQ)
           INTO C_LAST_TERM
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';

         SELECT MIN(COUNTS)
           INTO c_last_counts
           FROM HD_RENT_RENT_AGREE_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND PERPECT_TAG  = 'N';
 
         SELECT NVL(MAX(TIMES), 0) + 1
           INTO c_last_times
           FROM HD_RENT_RENT_INCOME_ADJ
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND COUNTS       = c_last_counts;

         C_MOD_YN := 'N';
         C_AC_YN  := 'Y';
         C_DC_YN  := 'N';
      END LOOP;
   END;

   BEGIN
      UPDATE HD_RENT_RENT_INCOME_DAILY_ADJ
         SET TRANS_YN    = 'Y',
             CHG_DUTY_ID = C_INPUT_DUTY_ID,
             CHG_DATE    = C_SYSDT
       WHERE DEPT_CODE   = C_DEPT_CODE
         AND HOUSETAG    = C_HOUSETAG
         AND IN_DATE     = as_dt
         AND IN_SEQ      = ai_inseq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '#03 UPDATE ERROR HD_RENT_RENT_INCOME_DAILY_ADJ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   COMMIT WORK;

   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_HD_RENT_RENT_INCOME_ADJ;
/


DROP PROCEDURE PROC_HD_RENT_RENT_INCOME_PLAN;

CREATE OR REPLACE PROCEDURE PROC_HD_RENT_RENT_INCOME_PLAN (
  as_cust           IN VARCHAR2,   -- 고객코드
  ai_seq            IN INTEGER,    -- 계약순번
  as_dt             IN VARCHAR2,   -- 입금일
  ad_amt            IN NUMBER,     -- 입금액
  ad_seq_num        IN NUMBER,     -- SEQ_NUM
  ai_term           IN INTEGER,    -- 계약차수
  as_counts         IN VARCHAR2    -- 차수
) IS

-------------------------------------------------------------
-------------------------------------------------------------
CURSOR DETAIL_CUR (a_dt VARCHAR2, a_mon INTEGER) IS
   SELECT DELAYRATE, DELAYCUT, DELAYUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DELAY
    WHERE CUST_CODE   = as_cust
      AND SEQ         = ai_seq
      AND ENDDATE    >= a_dt
      AND STARTDATE  <= as_dt
      AND RATE_TAG    = '3' /*보증금2 임대료3*/
      AND ((END_TAG   = '1' AND END_DAYS   >= a_mon) OR
           (END_TAG   = '2' AND END_DAYS    > a_mon))
      AND ((START_TAG = '1' AND START_DAYS <= a_mon) OR
           (START_TAG = '2' AND START_DAYS  < a_mon));

CURSOR DETAIL_CUR1 (a_dt VARCHAR2) IS
   SELECT DISCNTRATE, DISCNTCUT, DISCNTUNIT, STARTDATE, ENDDATE
     FROM HD_RENT_RATE_DISCOUNT
    WHERE CUST_CODE  = as_cust
      AND SEQ        = ai_seq
      AND RATE_TAG    = '3' /*보증금2 임대료3*/
      AND ENDDATE   >= as_dt
      AND STARTDATE <= a_dt;

-------------------------------------------------------------
-------------------------------------------------------------
-- 변수선언
   c_dept_code         VARCHAR2(12);  -- 부서코드
   c_housetag          VARCHAR2(1);   -- 분양구분
   c_cust_name         VARCHAR2(50);  -- 고객명
   c_cnt               NUMBER;   --
   c_inseq             NUMBER;   -- 입금순번
   c_last_term         INTEGER;      -- 미납입된 마지막계약차수
   c_last_counts       VARCHAR2(2);  -- 미납입된 마지막약정차수
   c_last_times        INTEGER;  -- 마지막회수
   c_max_term          INTEGER;      -- 마지막계약차수
   c_max_counts        VARCHAR2(2);  -- 마지막약정차수
   C_MONTHS            NUMBER(10,5);   -- 연체월
   C_DAYS              NUMBER(10,5);   --
   C_TEMP_DAYS         NUMBER(10,5);   --
   C_DELAY_DAY         NUMBER(10,5);   -- 연체일수
   C_DISCOUNT_DAY      NUMBER(10,5);   -- 할인일자
   C_DELAY_AMT         NUMBER(30,9);   -- 연체료
   C_DISCOUNT_AMT      NUMBER(30,9);   -- 할인료
   C_BUNAMT            NUMBER(30,9);   -- 약정분양금액
   C_A_SAMT            NUMBER(30,9);   -- 약정공급가
   C_A_VAMT            NUMBER(30,9);   -- 약정부가세
   C_A_IAMT            NUMBER(30,9);   -- 약정보증보험료

   C_A_FRDT            VARCHAR2(8);    -- 약정시작일
   C_A_TODT            VARCHAR2(8);    -- 약정종료일
   C_A_MMTAG           VARCHAR2(1);    -- 약정생성일구분
   C_A_DD              VARCHAR2(20);   -- 약정생성일자
   C_A_RSDT            VARCHAR2(8);    -- 계약시작일
   C_A_REDT            VARCHAR2(8);    -- 계약종료일

   C_R_RECEIPTAMT      NUMBER(30,9);   -- 실납입금액
   C_AGREEDATE         VARCHAR2(8);    -- 약정일자
   C_RECEIPTAMT        NUMBER(30,9);   -- 납입인정금액
   C_RECEIPTSAMT       NUMBER(30,9);   -- 기납입(공급가)
   C_RECEIPTVAMT       NUMBER(30,9);   -- 기납입(부가세)
   C_RECEIPTIAMT       NUMBER(30,9);   -- 기납입(보증보험)

   C_WORK_AMT          NUMBER(30,9);   -- 약정대상금액
   C_TEMP_AMT          NUMBER(30,9);   -- 납입인정금액
   C_TEMP_SAMT         NUMBER(30,9);   -- 납입인정금액(공급가)
   C_TEMP_VAMT         NUMBER(30,9);   -- 납입인정금액(부가세)
   C_TEMP_IAMT         NUMBER(30,9);   -- 납입인정금액(보증보험)

   C_R_SAMT            NUMBER(30,9);   -- 납입금액(보증보험)
   C_R_VAMT            NUMBER(30,9);   -- 납입금액(보증보험)
   C_R_IAMT            NUMBER(30,9);   -- 납입금액(보증보험)

--   C_TEMP_RATE         NUMBER(30,9);   -- 약정계산금액
   C_TEMP_RATE         NUMBER;   -- 약정계산금액
   C_TEMP_CNT          NUMBER(10,5);   -- 공제일수
   C_INPUT_AMT         NUMBER(30,9);   -- 
   C_DELAYRATE         NUMBER(30,9);
   C_DELAYCUT          VARCHAR2(1);
   C_DELAYUNIT         VARCHAR2(1);
   C_STARTDATE         VARCHAR2(8);
   C_ENDDATE           VARCHAR2(8);
   C_DISCNTRATE        NUMBER(30,9);
   C_DISCNTCUT         VARCHAR2(1);
   C_DISCNTUNIT        VARCHAR2(1);
   C_COMP_UNIT         INTEGER;
   C_PERPECTTAG        VARCHAR2(1); -- 입금완료구분
   C_VAT_YN            VARCHAR2(1); -- 부가세여부
   C_DELAY_TAG         VARCHAR2(1);
   C_DC_YN             VARCHAR2(1);
   C_AC_YN             VARCHAR2(1);
   C_SYSDT             VARCHAR(14);
   C_DAYMONTH          VARCHAR2(1); --연체일월구분
   C_TEMP__AMT         NUMBER(30,9);

   C_FIXRATE_TAG       VARCHAR2(1);   -- 고정연체이율구분
   C_FIXRATE_DAY       NUMBER(3);     -- 고정기간일수
   C_FIXRATE           FLOAT;         -- 기간이내연체이율
   C_FIXRATE2          FLOAT;         -- 기간이후연체이율

   C_TEMPDT            VARCHAR2(8);

   M_COUNTS            VARCHAR2(2);
   M_ADT               VARCHAR2(8);
   M_FRDT              VARCHAR2(8);
   M_TODT              VARCHAR2(8);
   M_DAY               NUMBER(3);
   M_RENT              NUMBER(13);
   M_SAMT              NUMBER(13);
   M_VAMT              NUMBER(13);
   M_IAMT              NUMBER(13);
   M_VATYN             VARCHAR2(1);

   Wk_errmsg           VARCHAR2(500);              -- Error Message Edit
   Wk_errflag          INTEGER        DEFAULT 0;   -- Process Error Code
   e_msg               VARCHAR2(100);
   UserErr         EXCEPTION;                  -- SELECT Data Not Found

BEGIN
   C_SYSDT := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   BEGIN
      DELETE HD_RENT_RENT_INCOME_TEMP
       WHERE SEQ_NUM   = ad_seq_num
         AND CUST_CODE = as_cust
         AND SEQ       = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'HD_RENT_RENT_INCOME_TEMP : DELETE.');
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      DELETE HD_RENT_RENT_AGREE_TEMP
       WHERE SEQ_NUM   = ad_seq_num
         AND CUST_CODE = as_cust
         AND SEQ       = ai_seq;
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, sqlcode || ':' || 'HD_RENT_RENT_AGREE_TEMP : DELETE.');
              ROLLBACK;
              RETURN;
   END;

   BEGIN
      -- 약정사항을 복사한다.
      INSERT INTO HD_RENT_RENT_AGREE_TEMP
                ( SEQ_NUM,       CUST_CODE,   SEQ,         TERM_CHG_SEQ,
                  COUNTS,        AGREE_DATE,  AGREE_SDATE, AGREE_EDATE,
                  AGREE_DAYS,    RENT_AMT,    VAT_YN,      RENT_SUPPLY,
                  RENT_VAT,      RENT_INS,    PERPECT_TAG, RECEIPT_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID, CHG_DATE,
                  SLIP_DATE,     SLIP_SEQ)
           SELECT ad_seq_num,    CUST_CODE,   SEQ,         TERM_CHG_SEQ,
                  COUNTS,        AGREE_DATE,  AGREE_SDATE, AGREE_EDATE,
                  AGREE_DAYS,    RENT_AMT,    VAT_YN,      RENT_SUPPLY,
                  RENT_VAT,      RENT_INS,    PERPECT_TAG, RECEIPT_AMT,
                  INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID, CHG_DATE,
                  SLIP_DATE,     SLIP_SEQ
             FROM HD_RENT_RENT_AGREE
            WHERE CUST_CODE = as_cust
              AND SEQ       = ai_seq;

      -- 입금사항을 복사한다.
      INSERT INTO HD_RENT_RENT_INCOME_TEMP
                ( SEQ_NUM,       CUST_CODE,        SEQ,           TERM_CHG_SEQ,
                  COUNTS,        TIMES,            DEPT_CODE,     HOUSETAG,
                  IN_DATE,       IN_SEQ,           DEPOSIT_NO,    RECEIPT_DATE,
                  RECEIPT_AMT,   RECEIPT_SUPPLY,   RECEIPT_VAT,   RECEIPT_INS,
                  DELAY_DAYS,    DELAY_AMT,        DISCNT_DAYS,   DISCNT_AMT,
                  REALINCOM_AMT, REALINCOM_SUPPLY, REALINCOM_VAT, REALINCOM_INS,
                  BANK_CODE,     BANK_NAME,        PAY_TAG,       INCOM_TYPE,
                  MOD_YN,        REAL_PAY_TAG,     SLIP_DATE,     SLIP_SEQ,
                  TAX_DATE,      TAX_SEQ,          SLIP_TYPE,     CALC_YN,
                  INPUT_DUTY_ID, INPUT_DATE,       CHG_DUTY_ID,   CHG_DATE,
                  REMARK,
                  OUT_DT,        OUT_TM,           OUT_SEQ,       OUT_BANK,
                  OUT_CUSTNO )
           SELECT ad_seq_num,    CUST_CODE,        SEQ,           TERM_CHG_SEQ,
                  COUNTS,        TIMES,            DEPT_CODE,     HOUSETAG,
                  IN_DATE,       IN_SEQ,           DEPOSIT_NO,    RECEIPT_DATE,
                  RECEIPT_AMT,   RECEIPT_SUPPLY,   RECEIPT_VAT,   RECEIPT_INS,
                  DELAY_DAYS,    DELAY_AMT,        DISCNT_DAYS,   DISCNT_AMT,
                  REALINCOM_AMT, REALINCOM_SUPPLY, REALINCOM_VAT, REALINCOM_INS,
                  BANK_CODE,     BANK_NAME,        PAY_TAG,       INCOM_TYPE,
                  MOD_YN,        REAL_PAY_TAG,     SLIP_DATE,     SLIP_SEQ,
                  TAX_DATE,      TAX_SEQ,          SLIP_TYPE,     'N',
                  INPUT_DUTY_ID, INPUT_DATE,       CHG_DUTY_ID,   CHG_DATE,
                  REMARK,
                  OUT_DT,        OUT_TM,           OUT_SEQ,       OUT_BANK,
                  OUT_CUSTNO
             FROM HD_RENT_RENT_INCOME
            WHERE CUST_CODE = as_cust
              AND SEQ       = ai_seq ;

      c_input_amt := ad_amt;
      -----------------------------------------------------
      -- 사업코드, 분양구분
      SELECT DEPT_CODE,              HOUSETAG,            daymonth_tag,
             NVL(FIXRATE_TAG, '2'),  NVL(FIXRATE_DAY, 0), NVL(FIXRATE, 0),  NVL(FIXRATE2, 0)
        INTO C_DEPT_CODE,            C_HOUSETAG,          C_DAYMONTH,
             C_FIXRATE_TAG,          C_FIXRATE_DAY,       C_FIXRATE,        C_FIXRATE2
        FROM HD_RENT_MASTER
       WHERE CUST_CODE = as_cust
         AND SEQ       = ai_seq;

      -----------------------------------------------------
      -- 마지막 약정차수
      SELECT MAX(TERM_CHG_SEQ)
        INTO c_max_term
        FROM HD_RENT_RENT_AGREE_TEMP
       WHERE SEQ_NUM      = ad_seq_num
         AND CUST_CODE    = as_cust
         AND SEQ          = ai_seq;
      SELECT MAX(COUNTS)
        INTO c_max_counts
        FROM HD_RENT_RENT_AGREE_TEMP
       WHERE SEQ_NUM      = ad_seq_num
         AND CUST_CODE    = as_cust
         AND SEQ          = ai_seq
         AND TERM_CHG_SEQ = c_max_term;
      -----------------------------------------------------
      -- 미납입된 마지막 약정차수 및 회수를 구한다.
      SELECT COUNT(*)
        INTO c_cnt
        FROM HD_RENT_RENT_AGREE_TEMP
       WHERE SEQ_NUM     = ad_seq_num
         AND CUST_CODE   = as_cust
         AND SEQ         = ai_seq
         AND PERPECT_TAG = 'N';

      IF c_cnt > 0 THEN
         SELECT MIN(TERM_CHG_SEQ)
           INTO c_last_term
           FROM HD_RENT_RENT_AGREE_TEMP
          WHERE SEQ_NUM     = ad_seq_num
            AND CUST_CODE   = as_cust
            AND SEQ         = ai_seq
            AND PERPECT_TAG = 'N';
         SELECT MIN(COUNTS)
           INTO c_last_counts
           FROM HD_RENT_RENT_AGREE_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND PERPECT_TAG  = 'N';

         SELECT NVL(MAX(TIMES), 0)
           INTO c_last_times
           FROM HD_RENT_RENT_INCOME_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND COUNTS       = c_last_counts;
      ELSE
         IF ad_amt = 99999999999 THEN
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT COUNT(*)
           INTO c_cnt
           FROM HD_RENT_RENT_AGREE_TEMP
          WHERE SEQ_NUM   = ad_seq_num
            AND CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         IF c_cnt < 1 THEN
            Wk_errflag := '-20001';
            e_msg  := ' 약정차수가 없습니다.==>' || as_cust || '-' || TO_CHAR(ai_seq);
            GOTO EXIT_ROUTINE;
         END IF;

         SELECT MAX(TERM_CHG_SEQ)
           INTO c_last_term
           FROM HD_RENT_RENT_AGREE_TEMP
          WHERE SEQ_NUM   = ad_seq_num
            AND CUST_CODE = as_cust
            AND SEQ       = ai_seq;
         SELECT MAX(COUNTS)
           INTO c_last_counts
           FROM HD_RENT_RENT_AGREE_TEMP
          WHERE SEQ_NUM   = ad_seq_num
            AND CUST_CODE = as_cust
            AND SEQ       = ai_seq
            AND TERM_CHG_SEQ = c_last_term;

         SELECT NVL(MAX(TIMES), 0)
           INTO c_last_times
           FROM HD_RENT_RENT_INCOME_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND COUNTS       = c_last_counts;
      END IF;

      c_last_times := c_last_times + 1;

      -----------------------------------------------------
      -- LOOP 시작
      LOOP
         IF c_last_term > ai_term OR (c_last_term = ai_term AND c_last_counts > as_counts) THEN
            EXIT;
         END IF;

         -- 일수,약정금액, 할인계산여부, 연체계산여부를 구한다
         SELECT NVL((TO_DATE(AGREE_DATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD')) * -1, 0),
                NVL(RENT_AMT, 0), RENT_SUPPLY, RENT_VAT, RENT_INS, AGREE_DATE, VAT_YN,
                AGREE_SDATE,     AGREE_EDATE
           INTO C_DAYS, C_BUNAMT, C_A_SAMT, C_A_VAMT, C_A_IAMT, C_AGREEDATE,  C_VAT_YN,
                C_A_FRDT,        C_A_TODT
           FROM HD_RENT_RENT_AGREE_TEMP
          WHERE SEQ_NUM      = ad_seq_num
            AND CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = c_last_term
            AND COUNTS       = c_last_counts;

         SELECT AGREE_MM_TAG, AGREE_DD, RENT_SDATE, RENT_EDATE
           INTO C_A_MMTAG,    C_A_DD,   C_A_RSDT,   C_A_REDT
           FROM HD_RENT_DETAIL_TERM
          WHERE CUST_CODE    = as_cust
            AND SEQ          = ai_seq
            AND TERM_CHG_SEQ = C_LAST_TERM;

         C_DC_YN := 'N'; --할인은 무조건 없다
         C_AC_YN := 'Y'; --연체는 무조건 있다

         IF C_DAYS > 0 THEN -- 연체료일 경우
            -- 휴일적용여부를 체크한다.
            C_TEMPDT := F_HD_GET_HOLIDAY(C_DEPT_CODE, C_HOUSETAG, C_AGREEDATE, 'N');
            IF C_TEMPDT >= as_dt THEN
               C_DAYS := 0;
            END IF;
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS), 0) INTO c_cnt, C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = c_dept_code
--               AND HOUSETAG  = c_housetag
--               AND AD_TAG    = '1'
--               AND RATE_TAG  = '2'
--               AND HOLIDAY   = C_AGREEDATE;
--            IF c_cnt > 0 THEN
--               IF C_DAYS <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
         ELSIF C_DAYS < 0 THEN -- 할인료일 경우
--            SELECT COUNT(*), NVL(MAX(GONG_DAYS), 0) INTO c_cnt, C_TEMP_CNT
--              FROM HD_REFER_HOLIDAY
--             WHERE DEPT_CODE = c_dept_code
--               AND HOUSETAG  = c_housetag
--               AND AD_TAG    = '2'
--               AND RATE_TAG  = '2'
--               AND HOLIDAY   = C_AGREEDATE;
--            IF c_cnt > 0 THEN
--               c_cnt := C_DAYS * -1;
--               IF c_cnt <= C_TEMP_CNT THEN
--                  C_DAYS := 0;
--               END IF;
--            END IF;
            C_DAYS := 0;
         END IF;

         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0), NVL(SUM(RECEIPT_SUPPLY), 0), NVL(SUM(RECEIPT_VAT), 0), NVL(SUM(RECEIPT_INS), 0) 
           INTO C_RECEIPTAMT,            C_RECEIPTSAMT,               C_RECEIPTVAMT,            C_RECEIPTIAMT
            FROM HD_RENT_RENT_INCOME_TEMP
           WHERE SEQ_NUM      = ad_seq_num
             AND CUST_CODE    = as_cust
             AND SEQ          = ai_seq
             AND TERM_CHG_SEQ = c_last_term
             AND COUNTS       = c_last_counts
             AND TIMES        < 90;
         -- 계산할 약정금액을 구한다(대상금액).
         C_WORK_AMT := C_BUNAMT - C_RECEIPTAMT;

         -----------------------------------------------------------------------------
         -- 일수가 0일경우 바로 입금처리, +일경우 연체료, -일경우 할인료를 계산한다.
         -----------------------------------------------------------------------------
         -- 계약금 약정만 있는경우에 loop 방지
         IF c_last_times > 89 THEN
            C_TEMP_AMT := c_input_amt;
            c_input_amt := 0;
            C_DELAY_DAY := 0;
            C_DISCOUNT_DAY := 0;
            C_DELAY_AMT    := 0;
            C_DISCOUNT_AMT := 0;
         ELSE
            IF (C_DAYS = 0) THEN
               IF C_WORK_AMT < c_input_amt THEN
                  C_TEMP_AMT   := C_WORK_AMT;
                  c_input_amt := c_input_amt - C_WORK_AMT;
               ELSE
                  C_TEMP_AMT   := c_input_amt;
                  c_input_amt := 0;
               END IF;
               C_DELAY_DAY    := 0;
               C_DISCOUNT_DAY := 0;
               C_DELAY_AMT    := 0;
               C_DISCOUNT_AMT := 0;
            ELSE
               ---------------------------------------------------------------------
               -- 연체일 경우
               ---------------------------------------------------------------------
               IF C_DAYS > 0 THEN 
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF C_AC_YN = 'Y' THEN
                     -- 납입대상금액계산
                     C_DELAY_DAY   := C_DAYS;
                     C_TEMP_RATE := 0;
                     IF C_DAYMONTH = '2' THEN
                        C_MONTHS := months_between(to_date(as_dt, 'YYYYMMDD'),to_date(C_AGREEDATE, 'YYYYMMDD'));
                     ELSE
                        C_MONTHS := to_date(as_dt, 'YYYYMMDD') - to_date(C_AGREEDATE, 'YYYYMMDD');
                     END IF;

                     OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                     LOOP
                        FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR%NOTFOUND;
                        IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                           C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF C_AGREEDATE >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                        ELSE
                           IF as_dt <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR;
                     C_TEMP_RATE := C_TEMP_RATE + 1;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;


                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE, C_DELAYCUT, C_DELAYUNIT, C_STARTDATE, C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                             CASE C_DELAYUNIT
                                WHEN '1' THEN 1
                                WHEN '2' THEN 10
                                WHEN '3' THEN 100
                                WHEN '4' THEN 1000
                                WHEN '5' THEN 10000
                                WHEN '6' THEN 100000
                             ELSE 1
                             END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
                                 C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
                                    C_DELAY_AMT := TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DELAY_AMT := ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           IF C_DELAYCUT = '1' THEN
                              C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DELAY_AMT := C_DELAY_AMT + ROUND(((C_WORK_AMT * C_TEMP_RATE) - C_WORK_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                     ELSE
                        OPEN DETAIL_CUR(C_AGREEDATE,C_MONTHS);
                        LOOP
                           FETCH DETAIL_CUR INTO C_DELAYRATE,C_DELAYCUT,C_DELAYUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DELAYUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE >= C_STARTDATE AND as_dt <= C_ENDDATE THEN
--@@                              C_TEMP_RATE := 1 + ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DELAY_DAY / 365 ) * ( C_DELAYRATE / 100 ) ;
                              IF C_DELAYCUT = '1' THEN
--@@                                 C_DELAY_AMT := TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DELAYCUT = '2' THEN
--@@                                    C_DELAY_AMT := TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DELAY_AMT := ROUND((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DELAY_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF C_AGREEDATE >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD') ,0);
                           ELSE
                              IF as_dt <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 + (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DELAYRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DELAYCUT = '1' THEN
--@@                              C_DELAY_AMT := C_DELAY_AMT + TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DELAYCUT = '2' THEN
--@@                                 C_DELAY_AMT := C_DELAY_AMT + TRUNC((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DELAY_AMT := C_DELAY_AMT + ROUND((c_input_amt - C_TEMP_AMT) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DELAY_AMT := C_DELAY_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR;
                        C_TEMP_AMT   := c_input_amt - C_DELAY_AMT;
                        c_input_amt := 0;
                     END IF;
                  ELSE
                     IF C_DELAY_TAG = 'Y' THEN -- 연체료 직접 입력이면
                        IF (C_WORK_AMT + C_DELAY_AMT) < c_input_amt THEN
                           C_TEMP_AMT  := C_WORK_AMT;
                           c_input_amt := c_input_amt - (C_WORK_AMT + C_DELAY_AMT);
                        ELSE
                           C_TEMP_AMT   := c_input_amt;
                           c_input_amt := 0;
                        END IF;
                     ELSE
                        IF C_WORK_AMT < c_input_amt THEN
                           C_TEMP_AMT   := C_WORK_AMT;
                           c_input_amt := c_input_amt - C_WORK_AMT;
                        ELSE
                           C_TEMP_AMT   := c_input_amt;
                           c_input_amt := 0;
                        END IF;
                     END IF;
                  END IF;
               ELSE
                  ------------------------------------------------------------
                  -- 할인료 계산
                  ------------------------------------------------------------
                  C_DELAY_DAY    := 0;
                  C_DISCOUNT_DAY := 0;
                  C_DELAY_AMT    := 0;
                  C_DISCOUNT_AMT := 0;
                  IF C_DC_YN = 'Y' THEN  -- 할인료계산
                     C_DISCOUNT_DAY   := C_DAYS * -1;
                     C_TEMP_RATE := 0;
                     -- 납입대상금액계산
                     OPEN DETAIL_CUR1(C_AGREEDATE);
                     LOOP
                        FETCH DETAIL_CUR1 INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                        EXIT WHEN DETAIL_CUR1%NOTFOUND;
                        IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                           C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                           EXIT;
                        END IF;
                        IF as_dt >= C_STARTDATE THEN
                           C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                        ELSE
                           IF C_AGREEDATE <= C_ENDDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           ELSE
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                           END IF;
                        END IF;
                        C_TEMP_RATE := C_TEMP_RATE + (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                     END LOOP;
                     CLOSE DETAIL_CUR1;
                     C_TEMP_RATE := 1 - C_TEMP_RATE ;
                     IF C_TEMP_RATE <> 0 THEN
                        C_TEMP_AMT := c_input_amt / C_TEMP_RATE; -- 납입대상금액
                     ELSE
                        C_TEMP_AMT := 0;
                     END IF;
                     IF C_WORK_AMT <= C_TEMP_AMT THEN
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
                                 C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
                                    C_DISCOUNT_AMT := TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
                                    C_DISCOUNT_AMT := ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           IF C_DISCNTCUT = '1' THEN
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_WORK_AMT - (C_WORK_AMT * C_TEMP_RATE)) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        C_TEMP_AMT := C_WORK_AMT;
                        c_input_amt := c_input_amt - (C_WORK_AMT - C_DISCOUNT_AMT);
                     ELSE
                        OPEN DETAIL_CUR1(C_AGREEDATE);
                        LOOP
                           FETCH DETAIL_CUR1 INTO C_DISCNTRATE,C_DISCNTCUT,C_DISCNTUNIT,C_STARTDATE,C_ENDDATE;
                           EXIT WHEN DETAIL_CUR1%NOTFOUND;
                           C_COMP_UNIT :=
                              CASE C_DISCNTUNIT
                                 WHEN '1' THEN 1
                                 WHEN '2' THEN 10
                                 WHEN '3' THEN 100
                                 WHEN '4' THEN 1000
                                 WHEN '5' THEN 10000
                                 WHEN '6' THEN 100000
                              ELSE 1
                              END;
                           IF C_AGREEDATE <= C_ENDDATE AND as_dt >= C_STARTDATE THEN
--@@                              C_TEMP_RATE := 1 - ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
                              C_TEMP_RATE := ( C_DISCOUNT_DAY / 365 ) * ( C_DISCNTRATE / 100 ) ;
                              IF C_DISCNTCUT = '1' THEN
--@@                                 C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              ELSE
                                 IF C_DISCNTCUT = '2' THEN
--@@                                    C_DISCOUNT_AMT := TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 ELSE
--@@                                    C_DISCOUNT_AMT := ROUND((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                    C_DISCOUNT_AMT := round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 END IF;
                              END IF;
                              EXIT;
                           END IF;
                           IF as_dt >= C_STARTDATE THEN
                              C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(as_dt, 'YYYYMMDD') ,0);
                           ELSE
                              IF C_AGREEDATE <= C_ENDDATE THEN
                                 C_TEMP_CNT := NVL(TO_DATE(C_AGREEDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              ELSE
                                 C_TEMP_CNT := NVL(TO_DATE(C_ENDDATE, 'YYYYMMDD') - TO_DATE(C_STARTDATE, 'YYYYMMDD') + 1,0);
                              END IF;
                           END IF;
--@@                           C_TEMP_RATE := 1 - (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
                           C_TEMP_RATE := (C_TEMP_CNT / 365) * (C_DISCNTRATE / 100);
--@@                           IF C_TEMP_RATE <> 0 THEN
--@@                              C_TEMP_AMT := c_input_amt / C_TEMP_RATE;
--@@                           ELSE
--@@                              C_TEMP_AMT := 0;
--@@                           END IF;
                           IF C_DISCNTCUT = '1' THEN
--@@                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                           ELSE
                              IF C_DISCNTCUT = '2' THEN
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + TRUNC((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + trunc((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT + 0.9,0) * C_COMP_UNIT;
                              ELSE
--@@                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + ROUND((C_TEMP_AMT - c_input_amt) / C_COMP_UNIT,0) * C_COMP_UNIT;
                                 C_DISCOUNT_AMT := C_DISCOUNT_AMT + round((C_TEMP_AMT * C_TEMP_RATE) / C_COMP_UNIT,0) * C_COMP_UNIT;
                              END IF;
                           END IF;
                        END LOOP;
                        CLOSE DETAIL_CUR1;
                        C_TEMP_AMT   := c_input_amt + C_DISCOUNT_AMT;
                        c_input_amt := 0;
                     END IF;
                  ELSE
                     IF C_WORK_AMT < c_input_amt THEN
                        C_TEMP_AMT   := C_WORK_AMT;
                        c_input_amt := c_input_amt - C_WORK_AMT;
                     ELSE
                        C_TEMP_AMT   := c_input_amt;
                        c_input_amt := 0;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         -----------------------------------------------------------------------------
         IF C_WORK_AMT = C_TEMP_AMT THEN  -- 완납일경우 (약정 - 납입누계)
            C_TEMP_SAMT  := C_A_SAMT - C_RECEIPTSAMT;
            C_TEMP_VAMT  := C_A_VAMT - C_RECEIPTVAMT;
            C_TEMP_IAMT  := C_A_IAMT - C_RECEIPTIAMT;

            C_R_RECEIPTAMT := C_TEMP_AMT;   -- 실납입금액
            C_R_SAMT       := C_TEMP_SAMT;
            C_R_VAMT       := C_TEMP_VAMT;
            C_R_IAMT       := C_TEMP_IAMT;
         ELSE
            IF C_BUNAMT <> 0 THEN
               C_TEMP_SAMT := TRUNC(((C_A_SAMT / C_BUNAMT) * C_TEMP_AMT) / 10) * 10;
               IF C_A_VAMT = 0 THEN
                  C_TEMP_VAMT := 0;
               ELSE
                  C_TEMP_VAMT := C_TEMP_SAMT * 0.1;
               END IF;
               C_TEMP_IAMT := C_TEMP_AMT - C_TEMP_SAMT - C_TEMP_VAMT;
            ELSE
               C_TEMP_SAMT := 0;
               C_TEMP_VAMT := 0;
               C_TEMP_IAMT := 0;
            END IF;

            C_TEMP__AMT := ((C_RECEIPTIAMT + C_TEMP_IAMT) - C_A_IAMT);
            IF C_TEMP__AMT > 0 THEN
               C_TEMP_IAMT := C_A_IAMT    - C_RECEIPTIAMT;
               C_TEMP_SAMT := C_TEMP_SAMT + C_TEMP__AMT;
               
               C_TEMP__AMT := ((C_RECEIPTSAMT + C_TEMP_SAMT) - C_A_SAMT);
               IF C_TEMP__AMT > 0 THEN
                  C_TEMP_SAMT  := C_A_SAMT - C_RECEIPTSAMT;
                  C_TEMP_VAMT  := C_TEMP_VAMT + C_TEMP__AMT;
               END IF;
            END IF;

            C_R_SAMT := C_TEMP_SAMT;
            C_R_VAMT := C_TEMP_VAMT;
            C_R_IAMT := C_TEMP_IAMT;
         END IF;

         -- 할인료가 있을 경우만 실납입금액 공급가, 부가세, 보험료를 별도로 계산한다
         IF C_DISCOUNT_AMT <> 0 THEN
	         C_R_RECEIPTAMT := C_TEMP_AMT - C_DISCOUNT_AMT; -- 실납입금액 계산용(연체료를 포함 안한다.)
	         IF C_BUNAMT <> 0 THEN
                 C_R_SAMT := TRUNC(((C_A_SAMT / C_BUNAMT) * C_R_RECEIPTAMT) / 10) * 10;
                 IF C_A_VAMT = 0 THEN
                    C_R_VAMT := 0;
                 ELSE
                    C_R_VAMT := C_R_SAMT * 0.1;
                 END IF;
                 C_R_IAMT := C_R_RECEIPTAMT - C_R_SAMT - C_R_VAMT;
 	         ELSE
	            C_R_SAMT := 0;
	            C_R_VAMT := 0;
	            C_R_IAMT := 0;
	         END IF;
	     END IF;    
         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

--         C_R_RECEIPTAMT := C_TEMP_AMT + C_DELAY_AMT - C_DISCOUNT_AMT; -- 실납입금액

         C_DAYS := TO_DATE(as_dt, 'YYYYMMDD') - TO_DATE(C_AGREEDATE, 'YYYYMMDD');
         IF C_DAYS = 0 THEN
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := 0;
         ELSIF C_DAYS > 0 THEN
            C_DELAY_DAY    := C_DAYS;
            C_DISCOUNT_DAY := 0;
         ELSE
            C_DELAY_DAY    := 0;
            C_DISCOUNT_DAY := C_DAYS * -1;
         END IF;

         -----------------------------------------------------------------------------
         BEGIN
            INSERT INTO HD_RENT_RENT_INCOME_TEMP
                      (SEQ_NUM,
                       CUST_CODE,      SEQ,              TERM_CHG_SEQ,   COUNTS,         TIMES,
                       DEPT_CODE,      HOUSETAG,         IN_DATE,        IN_SEQ,         DEPOSIT_NO,
                       RECEIPT_DATE,   RECEIPT_AMT,      RECEIPT_SUPPLY, RECEIPT_VAT,    RECEIPT_INS, 
                       DELAY_DAYS,     DELAY_AMT,        DISCNT_DAYS,    DISCNT_AMT,
                       REALINCOM_AMT,  REALINCOM_SUPPLY, REALINCOM_VAT,  REALINCOM_INS, 
                       BANK_CODE,      BANK_NAME,
                       PAY_TAG,        INCOM_TYPE,       MOD_YN,         REAL_PAY_TAG,
                       SLIP_DATE,      SLIP_SEQ,         SLIP_TYPE,
                       TAX_DATE,       TAX_SEQ,          CALC_YN,
                       INPUT_DUTY_ID,  INPUT_DATE,       CHG_DUTY_ID,    CHG_DATE)
               VALUES (ad_seq_num,
                       as_cust,        ai_seq,           c_last_term,    c_last_counts,  c_last_times,
                       C_DEPT_CODE,    C_HOUSETAG,       as_dt,          0,              '예정조회',
                       as_dt,          C_TEMP_AMT,       C_TEMP_SAMT,    C_TEMP_VAMT,    C_TEMP_IAMT,
                       C_DELAY_DAY,    C_DELAY_AMT,      C_DISCOUNT_DAY, C_DISCOUNT_AMT,
                       C_R_RECEIPTAMT, C_R_SAMT,         C_R_VAMT,       C_R_IAMT,
                       ' ',            ' ',
                       'X',            'X',              'N',            'N',
                       '',             0,                '',
                       '',             0,                'Y',
                       NULL,           C_SYSDT,          '',             '');
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, '#02 UPDATE ERROR HD_RENT_RENT_INCOME_TEMP' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;
         -- 기납입금액누계를 구한다.
         SELECT NVL(SUM(RECEIPT_AMT), 0)
           INTO C_RECEIPTAMT
            FROM HD_RENT_RENT_INCOME_TEMP
           WHERE SEQ_NUM      = ad_seq_num
             AND CUST_CODE    = as_cust
             AND SEQ          = ai_seq
             AND TERM_CHG_SEQ = c_last_term
             AND COUNTS       = c_last_counts
             AND TIMES        < 90;
         -- 입금완료구분값을 구한다.
         IF C_BUNAMT <= C_RECEIPTAMT THEN BEGIN
            C_PERPECTTAG := 'Y';
            C_RECEIPTAMT := C_BUNAMT;
         END; ELSE
            C_PERPECTTAG := 'N';
         END IF;
         -- 약정사항에 입금완료구분값과 입금합계값을 넣어준다.
         UPDATE HD_RENT_RENT_AGREE_TEMP
            SET PERPECT_TAG = C_PERPECTTAG,
                RECEIPT_AMT = C_RECEIPTAMT
           WHERE SEQ_NUM      = ad_seq_num
             AND CUST_CODE    = as_cust
             AND SEQ          = ai_seq
             AND TERM_CHG_SEQ = c_last_term
             AND COUNTS       = c_last_counts;
         -----------------------------------------------------------------------------
         -----------------------------------------------------------------------------
         -- 납입금액이 0이면 종료한다.
         IF C_INPUT_AMT = 0 THEN
            EXIT;
         END IF;
         -- 납입금액이 0가 아니면 다음차수를 구하여 나머지금액처리를 한다.  &&&&

         IF c_last_term = c_max_term and c_last_counts = c_max_counts THEN
            IF C_PERPECTTAG = 'Y' and ad_amt = 99999999999 THEN
               EXIT;
            END IF;
            c_last_times := 90;
         ELSE
            SELECT COUNT(*)
              INTO c_cnt
              FROM HD_RENT_RENT_AGREE_TEMP
             WHERE SEQ_NUM      = ad_seq_num
               AND CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = c_last_term
               AND COUNTS       > c_last_counts
               AND PERPECT_TAG  = 'N';

            IF c_cnt < 1 THEN
               SELECT MIN(TERM_CHG_SEQ)
                 INTO c_last_term
                 FROM HD_RENT_RENT_AGREE_TEMP
                WHERE SEQ_NUM      = ad_seq_num
                  AND CUST_CODE    = as_cust
                  AND SEQ          = ai_seq
                  AND TERM_CHG_SEQ > c_last_term
                  AND PERPECT_TAG  = 'N';
               SELECT MIN(COUNTS)
                 INTO c_last_counts
                 FROM HD_RENT_RENT_AGREE_TEMP
                WHERE SEQ_NUM      = ad_seq_num
                  AND CUST_CODE    = as_cust
                  AND SEQ          = ai_seq
                  AND TERM_CHG_SEQ = c_last_term
                  AND PERPECT_TAG  = 'N';
            ELSE
               SELECT MIN(COUNTS)
                 INTO c_last_counts
                 FROM HD_RENT_RENT_AGREE_TEMP
                WHERE SEQ_NUM      = ad_seq_num
                  AND CUST_CODE    = as_cust
                  AND SEQ          = ai_seq
                  AND TERM_CHG_SEQ = c_last_term
                  AND COUNTS       > c_last_counts
                  AND PERPECT_TAG  = 'N';
            END IF;

            SELECT NVL(MAX(TIMES), 0) + 1
              INTO c_last_times
              FROM HD_RENT_RENT_INCOME_TEMP
             WHERE SEQ_NUM      = ad_seq_num
               AND CUST_CODE    = as_cust
               AND SEQ          = ai_seq
               AND TERM_CHG_SEQ = c_last_term
               AND COUNTS       = c_last_counts;
         END IF;
         C_AC_YN  := 'Y';
         C_DC_YN  := 'N';
      END LOOP;
   END;
   COMMIT WORK;
   -- *****************************************************************************
   -- PROCESS ENDDING ... !
   -- *****************************************************************************
   <<EXIT_ROUTINE>>
   -- ENDING...[0.1] CURSOR CLOSE 재 확인 처리 !
   IF Wk_errflag = 0 THEN
      Wk_errmsg  := '';                        -- 사용자 정의 Error Message
      Wk_errflag := 0;                         -- 사용자 정의 Error Code
   ELSE
      Wk_errmsg := RTRIM(e_msg) || '/>';
      RAISE UserErr;
   END IF;
   EXCEPTION
      WHEN UserErr THEN
       RAISE_APPLICATION_ERROR(Wk_errflag, Wk_errmsg);
END proc_hd_rent_rent_income_plan;
/


DROP PROCEDURE PROC_HD_RENT_SLIP_BATCH;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_SLIP_BATCH" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --집계일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt          VARCHAR2(14);
v_cnt            NUMBER(10);
v_sliptp         VARCHAR2(5);

/*---------------------------------------------------------------------------*/
v_taxcomp        VARCHAR2(6);
v_company        VARCHAR2(6);
v_deptnm         VARCHAR2(150);
v_htagnm         VARCHAR2(150);

v_WorkNo         NUMBER(10);
v_DeptNo         NUMBER(10);
v_WorkSeq        NUMBER(10);
v_slipamt        NUMBER(15);
v_slipamt1       NUMBER(15);
v_slipamt2       NUMBER(15);

v_Remark         VARCHAR2(500);
v_RemarkH        VARCHAR2(500);
v_RemarkD        VARCHAR2(500);

v_vatamt         NUMBER(15);
v_ecode          VARCHAR2(2);
v_edate          VARCHAR2(8);
v_ekind          VARCHAR2(3);

/* Cursor -------------------------------------------------------------------*/
c_cust          VARCHAR2(20);
c_seq           NUMBER(5);
c_custnm        VARCHAR2(50);
c_deposit       VARCHAR2(30);
c_deposithd     VARCHAR2(30);
c_bank          VARCHAR2(8);
c_banknm        VARCHAR2(30);
c_bno           VARCHAR2(10);
c_hno           VARCHAR2(10);
c_amt           NUMBER(15);
c_samt          NUMBER(15);
c_vamt          NUMBER(15);
c_iamt          NUMBER(15);

c_svYamt        NUMBER(15);
c_svNamt        NUMBER(15);

/* 전표 계정 및 대표 고객 ---------------------------------------------------*/
z_cust           VARCHAR2(20);
z_custnm         VARCHAR2(30);

z_1c          VARCHAR2(10); /* 22103010    임대보증금 */
z_1d          VARCHAR2(10); /* 11101300    보통예금 */
z_2c          VARCHAR2(10); /* 11101300    보통예금 */
z_2d          VARCHAR2(10); /* 22103010    임대보증금 */
z_3c          VARCHAR2(10); /* 43115010    임대료 */
z_4c          VARCHAR2(10); /* 43103010    수입위약배상금 */

/* 수지 계정 -----------------------------------------------------------------*/
s_1c          VARCHAR2(10);
s_1d          VARCHAR2(10);
s_2c          VARCHAR2(10);
s_2d          VARCHAR2(10);
s_3c          VARCHAR2(10);
s_4c          VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*보증금 입금 */
CURSOR CURGIN(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT X.CUST_CODE,     X.SEQ, X.CUSTNM,
       X.BNO,          X.HNO,
       Y.OUTDEPOSITNO, X.DEPOSIT_NO,
       X.BANK_CODE,    X.BANK_NAME,
       X.AMT
  FROM (SELECT '' AS CUST_CODE, 0 AS SEQ, '' AS CUSTNM, A.DEPOSIT_NO,
               '' AS BNO,
               '' AS HNO,
               MAX(A.BANK_CODE) AS BANK_CODE,
               MAX(A.BANK_NAME) AS BANK_NAME,
               SUM(A.REALINCOM_AMT) AS AMT
          FROM HD_RENT_GURT_INCOME A,
               HD_RENT_MASTER B
         WHERE A.CUST_CODE    = B.CUST_CODE
           AND A.SEQ          = B.SEQ
           AND B.DEPT_CODE    = a_dept
           AND B.HOUSETAG     = a_htag
           AND A.RECEIPT_DATE = a_dt
           AND A.INCOM_TYPE   IN ('1')
           AND ((B.CHANGE_TAG  = '1' AND B.CONT_DATE   <= a_dt) OR
                (B.CHANGE_TAG <> '1' AND B.CHANGE_DATE  > a_dt))
           AND B.LAST_CHANGE_DATE <= a_dt
         GROUP BY A.DEPOSIT_NO
       ) X,
       HD_CODE_DEPOSIT Y
 WHERE Y.DEPT_CODE  = a_dept
   AND Y.HOUSETAG   = a_htag
   AND X.DEPOSIT_NO = Y.DEPOSIT_NO;

/*---------------------------------------------------------------------------*/
/*임대료 입금 */
CURSOR CURRIN(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT X.CUST_CODE,    X.SEQ,  X.CUSTNM, 
       X.BNO,          X.HNO,
       Y.OUTDEPOSITNO, X.DEPOSIT_NO,
       X.BANK_CODE,    X.BANK_NAME,
       X.AMT,          X.SAMT,
       X.VAMT,         X.IAMT,
       X.S_VYAMT,      S_VNAMT
  FROM (SELECT '' AS CUST_CODE, 0 AS SEQ, '' AS CUSTNM, A.DEPOSIT_NO,
               '' AS BNO,
               '' AS HNO,
               MAX(A.BANK_CODE) AS BANK_CODE,
               MAX(A.BANK_NAME) AS BANK_NAME,
               SUM(A.REALINCOM_AMT) AS AMT,
               SUM(A.REALINCOM_SUPPLY) AS SAMT,
               SUM(A.REALINCOM_VAT) AS VAMT,
               SUM(A.REALINCOM_INS) AS IAMT,
               SUM(CASE WHEN A.REALINCOM_VAT <> 0 THEN A.REALINCOM_SUPPLY ELSE 0 END) AS S_VYAMT,
               SUM(CASE WHEN A.REALINCOM_VAT  = 0 THEN A.REALINCOM_SUPPLY ELSE 0 END) AS S_VNAMT
          FROM HD_RENT_RENT_INCOME A,
               HD_RENT_MASTER B
         WHERE A.CUST_CODE    = B.CUST_CODE
           AND A.SEQ          = B.SEQ
           AND B.DEPT_CODE    = a_dept
           AND B.HOUSETAG     = a_htag
           AND A.RECEIPT_DATE = a_dt
           AND A.INCOM_TYPE   IN ('1')
           AND ((B.CHANGE_TAG  = '1' AND B.CONT_DATE   <= a_dt) OR
                (B.CHANGE_TAG <> '1' AND B.CHANGE_DATE  > a_dt))
           AND B.LAST_CHANGE_DATE <= a_dt
         GROUP BY A.DEPOSIT_NO
       ) X,
       HD_CODE_DEPOSIT Y
 WHERE Y.DEPT_CODE  = a_dept
   AND Y.HOUSETAG   = a_htag
   AND X.DEPOSIT_NO = Y.DEPOSIT_NO;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;

--   v_cnt := 0;
--   SELECT COUNT(*)
--     INTO v_cnt
--     FROM HD_CODE_DEPT A,
--          TM_ENDX_HIS_DAY B
--    WHERE A.COMPANY_CODE = B.COMPANY_CODE
--      AND A.DEPT_CODE = as_dept
--      AND B.END_DAY   = as_dt
--      AND B.END_YN    = 'Y';
--   IF v_cnt > 0 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '해당집계일은 전표마감 되었습니다');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

/*---------------------------------------------------------------------------*/
   z_cust := '9999999999999';
   SELECT NVL(MAX(CUST_NAME), '분양대표거래처')
     INTO z_custnm
     FROM SM_CODE_CUST
    WHERE CUST_CODE = z_cust;

   /* --- 계정셋팅 --- */
   SELECT NVL(MAX(Z1C), 'ERR'), NVL(MAX(Z1D), 'ERR'), NVL(MAX(Z2C), 'ERR'), NVL(MAX(Z2D), 'ERR'),
          NVL(MAX(Z3C), 'ERR'), NVL(MAX(Z4C), 'ERR'),
          NVL(MAX(S1C), ''),    NVL(MAX(S1D), ''),    NVL(MAX(S2C), ''),    NVL(MAX(S2D), ''),
          NVL(MAX(S3C), ''),    NVL(MAX(S4C), '')

     INTO z_1c, z_1d, z_2c, z_2d, z_3c, z_4c,
          s_1c, s_1d, s_2c, s_2d, s_3c, s_4c

     FROM (SELECT DECODE(JCODE, '1C', JACNTCODE, '') AS Z1C, DECODE(JCODE, '1D', JACNTCODE, '') AS Z1D,
                  DECODE(JCODE, '2C', JACNTCODE, '') AS Z2C, DECODE(JCODE, '2D', JACNTCODE, '') AS Z2D,
                  DECODE(JCODE, '3C', JACNTCODE, '') AS Z3C, DECODE(JCODE, '4C', JACNTCODE, '') AS Z4C,
                  DECODE(JCODE, '1C', DETAILCODE, '') AS S1C, DECODE(JCODE, '1D', DETAILCODE, '') AS S1D,
                  DECODE(JCODE, '2C', DETAILCODE, '') AS S2C, DECODE(JCODE, '2D', DETAILCODE, '') AS S2D,
                  DECODE(JCODE, '3C', DETAILCODE, '') AS S3C, DECODE(JCODE, '4C', DETAILCODE, '') AS S4C
             FROM HD_CODE_ACNT
            WHERE DEPT_CODE = 'ZZZZZZZZZZZZ' 
          );
   IF 'ERR' IN (z_1c, z_1d, z_2c, z_2d, z_3c, z_4c) THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '전표계정이 정확히 등록되어 있지 않습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /* --- COMPANY SETTING --- */
   SELECT MAX(A.COMPANY_CODE), MAX(A.DEPT_NAME), MAX(B.NM)
     INTO v_company,           v_deptnm,         v_htagnm
     FROM HD_CODE_DEPT A,
          HD_CODE_COMM B
    WHERE A.DEPT_CODE = as_dept
      AND B.GUBUN     = '03'
      AND B.CODE      = as_htag;

   /* --- TAXCOMPCODE SETTING --- */
   SELECT TAX_COMP_CODE
     INTO v_taxcomp
     FROM TM_CODE_DEPT
    WHERE COMPANY_CODE = v_company
      AND DEPT_CODE    = as_dept;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_remark  := v_deptnm || ' ' || v_htagnm;
   v_WorkSeq := 0;
   v_slipamt := 0;
   v_sliptp  := 'HDA';

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HDA 납입 전표 */   /* 보증금 */
   OPEN CURGIN(as_dept, as_htag, as_dt);
   LOOP
      FETCH CURGIN
       INTO c_cust,    c_seq,       c_custnm, c_bno,    c_hno,
            c_deposit, c_deposithd, c_bank,   c_banknm, c_amt;
       EXIT WHEN CURGIN%NOTFOUND;

      v_remarkH := v_remark || ' ' || '(보증금직접입금)';

      SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
        INTO v_WorkNo
        FROM TM_WORK_WORKNO
       WHERE COMPANY_CODE = v_company
         AND WORK_DATE    = as_dt;

      SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
        INTO v_DeptNo
        FROM TM_WORK_WORKDEPTNO
       WHERE COMPANY_CODE = v_company
         AND DEPT_CODE    = as_dept
         AND WORK_DATE    = as_dt;

      BEGIN
         INSERT INTO TM_SLIP_MASTER
                   ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                     INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                     CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                     APPR_DATE,       DC_YN )
            VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                     v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                     v_sysdt,         NULL,           NULL,        NULL,          NULL,
                     NULL,            NULL,           v_remarkH,   c_amt,         NULL,
                     NULL,            'Y' );
         EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '1-1(보증금입금): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
      END;

      c_cust   := z_cust;
      c_custnm := z_custnm;

      /* -- 차변 보통예금 -- */
      v_WorkSeq := v_WorkSeq + 1;
      v_remarkD := '보통예금';
      BEGIN
         INSERT INTO TM_SLIP_DETAIL
                   ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                     WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                     SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                     COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                     DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                     CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                     CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                     SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                     BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                     CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                     RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                     CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                     QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                     AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                     DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                     DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                     INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
            VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                     v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                     NULL,           NULL,          NULL,            NULL,           z_1d,
                     v_company,      as_dept,       NULL,            c_amt,          0,
                     0,              c_amt,         0,               0,              0,
                     0,              v_remarkd,     NULL,            v_taxcomp,      c_bank,
                     c_banknm,       NULL,          NULL,            NULL,           NULL,
                     NULL,           v_WorkSeq,     c_bank,          c_deposit,      NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     as_dt,          NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           s_1d,
                     as_user,        v_sysdt,       NULL,            NULL);
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '1-2(보증금입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;

      /* -- 대변 임대보증금 -- */
      v_WorkSeq := v_WorkSeq + 1;
      v_remarkD := '임대보증금';
      BEGIN
         INSERT INTO TM_SLIP_DETAIL
                   ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                     WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                     SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                     COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                     DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                     CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                     CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                     SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                     BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                     CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                     RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                     CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                     QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                     AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                     DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                     DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                     INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
            VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                     v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                     NULL,                NULL,          NULL,                NULL,           z_1c,
                     v_company,           as_dept,       NULL,                0,              0,
                     0,                   0,             c_amt,               0,              0,
                     c_amt,               v_remarkd,     NULL,                v_taxcomp,      z_cust,
                     z_custnm,            NULL,          NULL,                NULL,           NULL,
                     NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                     NULL,                NULL,          NULL,                NULL,           NULL,
                     NULL,                NULL,          NULL,                NULL,           NULL,
                     NULL,                NULL,          NULL,                NULL,           NULL,
                     NULL,                NULL,          NULL,                NULL,           NULL,
                     NULL,                NULL,          NULL,                NULL,           NULL,
                     NULL,                NULL,          NULL,                NULL,           NULL,
                     as_dt,               NULL,          NULL,                NULL,           NULL,
                     NULL,                NULL,          NULL,                NULL,           s_1c,
                     as_user,             v_sysdt,       NULL,                NULL);
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '1-3(보증금입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;

      BEGIN
          UPDATE HD_RENT_GURT_INCOME
             SET SLIP_DATE   = as_dt,
                 SLIP_SEQ    = v_WorkNo,
                 CHG_DUTY_ID = as_user,
                 CHG_DATE    = v_sysdt
--           WHERE NVL(SLIP_SEQ, 0)  = 0
           WHERE DEPT_CODE    = as_dept
             AND HOUSETAG     = as_htag
             AND RECEIPT_DATE = as_dt
             AND DEPOSIT_NO   = c_deposithd
             AND INCOM_TYPE   IN ('1')
             AND EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A
                          WHERE A.DEPT_CODE = as_dept
                            AND A.HOUSETAG  = as_htag
                            AND A.CUST_CODE = HD_RENT_GURT_INCOME.CUST_CODE
                            AND A.SEQ       = HD_RENT_GURT_INCOME.SEQ
                            AND ((A.CHANGE_TAG  = '1' AND A.CONT_DATE   <= as_dt) OR
                                 (A.CHANGE_TAG <> '1' AND A.CHANGE_DATE  > as_dt))
                            AND A.LAST_CHANGE_DATE <= as_dt
                        );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '1-4(보증금입금): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                  ROLLBACK;
                  RETURN;
      END;
   END LOOP;
   CLOSE CURGIN;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HDA 납입 전표 */   /* 임대료 */
   OPEN CURRIN(as_dept, as_htag, as_dt);
   LOOP
      FETCH CURRIN
       INTO c_cust,    c_seq,       c_custnm, c_bno,  c_hno,
            c_deposit, c_deposithd, c_bank,   c_banknm,
            c_amt,     c_samt,      c_vamt,   c_iamt,
            c_svYamt,  c_svNamt;
       EXIT WHEN CURRIN%NOTFOUND;

      v_remarkH := v_remark || ' ' || '(임대료직접입금)';

      SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
        INTO v_WorkNo
        FROM TM_WORK_WORKNO
       WHERE COMPANY_CODE = v_company
         AND WORK_DATE    = as_dt;

      SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
        INTO v_DeptNo
        FROM TM_WORK_WORKDEPTNO
       WHERE COMPANY_CODE = v_company
         AND DEPT_CODE    = as_dept
         AND WORK_DATE    = as_dt;

      BEGIN
         INSERT INTO TM_SLIP_MASTER
                   ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                     INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                     CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                     APPR_DATE,       DC_YN )
            VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                     v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                     v_sysdt,         NULL,           NULL,        NULL,          NULL,
                     NULL,            NULL,           v_remarkH,   c_amt,         NULL,
                     NULL,            'Y' );
         EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '2-1(임대료입금): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
      END;

      c_cust   := z_cust;
      c_custnm := z_custnm;

      /* -- 차변 보통예금 -- */
      v_WorkSeq := v_WorkSeq + 1;
      v_remarkD := '보통예금';
      BEGIN
         INSERT INTO TM_SLIP_DETAIL
                   ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                     WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                     SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                     COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                     DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                     CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                     CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                     SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                     BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                     CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                     RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                     CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                     QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                     AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                     DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                     DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                     INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
            VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                     v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                     NULL,           NULL,          NULL,            NULL,           z_1d,
                     v_company,      as_dept,       NULL,            c_amt,          0,
                     0,              c_amt,         0,               0,              0,
                     0,              v_remarkd,     NULL,            v_taxcomp,      c_bank,
                     c_banknm,       NULL,          NULL,            NULL,           NULL,
                     NULL,           v_WorkSeq,     c_bank,          c_deposit,      NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     as_dt,          NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           s_1d,
                     as_user,        v_sysdt,       NULL,            NULL);
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '2-2(임대료입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;

      IF c_svNamt <> 0 THEN
         /* -- 대변 임대료 부가세가 없는경우 -- */
         v_WorkSeq := v_WorkSeq + 1;
         IF c_svYamt <> 0 THEN
            v_remarkD := '임대료(부가세가 없는 공급가)';
         ELSE
            v_remarkD := '임대료';
         END IF;

         BEGIN
            INSERT INTO TM_SLIP_DETAIL
                      ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                        WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                        SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                        COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                        DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                        CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                        CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                        SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                        BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                        CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                        RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                        CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                        QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                        AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                        DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                        DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                        INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
               VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                        v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                        NULL,           NULL,          NULL,            NULL,           z_1c,
                        v_company,      as_dept,       NULL,            0,              0,
                        0,              0,             c_svNamt,        0,              0,
                        c_svNamt,       v_remarkd,     NULL,            v_taxcomp,      c_bank,
                        c_banknm,       NULL,          NULL,            NULL,           NULL,
                        NULL,           v_WorkSeq,     c_bank,          c_deposit,      NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        as_dt,          NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           s_1c,
                        as_user,        v_sysdt,       NULL,            NULL);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm);
                    RAISE_APPLICATION_ERROR(-20002, '2-3(임대료입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                    ROLLBACK;
                    RETURN;
         END;
      END IF;

      IF c_svYamt <> 0 THEN
         /* -- 대변 임대료 부가세가 있는경우 -- */
         v_WorkSeq := v_WorkSeq + 1;
         IF c_svNamt <> 0 THEN
            v_remarkD := '임대료(부가세가 있는 공급가)';
         ELSE
            v_remarkD := '임대료(공급가)';
         END IF;
         v_ecode  := '11';
         v_edate  := as_dt;
         v_ekind  := '010';

         BEGIN
            INSERT INTO TM_SLIP_DETAIL
                      ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                        WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                        SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                        COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                        DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                        CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                        CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                        SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                        BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                        CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                        RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                        CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                        QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                        AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                        DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                        DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                        INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
               VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                        v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                        NULL,           NULL,          NULL,            NULL,           z_1c,
                        v_company,      as_dept,       NULL,            0,              0,
                        0,              0,             c_svYamt,        0,              c_vamt,
                        c_svYamt,       v_remarkd,     NULL,            v_taxcomp,      z_cust,
                        z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                        NULL,           1,             NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        as_dt,          NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           s_1c,
                        as_user,        v_sysdt,       NULL,            NULL);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm);
                    RAISE_APPLICATION_ERROR(-20002, '2-4(임대료입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                    ROLLBACK;
                    RETURN;
         END;

         v_WorkSeq := v_WorkSeq + 1;
         v_remarkD := '임대료(부가세)';
         BEGIN
            INSERT INTO TM_SLIP_DETAIL
                      ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                        WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                        SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                        COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                        DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                        CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                        CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                        SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                        BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                        CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                        RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                        CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                        QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                        AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                        DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                        DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                        INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
               VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                        v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                        NULL,           NULL,          NULL,            NULL,           z_1c,
                        v_company,      as_dept,       NULL,            0,              0,
                        0,              0,             c_vamt,          0,              0,
                        c_vamt,         v_remarkd,     NULL,            v_taxcomp,      c_bank,
                        c_banknm,       NULL,          NULL,            NULL,           NULL,
                        NULL,           v_WorkSeq,     c_bank,          c_deposit,      NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        as_dt,          NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           s_1c,
                        as_user,        v_sysdt,       NULL,            NULL);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm);
                    RAISE_APPLICATION_ERROR(-20002, '2-5(임대료입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                    ROLLBACK;
                    RETURN;
         END;
      END IF;

      IF c_iamt <> 0 THEN
         /* -- 대변 임대료(보증보험료) -- */
         v_WorkSeq := v_WorkSeq + 1;
         v_remarkD := '임대료(보증보험료)';
         BEGIN
            INSERT INTO TM_SLIP_DETAIL
                      ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                        WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                        SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                        COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                        DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                        CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                        CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                        SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                        BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                        CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                        RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                        CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                        QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                        AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                        DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                        DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                        INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
               VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                        v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                        NULL,           NULL,          NULL,            NULL,           z_1c,
                        v_company,      as_dept,       NULL,            0,              0,
                        0,              0,             c_iamt,          0,              0,
                        c_iamt,         v_remarkd,     NULL,            v_taxcomp,      c_bank,
                        c_banknm,       NULL,          NULL,            NULL,           NULL,
                        NULL,           v_WorkSeq,     c_bank,          c_deposit,      NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           NULL,
                        as_dt,          NULL,          NULL,            NULL,           NULL,
                        NULL,           NULL,          NULL,            NULL,           s_1c,
                        as_user,        v_sysdt,       NULL,            NULL);
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm);
                    RAISE_APPLICATION_ERROR(-20002, '2-6(임대료입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                    ROLLBACK;
                    RETURN;
         END;
      END IF;

      BEGIN
          UPDATE HD_RENT_RENT_INCOME
             SET SLIP_DATE   = as_dt,
                 SLIP_SEQ    = v_WorkNo,
                 CHG_DUTY_ID = as_user,
                 CHG_DATE    = v_sysdt
--           WHERE NVL(SLIP_SEQ, 0)  = 0
           WHERE DEPT_CODE    = as_dept
             AND HOUSETAG     = as_htag
             AND RECEIPT_DATE = as_dt
             AND DEPOSIT_NO   = c_deposithd
             AND INCOM_TYPE   IN ('1')
             AND EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A
                          WHERE A.DEPT_CODE = as_dept
                            AND A.HOUSETAG  = as_htag
                            AND A.CUST_CODE = HD_RENT_RENT_INCOME.CUST_CODE
                            AND A.SEQ       = HD_RENT_RENT_INCOME.SEQ
                            AND ((A.CHANGE_TAG  = '1' AND A.CONT_DATE   <= as_dt) OR
                                 (A.CHANGE_TAG <> '1' AND A.CHANGE_DATE  > as_dt))
                            AND A.LAST_CHANGE_DATE <= as_dt
                        );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '2-7(임대료입금): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                  ROLLBACK;
                  RETURN;
      END;
   END LOOP;
   CLOSE CURRIN;
                                                
   /*********************************************************************************************************/
   /*********************************************************************************************************/
   /* 분양집계마감 처리 */
/*
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SLIP_MAGAM
    WHERE DEPT_CODE  = as_dept
      AND HOUSETAG   = as_htag;
   IF v_cnt > 0 THEN
      BEGIN
         UPDATE HD_HOUS_SLIP_MAGAM
            SET MAGAMDATE   = as_dt,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'END: HD_HOUS_SLIP_MAGAM UPDATE중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   ELSE
      BEGIN
         INSERT INTO HD_HOUS_SLIP_MAGAM
                   ( DEPT_CODE, HOUSETAG, MAGAMDATE, INPUT_DUTY_ID, INPUT_DATE )
            VALUES ( as_dept,   as_htag,  as_dt,     as_user,       v_sysdt );
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'END: HD_HOUS_SLIP_MAGAM INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END IF;
*/
   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_SLIP_HEJI;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_SLIP_HEJI" (
   as_cust IN VARCHAR2, --계약자
   as_seq  IN VARCHAR2, --순번
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt       VARCHAR2(14);
v_cnt         NUMBER(10);

v_dept        VARCHAR2(12);
v_htag        VARCHAR2(1);
v_bno         VARCHAR2(10);
v_hno         VARCHAR2(10);
v_r_deposit   VARCHAR2(30);
v_r_bank      VARCHAR2(8);
v_r_banknm    VARCHAR2(30);
v_date        VARCHAR2(8);
v_gurtamt     NUMBER(15);
v_rentamt     NUMBER(15);
v_delayamt    NUMBER(15);
v_penaltyamt  NUMBER(15);
v_etcamt1     NUMBER(15);
v_etcamt2     NUMBER(15);
v_etcamt3     NUMBER(15);
v_returnamt   NUMBER(15);
v_ramt        NUMBER(15);
v_mamt        NUMBER(15);

v_deposit     VARCHAR2(30);
v_bank        VARCHAR2(8);
v_banknm      VARCHAR2(30);

v_company     VARCHAR2(6);
v_WorkNo      NUMBER(10);
v_DeptNo      NUMBER(10);
v_WorkSeq     NUMBER(10);
v_Remark      VARCHAR2(500);
v_RemarkD     VARCHAR2(500);
v_sliptp      VARCHAR2(5);

z_1c          VARCHAR2(10); /* 22103010    임대보증금 */
z_1d          VARCHAR2(10); /* 11101300    보통예금 */
z_2c          VARCHAR2(10); /* 11101300    보통예금 */
z_2d          VARCHAR2(10); /* 22103010    임대보증금 */
z_3c          VARCHAR2(10); /* 43115010    임대료 */
z_4c          VARCHAR2(10); /* 43103010    수입위약배상금 */

/* 수지 계정 */
s_1c          VARCHAR2(10);
s_1d          VARCHAR2(10);
s_2c          VARCHAR2(10);
s_2d          VARCHAR2(10);
s_3c          VARCHAR2(10);
s_4c          VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*---------------------------------------------------------------------------*/
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_RENT_MASTER
    WHERE CUST_CODE  = as_cust
      AND SEQ        = TO_NUMBER(as_seq)
      AND CHANGE_TAG = '3'
      AND RETURN_YN  = 'Y';
   IF v_cnt < 1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당 고객은 해약상태가 아니거나 환불처리하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   SELECT A.DEPT_CODE, A.HOUSETAG,  A.BUILDNO,    A.HOUSENO,      A.RETURN_DATE,
          A.R_GURTAMT, A.R_RENTAMT, A.R_DELAYAMT, A.R_PENALTYAMT,
          A.R_ETCAMT1, A.R_ETCAMT2, A.R_ETCAMT3,  A.RETURN_AMT,
          B.COMPANY_CODE
     INTO v_dept,      v_htag,      v_bno,        v_hno,          v_date,
          v_gurtamt,   v_rentamt,   v_delayamt,   v_penaltyamt,
          v_etcamt1,   v_etcamt2,   v_etcamt3,    v_returnamt,
          v_company
     FROM HD_RENT_MASTER A,
          HD_CODE_DEPT B
    WHERE A.DEPT_CODE  = B.DEPT_CODE
      AND A.CUST_CODE  = as_cust
      AND A.SEQ        = TO_NUMBER(as_seq);

   v_ramt := v_rentamt + v_delayamt;
   v_mamt := v_penaltyamt + v_etcamt1 + v_etcamt2 + v_etcamt3;

   /*---------------------------------------------------------------------------*/
   /* --- 계정셋팅 --- */
   SELECT NVL(MAX(Z1C), 'ERR'), NVL(MAX(Z1D), 'ERR'), NVL(MAX(Z2C), 'ERR'), NVL(MAX(Z2D), 'ERR'),
          NVL(MAX(Z3C), 'ERR'), NVL(MAX(Z4C), 'ERR'),
          NVL(MAX(S1C), ''),    NVL(MAX(S1D), ''),    NVL(MAX(S2C), ''),    NVL(MAX(S2D), ''),
          NVL(MAX(S3C), ''),    NVL(MAX(S4C), '')

     INTO z_1c, z_1d, z_2c, z_2d, z_3c, z_4c,
          s_1c, s_1d, s_2c, s_2d, s_3c, s_4c

     FROM (SELECT DECODE(JCODE, '1C', JACNTCODE, '') AS Z1C, DECODE(JCODE, '1D', JACNTCODE, '') AS Z1D,
                  DECODE(JCODE, '2C', JACNTCODE, '') AS Z2C, DECODE(JCODE, '2D', JACNTCODE, '') AS Z2D,
                  DECODE(JCODE, '3C', JACNTCODE, '') AS Z3C, DECODE(JCODE, '4C', JACNTCODE, '') AS Z4C,
                  DECODE(JCODE, '1C', DETAILCODE, '') AS S1C, DECODE(JCODE, '1D', DETAILCODE, '') AS S1D,
                  DECODE(JCODE, '2C', DETAILCODE, '') AS S2C, DECODE(JCODE, '2D', DETAILCODE, '') AS S2D,
                  DECODE(JCODE, '3C', DETAILCODE, '') AS S3C, DECODE(JCODE, '4C', DETAILCODE, '') AS S4C
             FROM HD_CODE_ACNT
            WHERE DEPT_CODE = 'ZZZZZZZZZZZZ' 
          );
   IF 'ERR' IN (z_1c, z_1d, z_2c, z_2d, z_3c, z_4c) THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '전표계정이 정확히 등록되어 있지 않습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   v_WorkSeq := 0;
   v_Remark := '임대환불 (' || v_bno || '-' || v_hno || ')';
   v_sliptp := 'HDB';

   SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE  = v_dept
      AND HOUSETAG   = v_htag
      AND RECEIPTTAG = '8'
      AND ROWNUM < 2
    ORDER BY LISTORDER;
   IF v_deposit = 'XXXXX' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 입금계좌를 등록하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   SELECT MAX(BANK_CODE), MAX(BANK_NAME)
     INTO v_bank, v_banknm
     FROM HD_CODE_DEPOSIT A
    WHERE DEPT_CODE  = v_dept
      AND HOUSETAG   = v_htag
      AND DEPOSIT_NO = v_deposit;

   SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
     INTO v_WorkNo
     FROM TM_WORK_WORKNO
    WHERE COMPANY_CODE = v_company
      AND WORK_DATE    = v_date;

   SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
     INTO v_DeptNo
     FROM TM_WORK_WORKDEPTNO
    WHERE COMPANY_CODE = v_company
      AND DEPT_CODE    = v_dept
      AND WORK_DATE    = v_date;

   /*---------------------------------------------------------------------------*/
   BEGIN
      INSERT INTO TM_SLIP_MASTER
                ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                  WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                  INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                  CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                  APPR_DATE,       DC_YN )
         VALUES ( v_company,       v_date,         v_WorkNo,    v_WorkNo,      v_dept,
                  v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                  v_sysdt,         NULL,           NULL,        NULL,          NULL,
                  NULL,            NULL,           v_Remark,    v_gurtamt,     NULL,
                  NULL,            'Y' );
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-1(분양전환환불): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   v_WorkSeq := v_WorkSeq + 1;
   v_remarkD := v_remark || ' (임대보증금)';
   BEGIN
      INSERT INTO TM_SLIP_DETAIL
                ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                  WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                  SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                  COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                  DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                  CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                  CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                  SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                  BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                  CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                  RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                  CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                  QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                  AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                  DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                  DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                  INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
         VALUES ( v_company,      v_date,        v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                  v_WorkNo,       v_dept,        v_DeptNo,        v_sliptp,       '002',
                  NULL,           NULL,          NULL,            NULL,           z_2d,
                  v_company,      v_dept,        NULL,            v_gurtamt,      0,
                  0,              v_gurtamt,     0,               0,              0,
                  0,              v_remarkd,     NULL,            NULL,           v_bank,
                  v_banknm,       NULL,          NULL,            NULL,           NULL,
                  NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  v_date,         NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           s_2d,
                  as_user,        v_sysdt,       NULL,            NULL);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-2(분양전환환불): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   v_WorkSeq := v_WorkSeq + 1;
   v_remarkD := v_remark || ' (보통예금)';
   BEGIN
      INSERT INTO TM_SLIP_DETAIL
                ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                  WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                  SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                  COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                  DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                  CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                  CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                  SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                  BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                  CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                  RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                  CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                  QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                  AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                  DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                  DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                  INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
         VALUES ( v_company,      v_date,        v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                  v_WorkNo,       v_dept,        v_DeptNo,        v_sliptp,       '002',
                  NULL,           NULL,          NULL,            NULL,           z_2c,
                  v_company,      v_dept,        NULL,            0,              0,
                  0,              0,             v_returnamt,     0,              0,
                  v_returnamt,    v_remarkd,     NULL,            NULL,           v_bank,
                  v_banknm,       NULL,          NULL,            NULL,           NULL,
                  NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           NULL,
                  v_date,         NULL,          NULL,            NULL,           NULL,
                  NULL,           NULL,          NULL,            NULL,           s_2c,
                  as_user,        v_sysdt,       NULL,            NULL);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm);
              RAISE_APPLICATION_ERROR(-20002, '1-3(보통예금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   IF v_ramt <> 0 THEN
      v_WorkSeq := v_WorkSeq + 1;
      v_remarkD := v_remark || ' (임대료)';
      BEGIN
         INSERT INTO TM_SLIP_DETAIL
                   ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                     WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                     SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                     COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                     DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                     CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                     CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                     SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                     BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                     CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                     RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                     CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                     QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                     AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                     DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                     DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                     INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
            VALUES ( v_company,      v_date,        v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                     v_WorkNo,       v_dept,        v_DeptNo,        v_sliptp,       '002',
                     NULL,           NULL,          NULL,            NULL,           z_3c,
                     v_company,      v_dept,        NULL,            0,              0,
                     0,              0,             v_ramt, 0,       0,
                     v_ramt,         v_remarkd,     NULL,            NULL,           v_bank,
                     v_banknm,       NULL,          NULL,            NULL,           NULL,
                     NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     v_date,         NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           s_3c,
                     as_user,        v_sysdt,       NULL,            NULL);
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '1-4(임대료): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                 ROLLBACK;
              RETURN;
      END;
   END IF;

   IF v_bank <> 0 THEN
      v_WorkSeq := v_WorkSeq + 1;
      v_remarkD := v_remark || ' (수입위약배상금)';
      BEGIN
         INSERT INTO TM_SLIP_DETAIL
                   ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                     WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                     SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                     COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                     DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                     CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                     CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                     SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                     BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                     CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                     RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                     CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                     QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                     AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                     DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                     DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                     INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
            VALUES ( v_company,      v_date,        v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                     v_WorkNo,       v_dept,        v_DeptNo,        v_sliptp,       '002',
                     NULL,           NULL,          NULL,            NULL,           z_4c,
                     v_company,      v_dept,        NULL,            0,              0,
                     0,              0,             v_mamt,          0,              0,
                     v_mamt,         v_remarkd,     NULL,            NULL,           v_bank,
                     v_banknm,       NULL,          NULL,            NULL,           NULL,
                     NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     v_date,         NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           s_4c,
                     as_user,        v_sysdt,       NULL,            NULL);
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '1-5(수입위약배상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_RENT_MASTER
         SET RETURN_YN    = 'Y',
             RETURN_DATE  = v_date,
             SLIP_DATE    = v_date,
             SLIP_SEQ     = v_WorkNo,
             CHG_DUTY_ID  = as_user,
             CHG_DATE     = v_sysdt
       WHERE CUST_CODE = as_cust
         AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_RENT_MASTER 09 ' || sqlerrm);
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_SLIP_BATCH;

CREATE OR REPLACE PROCEDURE "PROC_HD_SLIP_BATCH" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --집계일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt          VARCHAR2(14);
v_cnt            NUMBER(10);
v_cust           VARCHAR2(20);
v_custnm         VARCHAR2(30);
v_sliptp         VARCHAR2(5);

/*---------------------------------------------------------------------------*/
v_taxcomp        VARCHAR2(6);
v_company        VARCHAR2(6);
v_deptnm         VARCHAR2(150);
v_htagnm         VARCHAR2(150);

v_WorkNo         NUMBER(10);
v_DeptNo         NUMBER(10);
v_WorkSeq        NUMBER(10);
v_slipamt        NUMBER(15);
v_slipamt1       NUMBER(15);
v_slipamt2       NUMBER(15);

v_Remark         VARCHAR2(500);
v_RemarkH        VARCHAR2(500);
v_RemarkD        VARCHAR2(500);

v_vatamt         NUMBER(15);
v_ecode          VARCHAR2(2);
v_edate          VARCHAR2(8);
v_ekind          VARCHAR2(3);

/* Cursor -------------------------------------------------------------------*/
h1_deposit       VARCHAR2(30);
h1_deposithd     VARCHAR2(30);
h1_bank          VARCHAR2(8);
h1_banknm        VARCHAR2(30);
h1_amt           NUMBER(15);
h1_lamt          NUMBER(15);
h1_bamt          NUMBER(15);
h1_vamt          NUMBER(15);
h1_discnt        NUMBER(15);
h1_no_bamt       NUMBER(15);
h1_ex_bamt       NUMBER(15);

h2_deposit       VARCHAR2(30);
h2_deposithd     VARCHAR2(30);
h2_bank          VARCHAR2(8);
h2_banknm        VARCHAR2(30);
h2_ramt          NUMBER(15);
h2_delay         NUMBER(15);
h2_amt           NUMBER(15);
h2_lamt          NUMBER(15);
h2_bamt          NUMBER(15);
h2_vamt          NUMBER(15);
h2_discnt        NUMBER(15);
h2_no_bamt       NUMBER(15);
h2_ex_bamt       NUMBER(15);

h3_deposit       VARCHAR2(30);
h3_deposithd     VARCHAR2(30);
h3_bank          VARCHAR2(8);
h3_banknm        VARCHAR2(30);
h3_ramt          NUMBER(15);
h3_discnt        NUMBER(15);
h3_amt           NUMBER(15);
h3_lamt          NUMBER(15);
h3_bamt          NUMBER(15);
h3_vamt          NUMBER(15);
h3_no_bamt       NUMBER(15);
h3_ex_bamt       NUMBER(15);

h4_amt           NUMBER(15);
h4_lamt          NUMBER(15);
h4_bamt          NUMBER(15);
h4_vamt          NUMBER(15);
h4_no_bamt       NUMBER(15);
h4_ex_bamt       NUMBER(15);

he_deposit       VARCHAR2(30);
he_deposithd     VARCHAR2(30);
he_bank          VARCHAR2(8);
he_banknm        VARCHAR2(30);
he_amt           NUMBER(15);
he_lamt          NUMBER(15);
he_bamt          NUMBER(15);
he_vamt          NUMBER(15);
he_no_bamt       NUMBER(15);
he_ex_bamt       NUMBER(15);

/* 과오납입금, 과오납환불 */
ho_deposit       VARCHAR2(30);
ho_deposithd     VARCHAR2(30);
ho_bank          VARCHAR2(8);
ho_banknm        VARCHAR2(30);
ho_amt           NUMBER(15);

zs_deposit       VARCHAR2(30);
zs_deposithd     VARCHAR2(30);
zs_bank          VARCHAR2(8);
zs_banknm        VARCHAR2(30);
zs_amt           NUMBER(15);
zs_lamt          NUMBER(15);
zs_bamt1         NUMBER(15);
zs_bamt2         NUMBER(15);
zs_vamt          NUMBER(15);
zs_discnt        NUMBER(15);
zs_delay         NUMBER(15);

/* 전표 계정 및 대표 고객 ---------------------------------------------------*/
z_cust           VARCHAR2(20);
z_custnm         VARCHAR2(30);

z_1d             VARCHAR2(10); /* 11101100    현금 */
z_2d             VARCHAR2(10); /* 11101300    보통예금 */
z_3d             VARCHAR2(10); /* 55105010    분양선납할인 */
z_4d             VARCHAR2(10); /* 55101110    기타이자 */
z_5d             VARCHAR2(10); /* 55103010    지급위약배상금 */
z_6d             VARCHAR2(10); /* 11116010    분양미수금 */
z_7d             VARCHAR2(10); /* 21117030    분양수입선수금 */
z_8d             VARCHAR2(10); /* 21125010    예수부가세 */
z_9d             VARCHAR2(10); /* 55103010    지급위약배상금 */
z_1c             VARCHAR2(10); /* 21117030    분양수입선수금 */
z_2c             VARCHAR2(10); /* 21125010    예수부가세 */
z_3c             VARCHAR2(10); /* 43111010    분양수입연체료 */
z_4c             VARCHAR2(10); /* 11101300    보통예금 */
z_5c             VARCHAR2(10); /* 43103010    수입위약배상금 */
z_sc             VARCHAR2(10); /* 11101300    보통예금 */
z_tc             VARCHAR2(10); /* 21131010    대리사무 */

/* 수지 계정 --------------------------------------------------------------*/
s_yn             VARCHAR2(1); /* 대리사무현장유무 */
s_1d             VARCHAR2(10);
s_2d             VARCHAR2(10);
s_3d             VARCHAR2(10);
s_4d             VARCHAR2(10);
s_5d             VARCHAR2(10);
s_6d             VARCHAR2(10);
s_7d             VARCHAR2(10);
s_8d             VARCHAR2(10);
s_9d             VARCHAR2(10);
s_1c             VARCHAR2(10);
s_2c             VARCHAR2(10);
s_3c             VARCHAR2(10);
s_4c             VARCHAR2(10);
s_5c             VARCHAR2(10);
s_sc             VARCHAR2(10);
s_tc             VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 1.정상입금 */
CURSOR CURJUNG(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.REALINCOMAMT), 0),     NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0),
       NVL(SUM(A.DISCNTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt

   AND A.RECEIPTDATE      BETWEEN D.ORG_AGREEDATE AND D.AGREEDATE

   AND A.PAYTAG           NOT IN ('E', 'C', 'F')
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* 2.연체입금 */
CURSOR CURYEUN(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE, MAX(A.BANK_NAME),
       NVL(SUM(A.REALINCOMAMT), 0),     NVL(SUM(A.DELAYAMT), 0),
       NVL(SUM(A.RECEIPTAMT), 0),       NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0),
       NVL(SUM(A.DISCNTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt

   AND A.RECEIPTDATE      > D.AGREEDATE

   AND A.PAYTAG           NOT IN ('E', 'C', 'F')
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* 3.선납할인 */
CURSOR CURHAL(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE, MAX(A.BANK_NAME),
       NVL(SUM(A.REALINCOMAMT), 0),     NVL(SUM(A.DISCNTAMT), 0),
       NVL(SUM(A.RECEIPTAMT), 0),       NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt

   AND A.RECEIPTDATE      < D.ORG_AGREEDATE

   AND A.PAYTAG           NOT IN ('E', 'C', 'F')
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* 6.분양대금선공제 */
/* 7.지체보상금 */
/* 8.임대위탁공제 */
CURSOR CURETC(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2, a_tp IN VARCHAR2) IS
SELECT C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.RECEIPTAMT), 0),       NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
   AND A.PAYTAG           = a_tp
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* E.과오납입금 */
CURSOR CUROVERIN(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.RECEIPTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS           = '90'
   AND A.TIMES            >= 90
   AND A.RECEIPTAMT       > 0
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
 GROUP BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* F.과오납환불 */
CURSOR CUROVEROUT(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.RECEIPTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS           = '90'
   AND A.TIMES            >= 90
   AND A.RECEIPTAMT       < 0
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
 GROUP BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* S.대리사무(납입) */
CURSOR CURZM6(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       SUM(A.RECEIPTAMT), SUM(A.RECEIPTLANDAMT),
       SUM(CASE WHEN A.RECEIPTVATAMT  = 0 THEN 0 ELSE A.RECEIPTBUILDAMT END),
       SUM(CASE WHEN A.RECEIPTVATAMT <> 0 THEN 0 ELSE A.RECEIPTBUILDAMT END),
       SUM(A.RECEIPTVATAMT),
       SUM(A.DISCNTAMT),
       SUM(A.DELAYAMT)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NVL(SLIPGROUP, '0') <> '2';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장은 그룹별로 집계하는 현장이 아닙니다');
      ROLLBACK;
      RETURN;
   END; END IF;

--   v_cnt := 0;
--   SELECT COUNT(*)
--     INTO v_cnt
--     FROM HD_CODE_DEPT A,
--          TM_ENDX_HIS_DAY B
--    WHERE A.COMPANY_CODE = B.COMPANY_CODE
--      AND A.DEPT_CODE = as_dept
--      AND B.END_DAY   = as_dt
--      AND B.END_YN    = 'Y';
--   IF v_cnt > 0 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '해당집계일은 전표마감 되었습니다');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

/*---------------------------------------------------------------------------*/
   z_cust := '9999999999999';
   SELECT NVL(MAX(CUST_NAME), '분양대표거래처')
     INTO z_custnm
     FROM SM_CODE_CUST
    WHERE CUST_CODE = z_cust;

   SELECT COUNT(*)
     INTO v_cnt
     FROM MM_COMM_CONTRACT
    WHERE PROJ_CODE      = as_dept
      AND CONTRACT_CLASS = '09';
   IF v_cnt > 0 THEN
      s_yn := 'Y';
   ELSE
      s_yn := 'N';
   END IF;

   /* --- 계정셋팅 --- */
   IF s_yn = 'N' THEN
      SELECT NVL(MAX(Z1D), 'ERR'), NVL(MAX(Z2D), 'ERR'), NVL(MAX(Z3D), 'ERR'), NVL(MAX(Z4D), 'ERR'),
             NVL(MAX(Z5D), 'ERR'), NVL(MAX(Z6D), 'ERR'), NVL(MAX(Z7D), 'ERR'), NVL(MAX(Z8D), 'ERR'),
             NVL(MAX(Z9D), 'ERR'),
             NVL(MAX(Z1C), 'ERR'), NVL(MAX(Z2C), 'ERR'), NVL(MAX(Z3C), 'ERR'), NVL(MAX(Z4C), 'ERR'),
             NVL(MAX(Z5C), 'ERR'),
             NVL(MAX(S1D), ''),    NVL(MAX(S2D), ''),    NVL(MAX(S3D), ''),    NVL(MAX(S4D), ''),
             NVL(MAX(S5D), ''),    NVL(MAX(S6D), ''),    NVL(MAX(S7D), ''),    NVL(MAX(S8D), ''),
             NVL(MAX(S9D), ''),
             NVL(MAX(S1C), ''),    NVL(MAX(S2C), ''),    NVL(MAX(S3C), ''),    NVL(MAX(S4C), ''),
             NVL(MAX(S5C), '')

        INTO z_1d, z_2d, z_3d, z_4d, z_5d, z_6d, z_7d, z_8d, z_9d,
             z_1c, z_2c, z_3c, z_4c, z_5c,
             s_1d, s_2d, s_3d, s_4d, s_5d, s_6d, s_7d, s_8d, s_9d,
             s_1c, s_2c, s_3c, s_4c, s_5c

        FROM (SELECT DECODE(JCODE, '1D', JACNTCODE, '') AS Z1D, DECODE(JCODE, '2D', JACNTCODE, '') AS Z2D,
                     DECODE(JCODE, '3D', JACNTCODE, '') AS Z3D, DECODE(JCODE, '4D', JACNTCODE, '') AS Z4D,
                     DECODE(JCODE, '5D', JACNTCODE, '') AS Z5D, DECODE(JCODE, '6D', JACNTCODE, '') AS Z6D,
                     DECODE(JCODE, '7D', JACNTCODE, '') AS Z7D, DECODE(JCODE, '8D', JACNTCODE, '') AS Z8D,
                     DECODE(JCODE, '9D', JACNTCODE, '') AS Z9D,
                     DECODE(JCODE, '1C', JACNTCODE, '') AS Z1C, DECODE(JCODE, '2C', JACNTCODE, '') AS Z2C,
                     DECODE(JCODE, '3C', JACNTCODE, '') AS Z3C, DECODE(JCODE, '4C', JACNTCODE, '') AS Z4C,
                     DECODE(JCODE, '5C', JACNTCODE, '') AS Z5C,
                     DECODE(JCODE, '1D', DETAILCODE, '') AS S1D, DECODE(JCODE, '2D', DETAILCODE, '') AS S2D,
                     DECODE(JCODE, '3D', DETAILCODE, '') AS S3D, DECODE(JCODE, '4D', DETAILCODE, '') AS S4D,
                     DECODE(JCODE, '5D', DETAILCODE, '') AS S5D, DECODE(JCODE, '6D', DETAILCODE, '') AS S6D,
                     DECODE(JCODE, '7D', DETAILCODE, '') AS S7D, DECODE(JCODE, '8D', DETAILCODE, '') AS S8D,
                     DECODE(JCODE, '9D', DETAILCODE, '') AS S9D,
                     DECODE(JCODE, '1C', DETAILCODE, '') AS S1C, DECODE(JCODE, '2C', DETAILCODE, '') AS S2C,
                     DECODE(JCODE, '3C', DETAILCODE, '') AS S3C, DECODE(JCODE, '4C', DETAILCODE, '') AS S4C,
                     DECODE(JCODE, '5C', DETAILCODE, '') AS S5C
                FROM HD_CODE_ACNT
               WHERE DEPT_CODE = as_dept
             );
      IF 'ERR' IN (z_1d, z_2d, z_3d, z_4d, z_5d, z_6d, z_7d, z_8d, z_9d, z_1c, z_2c, z_3c, z_4c, z_5c) THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, '전표계정이 정확히 등록되어 있지 않습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   ELSE
      SELECT NVL(MAX(ZSC), 'ERR'), NVL(MAX(ZTC), 'ERR'),
             NVL(MAX(SSC), ''),    NVL(MAX(STC), '')
        INTO z_sc, z_tc, s_sc, s_tc
        FROM (SELECT DECODE(JCODE, 'SC', JACNTCODE,  '') AS ZSC, DECODE(JCODE, 'TC', JACNTCODE,  '') AS ZTC,
                     DECODE(JCODE, 'SC', DETAILCODE, '') AS SSC, DECODE(JCODE, 'TC', DETAILCODE, '') AS STC
                FROM HD_CODE_ACNT
               WHERE DEPT_CODE = as_dept
             );
      IF 'ERR' IN (z_sc, z_tc, z_sc, z_tc) THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, '대리사무 전표계정이 정확히 등록되어 있지 않습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   END IF;

   /* --- COMPANY SETTING --- */
   SELECT MAX(A.COMPANY_CODE), MAX(A.DEPT_NAME), MAX(B.NM)
     INTO v_company,           v_deptnm,         v_htagnm
     FROM HD_CODE_DEPT A,
          HD_CODE_COMM B
    WHERE A.DEPT_CODE = as_dept
      AND B.GUBUN     = '03'
      AND B.CODE      = as_htag;

   /* --- TAXCOMPCODE SETTING --- */
   SELECT TAX_COMP_CODE
     INTO v_taxcomp
     FROM TM_CODE_DEPT
    WHERE COMPANY_CODE = v_company
      AND DEPT_CODE    = as_dept;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /* ***************************************************************************************************** */
   /* ***************************************************************************************     일반분양  */
   /* ***************************************************************************************************** */
   IF s_yn = 'N' THEN
   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD1 정상납입 전표 */
   v_WorkSeq := 0;
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 정상납입분';
   v_slipamt := 0;
   v_sliptp  := 'HD1';

    SELECT NVL(SUM(A.REALINCOMAMT), 0), NVL(SUM(A.DISCNTAMT), 0)
      INTO v_slipamt1,                  v_slipamt1
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C,
           VW_HD_HOUS_SELLDETAIL D
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
       AND A.CUST_CODE        = D.CUST_CODE
       AND A.SEQ              = D.SEQ
       AND A.COUNTS           = D.COUNTS
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS          <> '99'
       AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE <= as_dt

       AND A.RECEIPTDATE      BETWEEN D.ORG_AGREEDATE AND D.AGREEDATE

       AND A.PAYTAG           NOT IN ('E', 'C', 'F')
       AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8');

    IF v_slipamt1 + v_slipamt2 <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP,               WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,                INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,                   SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,                    APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,                    as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',                         as_user,
                      v_sysdt,         NULL,           NULL,        NULL,                        NULL,
                      NULL,            NULL,           v_remark,    v_slipamt1 + v_slipamt2,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '1-1(정상납입): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CURJUNG(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURJUNG
           INTO h1_deposit, h1_deposithd, h1_bank, h1_banknm,
                h1_amt,     h1_lamt,      h1_bamt, h1_vamt,   h1_discnt;
          EXIT WHEN CURJUNG%NOTFOUND;

          IF h1_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := h1_vamt;
             v_cust   := z_cust;
             v_custnm := z_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          /* -- 차변 현금(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_1d,
                         v_company,      as_dept,       NULL,            h1_amt,         0,
                         0,              h1_amt,        0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      h1_bank,
                         h1_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h1_bank,         h1_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_1d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '1-2(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF h1_discnt <> 0 THEN BEGIN
             /* -- 차변 (할인료) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(할인료)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                            DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                            CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                            CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                            QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                            AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                            DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                            DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                   VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                            NULL,           NULL,          NULL,            NULL,           z_3d,
                            v_company,      as_dept,       NULL,            h1_discnt,      0,
                            0,              h1_discnt,     0,               0,              0,
                            0,              v_remarkd,     NULL,            v_taxcomp,      h1_bank,
                            h1_banknm,      NULL,          NULL,            NULL,           NULL,
                            NULL,           v_WorkSeq,     h1_bank,         h1_deposit,     NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            as_dt,          NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           s_3d,
                            as_user,        v_sysdt,       NULL,            NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '1-3(정상납입-할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          IF h1_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF h1_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_lamt,         0,              0,
                                h1_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-4(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              h1_no_bamt := 0; h1_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO h1_no_bamt, h1_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C,
                     VW_HD_HOUS_SELLDETAIL D
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
                 AND A.CUST_CODE        = D.CUST_CODE
                 AND A.SEQ              = D.SEQ
                 AND A.COUNTS           = D.COUNTS
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
                      (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
                 AND B.LASTCHANGEDATE  <= as_dt

                 AND A.RECEIPTDATE      BETWEEN D.ORG_AGREEDATE AND D.AGREEDATE

                 AND A.PAYTAG           NOT IN ('E', 'C', 'F')
                 AND C.OUTDEPOSITNO    = h1_deposithd
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8');

              /* 부가세가 없는 건물가 */
              IF h1_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_no_bamt,      0,              0,
                                h1_no_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-5(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF h1_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_ex_bamt,      0,              h1_vamt,
                                h1_ex_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-6(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF h1_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_vamt,         0,              0,
                                h1_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-7(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             h1_lamt + h1_bamt,   0,              0,
                            h1_lamt + h1_bamt,   v_remarkd,     NULL,                v_taxcomp,      z_cust,
                            z_custnm,            NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '1-8(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '1',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = h1_deposithd
                AND PAYTAG           NOT IN ('E', 'C', 'F')
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A,
                                   VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS
                               AND HD_HOUS_INCOME.RECEIPTDATE BETWEEN B.ORG_AGREEDATE AND B.AGREEDATE
                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '1-9(정상납입): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURJUNG;
    END; END IF;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD2 연체납입 전표 */
   v_WorkSeq := 0;
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 연체납입분';
   v_slipamt := 0;
   v_sliptp  := 'HD2';

    SELECT NVL(SUM(A.REALINCOMAMT), 0), NVL(SUM(A.DISCNTAMT), 0)
      INTO v_slipamt1,                  v_slipamt1
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C,
           VW_HD_HOUS_SELLDETAIL D
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
       AND A.CUST_CODE        = D.CUST_CODE
       AND A.SEQ              = D.SEQ
       AND A.COUNTS           = D.COUNTS
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS          <> '99'
       AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE  <= as_dt

       AND A.RECEIPTDATE      > D.AGREEDATE

       AND A.PAYTAG           NOT IN ('E', 'C', 'F')
       AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8');

    IF v_slipamt1 + v_slipamt2 <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,                    as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',                         as_user,
                      v_sysdt,         NULL,           NULL,        NULL,                        NULL,
                      NULL,            NULL,           v_remark,    v_slipamt1 + v_slipamt2,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '2-1(연체납입): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CURYEUN(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURYEUN
           INTO h2_deposit, h2_deposithd, h2_bank, h2_banknm,
                h2_ramt,    h2_delay,     h2_amt,  h2_lamt,   h2_bamt, h2_vamt, h2_discnt;
          EXIT WHEN CURYEUN%NOTFOUND;

          IF h2_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := h2_vamt;
             v_cust   := z_cust;
             v_custnm := z_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          /* -- 차변 보통예금(실납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(실납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            h2_ramt,        0,
                         0,              h2_ramt,       0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      h2_bank,
                         h2_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h2_bank,         h2_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '2-2(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF h2_discnt <> 0 THEN BEGIN
             /* -- 차변 (할인료) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(할인료)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                            DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                            CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                            CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                            QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                            AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                            DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                            DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                   VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                            NULL,           NULL,          NULL,            NULL,           z_3d,
                            v_company,      as_dept,       NULL,            h2_discnt,      0,
                            0,              h2_discnt,     0,               0,              0,
                            0,              v_remarkd,     NULL,            v_taxcomp,      h2_bank,
                            h2_banknm,      NULL,          NULL,            NULL,           NULL,
                            NULL,           v_WorkSeq,     h2_bank,         h2_deposit,     NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            as_dt,          NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           s_3d,
                            as_user,        v_sysdt,       NULL,            NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '2-3(정상납입-할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          IF h2_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF h2_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_lamt,         0,              0,
                                h2_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-4(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              h2_no_bamt := 0; h2_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO h2_no_bamt, h2_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C,
                     VW_HD_HOUS_SELLDETAIL D
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
                 AND A.CUST_CODE        = D.CUST_CODE
                 AND A.SEQ              = D.SEQ
                 AND A.COUNTS           = D.COUNTS
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
                      (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
                 AND B.LASTCHANGEDATE  <= as_dt

                 AND A.RECEIPTDATE      > D.AGREEDATE

                 AND A.PAYTAG           NOT IN ('E', 'C', 'F')
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO     = h2_deposithd;

              /* 부가세가 없는 건물가 */
              IF h2_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_no_bamt,      0,              0,
                                h2_no_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-5(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF h2_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_ex_bamt,      0,              h2_vamt,
                                h2_ex_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-6(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF h2_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_vamt,         0,              0,
                                h2_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-7(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             h2_lamt + h2_bamt,   0,              0,
                            h2_lamt + h2_bamt,   v_remarkd,     NULL,                v_taxcomp,      z_cust,
                            z_custnm,            NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '2-8(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          /* -- 차변 분양수입연체료(연체료) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(연체료)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_3c,
                         v_company,      as_dept,       NULL,            0,              0,
                         0,              0,             h2_delay,        0,              0,
                         h2_delay,       v_remarkd,     NULL,            v_taxcomp,      h2_bank,
                         h2_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h2_bank,         h2_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_3c,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '2-9(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '2',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = h2_deposithd
                AND PAYTAG           NOT IN ('E', 'C', 'F')
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A,
                                   VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS

                               AND HD_HOUS_INCOME.RECEIPTDATE BETWEEN B.ORG_AGREEDATE AND B.AGREEDATE

                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '2-10(연체납입): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURYEUN;
    END; END IF;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD3 선납할인 전표 */
   v_WorkSeq := 0;
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 선납할인분';
   v_slipamt1 := 0; v_slipamt2 := 0;
   v_sliptp  := 'HD3';

    SELECT NVL(SUM(A.REALINCOMAMT), 0), NVL(SUM(A.DISCNTAMT), 0)
      INTO v_slipamt1,                  v_slipamt2
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C,
           VW_HD_HOUS_SELLDETAIL D
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
       AND A.CUST_CODE        = D.CUST_CODE
       AND A.SEQ              = D.SEQ
       AND A.COUNTS           = D.COUNTS
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS          <> '99'
       AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE  <= as_dt

       AND A.RECEIPTDATE      < D.ORG_AGREEDATE

       AND A.PAYTAG           NOT IN ('E', 'C', 'F')
       AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8');

    IF v_slipamt1 <> 0 OR v_slipamt2 <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP,           WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,            INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,               SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,                APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,                as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',                     as_user,
                      v_sysdt,         NULL,           NULL,        NULL,                    NULL,
                      NULL,            NULL,           v_remark,    v_slipamt1 + v_slipamt2, NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '3-1(선납할인): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CURHAL(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURHAL
           INTO h3_deposit, h3_deposithd, h3_bank, h3_banknm,
                h3_ramt,    h3_discnt,    h3_amt,  h3_lamt,   h3_bamt, h3_vamt;
          EXIT WHEN CURHAL%NOTFOUND;

          IF h3_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := h3_vamt;
             v_cust   := z_cust;
             v_custnm := z_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          /* -- 차변 보통예금(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            h3_ramt,        0,
                         0,              h3_ramt,       0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      h3_bank,
                         h3_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h3_bank,         h3_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '3-2(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 분양금선납할인(할인료) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(할인료)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_3d,
                         v_company,      as_dept,       NULL,            h3_discnt,      0,
                         0,              h3_discnt,     0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      h3_bank,
                         h3_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h3_bank,         h3_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_3d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '3-3(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF h3_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF h3_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_lamt,         0,              0,
                                h3_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-4(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              h3_no_bamt := 0; h3_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO h3_no_bamt, h3_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C,
                     VW_HD_HOUS_SELLDETAIL D
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
                 AND A.CUST_CODE        = D.CUST_CODE
                 AND A.SEQ              = D.SEQ
                 AND A.COUNTS           = D.COUNTS
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
                      (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
                 AND B.LASTCHANGEDATE  <= as_dt

                 AND A.RECEIPTDATE      < D.ORG_AGREEDATE

                 AND A.PAYTAG           NOT IN ('E', 'C', 'F')
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = h3_deposithd;

              /* 부가세가 없는 건물가 */
              IF h3_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_no_bamt,      0,              0,
                                h3_no_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-5(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF h3_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_ex_bamt,      0,              h3_vamt,
                                h3_ex_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-6(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF h3_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_vamt,         0,              0,
                                h3_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-7(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             h3_lamt + h3_bamt,   0,              0,
                            h3_lamt + h3_bamt,   v_remarkd,     NULL,                v_taxcomp,      z_cust,
                            z_custnm,            NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '3-8(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '3',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = h3_deposithd
                AND PAYTAG           NOT IN ('E', 'C', 'F')
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A,
                                   VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS

                               AND HD_HOUS_INCOME.RECEIPTDATE < B.ORG_AGREEDATE

                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '3-9(선납할인): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURHAL;
    END; END IF;


   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD4, ZM7 미납 전표 */
   v_cnt     := 0;
   v_WorkSeq := 0;
   IF s_yn = 'N' THEN
      v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 미납분';
      v_sliptp  := 'HD4';
   ELSE
      v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 미납분<대리사무>';
      v_sliptp  := 'ZM7';
   END IF;

   SELECT COUNT(*)
     INTO v_cnt
     FROM (SELECT NVL(SUM(B.BUNAMT), 0) - NVL(SUM(E.RAMT), 0) AS MAMT,
                  NVL(SUM(B.LANDAMT), 0) - NVL(SUM(E.LAMT), 0) AS LAMT,
                  NVL(SUM(B.BUILDAMT), 0) - NVL(SUM(E.BAMT), 0) AS BAMT,
                  NVL(SUM(B.VATAMT), 0) - NVL(SUM(E.VAMT), 0) AS VAMT
             FROM VW_HD_HOUS_SELL A,
                  HD_HOUS_SELLDETAIL B,
                  (SELECT CUST_CODE,
                          SEQ,
                          COUNTS,
                          SUM(RECEIPTAMT) AS RAMT,
                          SUM(RECEIPTLANDAMT) AS LAMT,
                          SUM(RECEIPTBUILDAMT) AS BAMT,
                          SUM(RECEIPTVATAMT) AS VAMT
                     FROM HD_HOUS_INCOME
                    WHERE DEPT_CODE    = as_dept
                      AND HOUSETAG     = as_htag
                      AND COUNTS      <> '99'
                      AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                      AND RECEIPTDATE <= as_dt
                    GROUP BY CUST_CODE, SEQ, COUNTS
                  ) E
            WHERE A.CUST_CODE        = B.CUST_CODE
              AND A.SEQ              = B.SEQ
              AND B.CUST_CODE        = E.CUST_CODE (+)
              AND B.SEQ              = E.SEQ       (+)
              AND B.COUNTS           = E.COUNTS    (+)
              AND B.COUNTS          <> '99'
--              AND NVL(B.SLIPSEQ, 0)  = 0
              AND A.DEPT_CODE        = as_dept
              AND A.HOUSETAG         = as_htag
              AND B.AGREEDATE        = as_dt
              AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                   (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
              AND A.LASTCHANGEDATE <= as_dt
           HAVING SUM(B.BUNAMT) - NVL(SUM(E.RAMT), 0) > 0
          );

   IF v_cnt > 0 THEN BEGIN
      SELECT NVL(SUM(MAMT), 0),
             NVL(SUM(LAMT), 0),
             NVL(SUM(BAMT), 0),
             NVL(SUM(VAMT), 0),
             SUM(CASE WHEN NVL(VAMT, 0)  = 0
                      THEN NVL(BAMT, 0)
                      ELSE 0
                 END),
             SUM(CASE WHEN NVL(VAMT, 0) <> 0
                      THEN NVL(BAMT, 0)
                      ELSE 0
                 END)
        INTO h4_amt, h4_lamt, h4_bamt, h4_vamt, h4_no_bamt, h4_ex_bamt
        FROM (SELECT A.CUST_CODE,
                     A.SEQ,
                     NVL(SUM(B.BUNAMT), 0) - NVL(SUM(E.RAMT), 0) AS MAMT,
                     NVL(SUM(B.LANDAMT), 0) - NVL(SUM(E.LAMT), 0) AS LAMT,
                     NVL(SUM(B.BUILDAMT), 0) - NVL(SUM(E.BAMT), 0) AS BAMT,
                     NVL(SUM(B.VATAMT), 0) - NVL(SUM(E.VAMT), 0) AS VAMT
                FROM VW_HD_HOUS_SELL A,
                     HD_HOUS_SELLDETAIL B,
                     (SELECT CUST_CODE,
                             SEQ,
                             COUNTS,
                             SUM(RECEIPTAMT) AS RAMT,
                             SUM(RECEIPTLANDAMT) AS LAMT,
                             SUM(RECEIPTBUILDAMT) AS BAMT,
                             SUM(RECEIPTVATAMT) AS VAMT
                        FROM HD_HOUS_INCOME
                       WHERE DEPT_CODE    = as_dept
                         AND HOUSETAG     = as_htag
                         AND COUNTS      <> '99'
                         AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                         AND RECEIPTDATE <= as_dt
                       GROUP BY CUST_CODE, SEQ, COUNTS
                     ) E
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND B.CUST_CODE        = E.CUST_CODE (+)
                 AND B.SEQ              = E.SEQ       (+)
                 AND B.COUNTS           = E.COUNTS    (+)
                 AND B.COUNTS          <> '99'
--                 AND NVL(B.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND B.AGREEDATE        = as_dt
                 AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                      (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                 AND A.LASTCHANGEDATE <= as_dt
               GROUP BY A.CUST_CODE, A.SEQ
              HAVING SUM(B.BUNAMT) - NVL(SUM(E.RAMT), 0) > 0
             );

      IF h4_vamt <> 0 THEN BEGIN
         v_ecode  := '11';
         v_edate  := as_dt;
         v_ekind  := '010';
         v_vatamt := h4_vamt;
         v_cust   := z_cust;
         v_custnm := z_custnm;
      END; ELSE BEGIN
         v_ecode  := '';
         v_edate  := '';
         v_ekind  := '';
         v_vatamt := 0;
         v_cust   := '';
         v_custnm := '';
      END; END IF;

       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                      v_sysdt,         NULL,           NULL,        NULL,          NULL,
                      NULL,            NULL,           v_remark,    h4_amt,        NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '4-1(미납): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       /* -- 차변 분양미수금(미수금) -- */
       v_WorkSeq := v_WorkSeq + 1;
       v_remarkd := v_remark || '(미수금)';
       BEGIN
          INSERT INTO TM_SLIP_DETAIL
                    ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                      WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                      SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                      COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                      DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                      CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                      CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                      SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                      BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                      CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                      RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                      CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                      QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                      AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                      DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                      DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                      INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
             VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                      v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                      NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_6d, z_tc),
                      v_company,      as_dept,       NULL,            h4_amt,         0,
                      0,              h4_amt,        0,               0,              0,
                      0,              v_remarkd,     NULL,            v_taxcomp,      NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      as_dt,          NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_6d, s_tc),
                      as_user,        v_sysdt,       NULL,            NULL);
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '4-2(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                  ROLLBACK;
                  RETURN;
       END;


       IF h4_vamt <> 0 THEN BEGIN
           /* -- 대변 분양수입선수금(토지가) -- */
           IF h4_lamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkd := v_remark || '(토지가)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_lamt,         0,              0,
                             h4_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                             z_custnm,       NULL,          NULL,            NULL,           NULL,
                             NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-3(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;

           /* 부가세가 없는 건물가 */
           IF h4_no_bamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkd := v_remark || '(부가세가 없는 건물가)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_no_bamt,      0,              0,
                             h4_no_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                             z_custnm,       NULL,          NULL,            NULL,           NULL,
                             NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-4(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;

           /* 부가세가 있는 건물가 */
           IF h4_ex_bamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkd := v_remark || '(부가세가 있는 건물가)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_ex_bamt,      0,              h4_vamt,
                             h4_ex_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                             z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                             NULL,           1,             NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-5(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;

           /* -- 대변 분양수입선수금(부가세) -- */
           IF h4_vamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkd := v_remark || '(부가세)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_2c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_vamt,         0,              0,
                             h4_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                             v_custnm,       NULL,          NULL,            NULL,           NULL,
                             NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_2c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-6(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;
       END; ELSE BEGIN
          /* -- 대변 분양수입선수금(토지가+건물가) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(토지가+건물가)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                         DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                         CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                         CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                         QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                         AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                         DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                         DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                         NULL,                NULL,          NULL,                NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                         v_company,           as_dept,       NULL,                0,              0,
                         0,                   0,             h4_lamt + h4_bamt,   0,              0,
                         h4_lamt + h4_bamt,   v_remarkd,     NULL,                v_taxcomp,      z_cust,
                         z_custnm,            NULL,          NULL,                NULL,           NULL,
                         NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         as_dt,               NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                         as_user,             v_sysdt,       NULL,                NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '4-7(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END; END IF;

      BEGIN
         UPDATE HD_HOUS_SELLDETAIL
            SET SLIPDT           = as_dt,
                SLIPSEQ          = v_WorkNo,
                CHG_DUTY_ID      = as_user,
                CHG_DATE         = v_sysdt
--          WHERE NVL(SLIPSEQ, 0)  = 0
          WHERE DEPT_CODE        = as_dept
            AND HOUSETAG         = as_htag
            AND COUNTS          <> '99'
            AND AGREEDATE        = as_dt
            AND EXISTS (SELECT B.CUST_CODE, MAX(A.CUST_NAME), B.SEQ, B.COUNTS,
                               SUM(B.BUNAMT) - NVL(SUM(E.RAMT), 0) AS MAMT,
                               SUM(B.LANDAMT) - NVL(SUM(E.LAMT), 0) AS LAMT,
                               SUM(B.BUILDAMT) - NVL(SUM(E.BAMT), 0) AS BAMT,
                               SUM(B.VATAMT) - NVL(SUM(E.VAMT), 0) AS VAMT
                          FROM VW_HD_HOUS_SELL A,
                               HD_HOUS_SELLDETAIL B,
                               (SELECT CUST_CODE,
                                       SEQ,
                                       COUNTS,
                                       SUM(RECEIPTAMT) AS RAMT,
                                       SUM(RECEIPTLANDAMT) AS LAMT,
                                       SUM(RECEIPTBUILDAMT) AS BAMT,
                                       SUM(RECEIPTVATAMT) AS VAMT
                                  FROM HD_HOUS_INCOME
                                 WHERE DEPT_CODE    = as_dept
                                   AND HOUSETAG     = as_htag
                                   AND COUNTS      <> '99'
                                   AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                                   AND RECEIPTDATE <= as_dt
                                 GROUP BY CUST_CODE, SEQ, COUNTS
                               ) E
                         WHERE A.CUST_CODE    = B.CUST_CODE
                           AND A.SEQ          = B.SEQ
                           AND B.CUST_CODE    = E.CUST_CODE (+)
                           AND B.SEQ          = E.SEQ       (+)
                           AND B.COUNTS       = E.COUNTS    (+)
                           AND B.COUNTS      <> '99'
                           AND B.CUST_CODE    = HD_HOUS_SELLDETAIL.CUST_CODE
                           AND B.SEQ          = HD_HOUS_SELLDETAIL.SEQ
                           AND B.COUNTS       = HD_HOUS_SELLDETAIL.COUNTS
                           AND B.AGREEDATE    = as_dt
                           AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                           AND A.LASTCHANGEDATE <= as_dt
                         GROUP BY B.CUST_CODE, B.SEQ, B.COUNTS
                        HAVING SUM(B.BUNAMT) - NVL(SUM(E.RAMT), 0) > 0
                       );
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '4-8(미납): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END; END IF;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD6 분양대금선공제 전표 */
   v_WorkSeq := 0;
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 분양대금선공제분';
   v_slipamt := 0;
   v_sliptp  := 'HD6';

    SELECT NVL(SUM(A.RECEIPTAMT), 0)
      INTO v_slipamt
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS          <> '99'
       AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE <= as_dt
       AND A.PAYTAG          = 'E'
       AND A.INCOMTYPE       IN ('1', '4', '6', '7', '8');

    IF v_slipamt <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                      v_sysdt,         NULL,           NULL,        NULL,          NULL,
                      NULL,            NULL,           v_remark,    v_slipamt,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '6-1(분양대금선공제): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CURETC(as_dept, as_htag, as_dt, 'E');
       LOOP
          FETCH CURETC
           INTO he_deposit, he_deposithd, he_bank, he_banknm,
                he_amt,     he_lamt,      he_bamt, he_vamt;
          EXIT WHEN CURETC%NOTFOUND;

          IF he_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := he_vamt;
             v_cust   := z_cust;
             v_custnm := z_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          /* -- 차변 기타이자(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_4d,
                         v_company,      as_dept,       NULL,            he_amt,         0,
                         0,              he_amt,        0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      he_bank,
                         he_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     he_bank,         he_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_4d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '6-2(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF he_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF he_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_lamt,         0,              0,
                                he_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-3(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              he_no_bamt := 0; he_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO he_no_bamt, he_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
                      (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
                 AND B.LASTCHANGEDATE  <= as_dt
                 AND A.PAYTAG           = 'E'
                 AND A.INCOMTYPE       IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = he_deposithd;

              /* 부가세가 없는 건물가 */
              IF he_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_no_bamt,      0,              0,
                                he_no_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-4(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF he_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_ex_bamt,      0,              he_vamt,
                                he_ex_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-5(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF he_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_vamt,         0,              0,
                                he_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-6(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             he_lamt + he_bamt,   0,              0,
                            he_lamt + he_bamt,   v_remarkd,     NULL,                v_taxcomp,      z_cust,
                            z_custnm,            NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '6-7(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '6',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = he_deposithd
                AND PAYTAG           ='E'
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '6-8(분양대금선공제분): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURETC;
    END; END IF;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD7 지체보상금 전표 */
   v_WorkSeq := 0;
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 지체보상금분';
   v_slipamt := 0;
   v_sliptp  := 'HD7';

    SELECT NVL(SUM(A.RECEIPTAMT), 0)
      INTO v_slipamt
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS          <> '99'
       AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE <= as_dt
       AND A.PAYTAG          = 'C'
       AND A.INCOMTYPE       IN ('1', '4', '6', '7', '8');

    IF v_slipamt <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                      v_sysdt,         NULL,           NULL,        NULL,          NULL,
                      NULL,            NULL,           v_remark,    v_slipamt,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '7-1(지체보상금): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CURETC(as_dept, as_htag, as_dt, 'C');
       LOOP
          FETCH CURETC
           INTO he_deposit, he_deposithd, he_bank, he_banknm,
                he_amt,     he_lamt,      he_bamt, he_vamt;
          EXIT WHEN CURETC%NOTFOUND;

          IF he_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := he_vamt;
             v_cust   := z_cust;
             v_custnm := z_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          /* -- 차변 지체보상금(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_5d,
                         v_company,      as_dept,       NULL,            he_amt,         0,
                         0,              he_amt,        0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      he_bank,
                         he_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     he_bank,         he_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_5d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '7-2(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF he_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF he_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_lamt,         0,              0,
                                he_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-3(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              he_no_bamt := 0; he_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO he_no_bamt, he_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
                      (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
                 AND B.LASTCHANGEDATE  <= as_dt
                 AND A.PAYTAG           = 'C'
                 AND A.INCOMTYPE       IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = he_deposithd;

              /* 부가세가 없는 건물가 */
              IF he_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_no_bamt,      0,              0,
                                he_no_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-4(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF he_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_ex_bamt,      0,              he_vamt,
                                he_ex_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-5(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF he_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_vamt,         0,              0,
                                he_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-6(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             he_lamt + he_bamt,   0,              0,
                            he_lamt + he_bamt,   v_remarkd,     NULL,                v_taxcomp,      z_cust,
                            z_custnm,            NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '7-7(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '6',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = he_deposithd
                AND PAYTAG           ='C'
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '7-8(지체보상금): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURETC;
    END; END IF;


   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD8 임대위탁공제 전표 */
   v_WorkSeq := 0;
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 임대위탁공제분';
   v_slipamt := 0;
   v_sliptp  := 'HD8';

    SELECT NVL(SUM(A.RECEIPTAMT), 0)
      INTO v_slipamt
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS          <> '99'
       AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE <= as_dt
       AND A.PAYTAG          = 'F'
       AND A.INCOMTYPE       IN ('1', '4', '6', '7', '8');

    IF v_slipamt <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                      v_sysdt,         NULL,           NULL,        NULL,          NULL,
                      NULL,            NULL,           v_remark,    v_slipamt,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '8-1(임대위탁공제): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CURETC(as_dept, as_htag, as_dt, 'F');
       LOOP
          FETCH CURETC
           INTO he_deposit, he_deposithd, he_bank, he_banknm,
                he_amt,     he_lamt,      he_bamt, he_vamt;
          EXIT WHEN CURETC%NOTFOUND;

          IF he_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := he_vamt;
             v_cust   := z_cust;
             v_custnm := z_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          /* -- 차변 임대위탁공제(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_3d,
                         v_company,      as_dept,       NULL,            he_amt,         0,
                         0,              he_amt,        0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      he_bank,
                         he_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     he_bank,         he_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_3d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '8-2(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF he_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF he_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_lamt,         0,              0,
                                he_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-3(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              he_no_bamt := 0; he_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO he_no_bamt, he_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
                      (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
                 AND B.LASTCHANGEDATE  <= as_dt
                 AND A.PAYTAG           = 'F'
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO     = he_deposithd;

              /* 부가세가 없는 건물가 */
              IF he_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_no_bamt,      0,              0,
                                he_no_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-4(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF he_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_ex_bamt,      0,              he_vamt,
                                he_ex_bamt,     v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-5(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF he_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_vamt,         0,              0,
                                he_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-6(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             he_lamt + he_bamt,   0,              0,
                            he_lamt + he_bamt,   v_remarkd,     NULL,                v_taxcomp,      z_cust,
                            z_custnm,            NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '8-7(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '6',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = he_deposithd
                AND PAYTAG           ='F'
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '8-8(임대위탁공제): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURETC;
    END; END IF;

    /**** ----------------------------------------------------------------------------------------------- ****/
    /**** ----------------------------------------------------------------------------------------------- ****/
    /* HDE 과오납입금 전표 */
    v_WorkSeq := 0;
    v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 과오납입금';
    v_slipamt := 0;
    v_sliptp  := 'HDE';

    SELECT NVL(SUM(A.RECEIPTAMT), 0)
      INTO v_slipamt
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS           = '90'
       AND A.TIMES            >= 90
       AND A.RECEIPTAMT       > 0
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE <= as_dt;

    IF v_slipamt <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                      v_sysdt,         NULL,           NULL,        NULL,          NULL,
                      NULL,            NULL,           v_remark,    v_slipamt,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'E-1(과오납입금): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CUROVERIN(as_dept, as_htag, as_dt);
       LOOP
          FETCH CUROVERIN
           INTO ho_deposit, ho_deposithd, ho_bank, ho_banknm, ho_amt;
          EXIT WHEN CUROVERIN%NOTFOUND;

          /* -- 차변 보통예금 -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(보통예금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            ho_amt,         0,
                         0,              ho_amt,        0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      ho_bank,
                         ho_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     ho_bank,         ho_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'E-2(과오납입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 대변 분양수입선수금 -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(분양수입선수금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_7d,
                         v_company,      as_dept,       NULL,            0,              0,
                         0,              0,             ho_amt,          0,              0,
                         ho_amt,         v_remarkd,     NULL,            v_taxcomp,      z_cust,
                         z_custnm,       NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_7d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'E-3(과오납입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = 'E',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS           = '90'
                AND TIMES            >= 90
                AND DEPOSIT_NO       = ho_deposithd
                AND RECEIPTAMT       > 0
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'E-4(과오납입금): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CUROVERIN;
    END; END IF;

    /**** ----------------------------------------------------------------------------------------------- ****/
    /**** ----------------------------------------------------------------------------------------------- ****/
    /* HDF 과오납환불 전표 */
    v_WorkSeq := 0;
    v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 과오납환불';
    v_slipamt := 0;
    v_sliptp  := 'HDF';

    SELECT NVL(SUM(A.RECEIPTAMT), 0)
      INTO v_slipamt
      FROM HD_HOUS_INCOME A,
           VW_HD_HOUS_SELL B,
           HD_CODE_DEPOSIT C
     WHERE A.CUST_CODE        = B.CUST_CODE
       AND A.SEQ              = B.SEQ
       AND A.DEPT_CODE        = C.DEPT_CODE
       AND A.HOUSETAG         = C.HOUSETAG
       AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--       AND NVL(A.SLIPSEQ, 0)  = 0
       AND A.DEPT_CODE        = as_dept
       AND A.HOUSETAG         = as_htag
       AND A.RECEIPTDATE      = as_dt
       AND A.COUNTS           = '90'
       AND A.TIMES            >= 90
       AND A.RECEIPTAMT       < 0
       AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
            (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
       AND B.LASTCHANGEDATE <= as_dt;

    IF v_slipamt <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                      v_sysdt,         NULL,           NULL,        NULL,          NULL,
                      NULL,            NULL,           v_remark,    v_slipamt,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'F-1(과오납환불): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CUROVEROUT(as_dept, as_htag, as_dt);
       LOOP
          FETCH CUROVEROUT
           INTO ho_deposit, ho_deposithd, ho_bank, ho_banknm, ho_amt;
          EXIT WHEN CUROVEROUT%NOTFOUND;

          /* -- 차변 현금(분양수입선수금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(분양수입선수금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_7d,
                         v_company,      as_dept,       NULL,            ho_amt,         0,
                         0,              ho_amt,        0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_7d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'F-2(과오납환불): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 대변 보통예금 -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(보통예금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            0,              0,
                         0,              0,             ho_amt,          0,              0,
                         ho_amt,         v_remarkd,     NULL,            v_taxcomp,      NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     ho_bank,         ho_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'F-3(과오납환불): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = 'F',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS           = '90'
                AND TIMES            >= 90
                AND DEPOSIT_NO       = ho_deposithd
                AND RECEIPTAMT       < 0
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'F-4(과오납환불): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CUROVEROUT;
    END; END IF;

   /* ***************************************************************************************************** */
   /* ***************************************************************************************************** */
   /* ***************************************************************************************************** */
   ELSE
   /* ***************************************************************************************************** */
   /* ***************************************************************************************     대리사무  */
   /* ***************************************************************************************************** */
   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* ZM6 대리사무(납입) */
   v_WorkSeq := 0;
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 대리사무(납입)';
   v_slipamt := 0;
   v_sliptp  := 'ZM6';

   SELECT SUM(A.RECEIPTAMT)
     INTO v_slipamt
     FROM HD_HOUS_INCOME A,
          VW_HD_HOUS_SELL B,
          HD_CODE_DEPOSIT C,
          VW_HD_HOUS_SELLDETAIL D
    WHERE A.CUST_CODE        = B.CUST_CODE
      AND A.SEQ              = B.SEQ
      AND A.DEPT_CODE        = C.DEPT_CODE
      AND A.HOUSETAG         = C.HOUSETAG
      AND A.DEPOSIT_NO       = C.DEPOSIT_NO
      AND A.CUST_CODE        = D.CUST_CODE
      AND A.SEQ              = D.SEQ
      AND A.COUNTS           = D.COUNTS
--      AND NVL(A.SLIPSEQ, 0)  = 0
      AND A.DEPT_CODE        = as_dept
      AND A.HOUSETAG         = as_htag
      AND A.RECEIPTDATE      = as_dt
      AND A.COUNTS          <> '99'
      AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
      AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= as_dt) OR
           (B.CHANGETAG <> '1' AND B.CHANGEDATE    > as_dt))
      AND B.LASTCHANGEDATE  <= as_dt
      AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8');

    IF v_slipamt <> 0 THEN BEGIN
       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

       BEGIN
          INSERT INTO TM_SLIP_MASTER
                    ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                      WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                      INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                      CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                      APPR_DATE,       DC_YN )
             VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                      v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                      v_sysdt,         NULL,           NULL,        NULL,          NULL,
                      NULL,            NULL,           v_remark,    v_slipamt,     NULL,
                      NULL,            'Y' );
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'S-1(대리사무): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                  ROLLBACK;
                  RETURN;
       END;

       OPEN CURZM6(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURZM6
           INTO zs_deposit, zs_deposithd, zs_bank,  zs_banknm,
                zs_amt,     zs_lamt,      zs_bamt1, zs_bamt2,
                zs_vamt,    zs_discnt,    zs_delay;
          EXIT WHEN CURZM6%NOTFOUND;

          IF zs_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := zs_vamt;
             v_cust   := z_cust;
             v_custnm := z_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          /* -- 차변 보통예금(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkd := v_remark || '(보통예금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_sc,
                         v_company,      as_dept,       NULL,            zs_amt,         0,
                         0,              zs_amt,        0,               0,              0,
                         0,              v_remarkd,     NULL,            v_taxcomp,      zs_bank,
                         zs_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     zs_bank,         zs_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_sc,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'S-2(대리사무): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF zs_discnt <> 0 THEN BEGIN
             /* -- 차변 (할인료) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(할인료)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                            DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                            CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                            CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                            QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                            AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                            DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                            DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                   VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                            NULL,           NULL,          NULL,            NULL,           z_tc,
                            v_company,      as_dept,       NULL,            zs_discnt,      0,
                            0,              zs_discnt,     0,               0,              0,
                            0,              v_remarkd,     NULL,            v_taxcomp,      zs_bank,
                            zs_banknm,      NULL,          NULL,            NULL,           NULL,
                            NULL,           v_WorkSeq,     zs_bank,         zs_deposit,     NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            as_dt,          NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           s_tc,
                            as_user,        v_sysdt,       NULL,            NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'S-3(대리사무-할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          IF zs_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF zs_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_lamt,         0,              0,
                                zs_lamt,        v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-4(대리사무-토지가): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 없는 건물가 */
              IF zs_bamt1 <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_bamt1,        0,              0,
                                zs_bamt1,       v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-5(대리사무-건물가): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF zs_bamt2 <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_bamt2,        0,              zs_vamt,
                                zs_bamt2,       v_remarkd,     NULL,            v_taxcomp,      z_cust,
                                z_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-6(대리사무-건물가): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF zs_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkd := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_vamt,         0,              0,
                                zs_vamt,        v_remarkd,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-7(대리사무-부가세): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(토지가+건물가)';
             v_slipamt := zs_lamt + zs_bamt1 + zs_bamt2;
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_tc,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             v_slipamt,           0,              0,
                            v_slipamt,           v_remarkd,     NULL,                v_taxcomp,      z_cust,
                            z_custnm,            NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_tc,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'S-8(대리사무<토지+건물>): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          /* -- 대변 분양수입연체료(연체료) -- */
          IF zs_delay <> 0 THEN
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(연체료)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                            DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                            CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                            CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                            QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                            AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                            DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                            DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                   VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                            NULL,           NULL,          NULL,            NULL,           z_tc,
                            v_company,      as_dept,       NULL,            0,              0,
                            0,              0,             zs_delay,        0,              0,
                            zs_delay,       v_remarkd,     NULL,            v_taxcomp,      zs_bank,
                            zs_banknm,      NULL,          NULL,            NULL,           NULL,
                            NULL,           v_WorkSeq,     zs_bank,         zs_deposit,     NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            as_dt,          NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           s_tc,
                            as_user,        v_sysdt,       NULL,            NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'S-9(대리사무-연체료): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = 'S',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE DEPT_CODE        = as_dept
                AND HOUSETAG         = as_htag
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = zs_deposithd
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELL A,
                                   VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = A.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = A.SEQ
                               AND HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS
                               AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                    (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                               AND A.LASTCHANGEDATE <= as_dt
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'S-10(대리사무): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURZM6;
    END; END IF;

   END IF;

/************************************************************************************************************/
/************************************************************************************************************/
   /* 분양집계마감 처리 */
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SLIP_MAGAM
    WHERE DEPT_CODE  = as_dept
      AND HOUSETAG   = as_htag;
   IF v_cnt > 0 THEN
      BEGIN
         UPDATE HD_HOUS_SLIP_MAGAM
            SET MAGAMDATE   = as_dt,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, 'END: HD_HOUS_SLIP_MAGAM UPDATE중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   ELSE
      BEGIN
         INSERT INTO HD_HOUS_SLIP_MAGAM
                   ( DEPT_CODE, HOUSETAG, MAGAMDATE, INPUT_DUTY_ID, INPUT_DATE )
            VALUES ( as_dept,   as_htag,  as_dt,     as_user,       v_sysdt );
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, 'END: HD_HOUS_SLIP_MAGAM INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_SLIP_BATCH_DEL;

CREATE OR REPLACE PROCEDURE "PROC_HD_SLIP_BATCH_DEL" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --집계일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/* Temp, System -------------------------------------------------------------*/
v_sysdt          VARCHAR2(14);
v_company        VARCHAR2(6);
v_dt             VARCHAR2(8);
v_cnt            NUMBER(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   SELECT COMPANY_CODE
     INTO v_company
     FROM HD_CODE_DEPT
    WHERE DEPT_CODE = as_dept;

   /*------------------------------------------------------------------------*/
   /*체크 */
   --전표확정체크
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM TM_SLIP_DETAIL
    WHERE WORK_COMP     = v_company
      AND WORK_DATE     = as_dt
      AND CHECK_STATUS IN ('2', '3')
      AND WORK_NO      IN (SELECT SLIPSEQ
                             FROM HD_HOUS_INCOME
                            WHERE DEPT_CODE  = as_dept
                              AND HOUSETAG   = as_htag
                              AND SLIPDT     = as_dt
                              AND COUNTS    <> '99'
                            UNION ALL
                           SELECT SLIPSEQ
                             FROM HD_HOUS_SELLDETAIL
                            WHERE DEPT_CODE  = as_dept
                              AND HOUSETAG   = as_htag
                              AND SLIPDT     = as_dt
                              AND COUNTS    <> '99'
                          );
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, 'E2: 해당 일자의 분양전표 중 확정전표가 존재합니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   /*전표 DETAIL 삭제 */
/*
   DELETE TM_SLIP_DETAIL
    WHERE WORK_COMP = v_company
      AND WORK_DATE = v_del_dt
      AND WORK_NO   IN (SELECT SLIPSEQ
                          FROM HD_SLIP_DATA
                         WHERE DEPT_CODE = as_dept
                           AND HOUSETAG  = as_htag
                           AND SLIPDT    = v_del_dt
                       );
   IF SQLCODE <> 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, 'EC3: TM_SLIP_DETAIL DELETE중 오류가 발생했습니다');
      ROLLBACK;
      RETURN;
   END; END IF;
*/
   /*------------------------------------------------------------------------*/
   /*전표 DETAIL 삭제 */
   DELETE TM_SLIP_MASTER
    WHERE WORK_COMP = v_company
      AND WORK_DATE = as_dt
      AND SLIP_KIND_CODE IN ('HD1','HD2','HD3','HD4','HD6','HD7','HD8','HDA','HDB','HDC','HDD','HDE','HDF','ZM6','ZM7')
      AND WORK_NO      IN (SELECT SLIPSEQ
                             FROM HD_HOUS_INCOME
                            WHERE DEPT_CODE  = as_dept
                              AND HOUSETAG   = as_htag
                              AND SLIPDT     = as_dt
                              AND COUNTS    <> '99'
                            UNION ALL
                           SELECT SLIPSEQ
                             FROM HD_HOUS_SELLDETAIL
                            WHERE DEPT_CODE  = as_dept
                              AND HOUSETAG   = as_htag
                              AND SLIPDT     = as_dt
                              AND COUNTS    <> '99'
                          );
   IF SQLCODE <> 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, 'E4: TM_SLIP_MASTER DELETE중 오류가 발생했습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   /* HD_HOUS_INCOME UPDATE */
   UPDATE HD_HOUS_INCOME
      SET SLIPDT       = '',
          SLIPSEQ      = 0,
          SLIPTYPE     = '',
          CHG_DUTY_ID  = as_user,
          CHG_DATE     = v_sysdt
    WHERE DEPT_CODE    = as_dept
      AND HOUSETAG     = as_htag
      AND SLIPDT       = as_dt
      AND COUNTS      <> '99'
      AND SLIPSEQ      > 0;
   IF SQLCODE <> 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, 'E5: HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   /* HD_HOUS_SELLDETAIL UPDATE */
   UPDATE HD_HOUS_SELLDETAIL
      SET SLIPDT      = '',
          SLIPSEQ     = 0,
          CHG_DUTY_ID = as_user,
          CHG_DATE    = v_sysdt
    WHERE DEPT_CODE   = as_dept
      AND HOUSETAG    = as_htag
      AND SLIPDT      = as_dt
      AND COUNTS      <> '99'
      AND SLIPSEQ      > 0;
   IF SQLCODE <> 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, 'E6: HD_HOUS_SELLDETAIL UPDATE중 오류가 발생했습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   /* HD_HOUS_SLIP_MAGAM UPDATE, DELETE */
   SELECT NVL(MAX(SLIPDT), 'NOT')
     INTO v_dt
     FROM (SELECT SLIPDT
             FROM HD_HOUS_INCOME
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag
              AND SLIPSEQ   > 0
            UNION ALL
           SELECT SLIPDT
             FROM HD_HOUS_SELLDETAIL
            WHERE DEPT_CODE = as_dept
              AND HOUSETAG  = as_htag
              AND SLIPSEQ   > 0
          );
   IF v_dt = 'NOT' THEN BEGIN
      DELETE HD_HOUS_SLIP_MAGAM
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      IF SQLCODE <> 0 THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, 'E5: HD_HOUS_SLIP_MAGAM DELETE중 오류가 발생했습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   END; ELSE BEGIN
      UPDATE HD_HOUS_SLIP_MAGAM
         SET MAGAMDATE   = v_dt,
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE DEPT_CODE   = as_dept
         AND HOUSETAG    = as_htag;
      IF SQLCODE <> 0 THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, 'E6: HD_HOUS_SLIP_MAGAM UPDATE중 오류가 발생했습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_SLIP_BATCH_PERSON;

CREATE OR REPLACE PROCEDURE "PROC_HD_SLIP_BATCH_PERSON" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_dt   IN VARCHAR2, --집계일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
v_sysdt          VARCHAR2(14);
v_cnt            NUMBER(10);
v_cust           VARCHAR2(20);
v_custnm         VARCHAR2(30);
v_sliptp         VARCHAR2(5);

/*---------------------------------------------------------------------------*/
v_taxcomp        VARCHAR2(6);
v_company        VARCHAR2(6);
v_deptnm         VARCHAR2(150);
v_htagnm         VARCHAR2(150);

v_WorkNo         NUMBER(10);
v_DeptNo         NUMBER(10);
v_WorkSeq        NUMBER(10);

v_Remark         VARCHAR2(500);
v_remarkH        VARCHAR2(500);
v_remarkD        VARCHAR2(500);
v_slipamt        NUMBER(15);

v_vatamt         NUMBER(15);
v_ecode          VARCHAR2(2);
v_edate          VARCHAR2(8);
v_ekind          VARCHAR2(3);

/* Cursor -------------------------------------------------------------------*/
h1_cust          VARCHAR2(20);
h1_custnm        VARCHAR2(30);
h1_seq           NUMBER(10);
h1_dh            VARCHAR2(30);
h1_deposit       VARCHAR2(30);
h1_deposithd     VARCHAR2(30);
h1_bank          VARCHAR2(8);
h1_banknm        VARCHAR2(30);
h1_amt           NUMBER(15);
h1_lamt          NUMBER(15);
h1_bamt          NUMBER(15);
h1_vamt          NUMBER(15);
h1_discnt        NUMBER(15);
h1_no_bamt       NUMBER(15);
h1_ex_bamt       NUMBER(15);

h2_cust          VARCHAR2(20);
h2_custnm        VARCHAR2(30);
h2_seq           NUMBER(10);
h2_dh            VARCHAR2(30);
h2_deposit       VARCHAR2(30);
h2_deposithd     VARCHAR2(30);
h2_bank          VARCHAR2(8);
h2_banknm        VARCHAR2(30);
h2_ramt          NUMBER(15);
h2_delay         NUMBER(15);
h2_amt           NUMBER(15);
h2_lamt          NUMBER(15);
h2_bamt          NUMBER(15);
h2_vamt          NUMBER(15);
h2_discnt        NUMBER(15);
h2_no_bamt       NUMBER(15);
h2_ex_bamt       NUMBER(15);

h3_cust          VARCHAR2(20);
h3_custnm        VARCHAR2(30);
h3_seq           NUMBER(10);
h3_dh            VARCHAR2(30);
h3_deposit       VARCHAR2(30);
h3_deposithd     VARCHAR2(30);
h3_bank          VARCHAR2(8);
h3_banknm        VARCHAR2(30);
h3_ramt          NUMBER(15);
h3_discnt        NUMBER(15);
h3_amt           NUMBER(15);
h3_lamt          NUMBER(15);
h3_bamt          NUMBER(15);
h3_vamt          NUMBER(15);
h3_no_bamt       NUMBER(15);
h3_ex_bamt       NUMBER(15);

h4_cust          VARCHAR2(20);
h4_custnm        VARCHAR2(30);
h4_seq           NUMBER(10);
h4_dh            VARCHAR2(30);
h4_amt           NUMBER(15);
h4_lamt          NUMBER(15);
h4_bamt          NUMBER(15);
h4_vamt          NUMBER(15);
h4_no_bamt       NUMBER(15);
h4_ex_bamt       NUMBER(15);

he_cust          VARCHAR2(20);
he_custnm        VARCHAR2(30);
he_seq           NUMBER(10);
he_dh            VARCHAR2(30);
he_deposit       VARCHAR2(30);
he_deposithd     VARCHAR2(30);
he_bank          VARCHAR2(8);
he_banknm        VARCHAR2(30);
he_amt           NUMBER(15);
he_lamt          NUMBER(15);
he_bamt          NUMBER(15);
he_vamt          NUMBER(15);
he_no_bamt       NUMBER(15);
he_ex_bamt       NUMBER(15);

/* 과오납입금, 과오납환불 */
ho_cust          VARCHAR2(20);
ho_custnm        VARCHAR2(30);
ho_seq           NUMBER(10);
ho_dh            VARCHAR2(30);
ho_deposit       VARCHAR2(30);
ho_deposithd     VARCHAR2(30);
ho_bank          VARCHAR2(8);
ho_banknm        VARCHAR2(30);
ho_amt           NUMBER(15);

zs_cust          VARCHAR2(20);
zs_custnm        VARCHAR2(30);
zs_seq           NUMBER(10);
zs_dh            VARCHAR2(30);
zs_deposit       VARCHAR2(30);
zs_deposithd     VARCHAR2(30);
zs_bank          VARCHAR2(8);
zs_banknm        VARCHAR2(30);
zs_amt           NUMBER(15);
zs_lamt          NUMBER(15);
zs_bamt1         NUMBER(15);
zs_bamt2         NUMBER(15);
zs_vamt          NUMBER(15);
zs_discnt        NUMBER(15);
zs_delay         NUMBER(15);

/* 전표 계정 --------------------------------------------------------------*/
z_1d             VARCHAR2(10); /* 11101100    현금 */
z_2d             VARCHAR2(10); /* 11101300    보통예금 */
z_3d             VARCHAR2(10); /* 55105010    분양선납할인 */
z_4d             VARCHAR2(10); /* 55101110    기타이자 */
z_5d             VARCHAR2(10); /* 55103010    지급위약배상금 */
z_6d             VARCHAR2(10); /* 11116010    분양미수금 */
z_7d             VARCHAR2(10); /* 21117030    분양수입선수금 */
z_8d             VARCHAR2(10); /* 21125010    예수부가세 */
z_9d             VARCHAR2(10); /* 55103010    지급위약배상금 */
z_1c             VARCHAR2(10); /* 21117030    분양수입선수금 */
z_2c             VARCHAR2(10); /* 21125010    예수부가세 */
z_3c             VARCHAR2(10); /* 43111010    분양수입연체료 */
z_4c             VARCHAR2(10); /* 11101300    보통예금 */
z_5c             VARCHAR2(10); /* 43103010    수입위약배상금 */
z_sc             VARCHAR2(10); /* 11101300    보통예금 */
z_tc             VARCHAR2(10); /* 21131010    대리사무 */

/* 수지 계정 --------------------------------------------------------------*/
s_yn             VARCHAR2(1); /* 대리사무현장유무 */
s_1d             VARCHAR2(10);
s_2d             VARCHAR2(10);
s_3d             VARCHAR2(10);
s_4d             VARCHAR2(10);
s_5d             VARCHAR2(10);
s_6d             VARCHAR2(10);
s_7d             VARCHAR2(10);
s_8d             VARCHAR2(10);
s_9d             VARCHAR2(10);
s_1c             VARCHAR2(10);
s_2c             VARCHAR2(10);
s_3c             VARCHAR2(10);
s_4c             VARCHAR2(10);
s_5c             VARCHAR2(10);
s_sc             VARCHAR2(10);
s_tc             VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 1.정상입금 */
CURSOR CURJUNG(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT B.CUST_CODE, MAX(B.CUST_NAME), B.SEQ, MAX(B.BUILDNO || '-' || B.HOUSENO),
       C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.REALINCOMAMT), 0),     NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0),
       NVL(SUM(A.DISCNTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt

   AND A.RECEIPTDATE      BETWEEN D.ORG_AGREEDATE AND D.AGREEDATE

   AND A.PAYTAG           NOT IN ('E', 'C', 'F')
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* 2.연체입금 */
CURSOR CURYEUN(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT B.CUST_CODE, MAX(B.CUST_NAME), B.SEQ, MAX(B.BUILDNO || '-' || B.HOUSENO),
       C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE, MAX(A.BANK_NAME),
       NVL(SUM(A.REALINCOMAMT), 0),     NVL(SUM(A.DELAYAMT), 0),
       NVL(SUM(A.RECEIPTAMT), 0),       NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0),
       NVL(SUM(A.DISCNTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt

   AND A.RECEIPTDATE      > D.AGREEDATE

   AND A.PAYTAG           NOT IN ('E', 'C', 'F')
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* 3.선납할인 */
CURSOR CURHAL(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT B.CUST_CODE, MAX(B.CUST_NAME), B.SEQ, MAX(B.BUILDNO || '-' || B.HOUSENO),
       C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE, MAX(A.BANK_NAME),
       NVL(SUM(A.REALINCOMAMT), 0),     NVL(SUM(A.DISCNTAMT), 0),
       NVL(SUM(A.RECEIPTAMT), 0),       NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt

   AND A.RECEIPTDATE      < D.ORG_AGREEDATE

   AND A.PAYTAG           NOT IN ('E', 'C', 'F')
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* 4.미납 */
CURSOR CURMI(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT CUST_CODE, CUST_NAME, SEQ, DH,
       NVL(SUM(MAMT), 0),
       NVL(SUM(LAMT), 0),
       NVL(SUM(BAMT), 0),
       NVL(SUM(VAMT), 0),
       SUM(CASE WHEN NVL(VAMT, 0)  = 0
                THEN NVL(BAMT, 0)
                ELSE 0
           END),
       SUM(CASE WHEN NVL(VAMT, 0) <> 0
                THEN NVL(BAMT, 0)
                ELSE 0
           END)
  FROM (SELECT A.CUST_CODE,
               A.SEQ,
               A.CUST_NAME,
               A.BUILDNO || '-' || A.HOUSENO AS DH,
               NVL(SUM(B.BUNAMT), 0) - NVL(SUM(E.RAMT), 0) AS MAMT,
               NVL(SUM(B.LANDAMT), 0) - NVL(SUM(E.LAMT), 0) AS LAMT,
               NVL(SUM(B.BUILDAMT), 0) - NVL(SUM(E.BAMT), 0) AS BAMT,
               NVL(SUM(B.VATAMT), 0) - NVL(SUM(E.VAMT), 0) AS VAMT
          FROM VW_HD_HOUS_SELL A,
               HD_HOUS_SELLDETAIL B,
               (SELECT CUST_CODE,
                       SEQ,
                       COUNTS,
                       SUM(RECEIPTAMT) AS RAMT,
                       SUM(RECEIPTLANDAMT) AS LAMT,
                       SUM(RECEIPTBUILDAMT) AS BAMT,
                       SUM(RECEIPTVATAMT) AS VAMT
                  FROM HD_HOUS_INCOME
                 WHERE DEPT_CODE    = a_dept
                   AND HOUSETAG     = a_htag
                   AND COUNTS      <> '99'
                   AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                   AND RECEIPTDATE <= a_dt
                 GROUP BY CUST_CODE, SEQ, COUNTS
               ) E
         WHERE A.CUST_CODE        = B.CUST_CODE
           AND A.SEQ              = B.SEQ
           AND B.CUST_CODE        = E.CUST_CODE (+)
           AND B.SEQ              = E.SEQ       (+)
           AND B.COUNTS           = E.COUNTS    (+)
           AND B.COUNTS          <> '99'
--                 AND NVL(B.SLIPSEQ, 0)  = 0
           AND A.DEPT_CODE        = a_dept
           AND A.HOUSETAG         = a_htag
           AND B.AGREEDATE        = a_dt
           AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= a_dt) OR
                (A.CHANGETAG <> '1' AND A.CHANGEDATE    > a_dt))
           AND A.LASTCHANGEDATE <= a_dt
         GROUP BY A.CUST_CODE, A.SEQ, A.CUST_NAME, A.BUILDNO || '-' || A.HOUSENO
        HAVING SUM(B.BUNAMT) - NVL(SUM(E.RAMT), 0) > 0)
 GROUP BY CUST_CODE, CUST_NAME, SEQ, DH
 ORDER BY CUST_CODE, SEQ;

/*---------------------------------------------------------------------------*/
/* 6.분양대금선공제 */
/* 7.지체보상금 */
/* 8.임대위탁공제 */
CURSOR CURETC(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2, a_tp IN VARCHAR2) IS
SELECT B.CUST_CODE, MAX(B.CUST_NAME), B.SEQ, MAX(B.BUILDNO || '-' || B.HOUSENO),
       C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.RECEIPTAMT), 0),       NVL(SUM(A.RECEIPTLANDAMT), 0),
       NVL(SUM(A.RECEIPTBUILDAMT), 0),  NVL(SUM(A.RECEIPTVATAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
   AND A.PAYTAG           = a_tp
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* E.과오납입금 */
CURSOR CUROVERIN(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT B.CUST_CODE, MAX(B.CUST_NAME), B.SEQ, MAX(B.BUILDNO || '-' || B.HOUSENO),
       C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.RECEIPTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS           = '90'
   AND A.TIMES            >= 90
   AND A.RECEIPTAMT       > 0
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
 GROUP BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* F.과오납환불 */
CURSOR CUROVEROUT(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT B.CUST_CODE, MAX(B.CUST_NAME), B.SEQ, MAX(B.BUILDNO || '-' || B.HOUSENO),
       C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE,       MAX(A.BANK_NAME),
       NVL(SUM(A.RECEIPTAMT), 0)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS           = '90'
   AND A.TIMES            >= 90
   AND A.RECEIPTAMT       < 0
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
 GROUP BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/* S.대리사무(납입) */
CURSOR CURZM6(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_dt IN VARCHAR2) IS
SELECT B.CUST_CODE, MAX(B.CUST_NAME), B.SEQ, MAX(B.BUILDNO || '-' || B.HOUSENO),
       C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE, MAX(A.BANK_NAME),
       SUM(A.RECEIPTAMT), SUM(A.RECEIPTLANDAMT),
       SUM(CASE WHEN A.RECEIPTVATAMT  = 0 THEN 0 ELSE A.RECEIPTBUILDAMT END),
       SUM(CASE WHEN A.RECEIPTVATAMT <> 0 THEN 0 ELSE A.RECEIPTBUILDAMT END),
       SUM(A.RECEIPTVATAMT),
       SUM(A.DISCNTAMT),
       SUM(A.DELAYAMT)
  FROM HD_HOUS_INCOME A,
       VW_HD_HOUS_SELL B,
       HD_CODE_DEPOSIT C,
       VW_HD_HOUS_SELLDETAIL D
 WHERE A.CUST_CODE        = B.CUST_CODE
   AND A.SEQ              = B.SEQ
   AND A.DEPT_CODE        = C.DEPT_CODE
   AND A.HOUSETAG         = C.HOUSETAG
   AND A.DEPOSIT_NO       = C.DEPOSIT_NO
   AND A.CUST_CODE        = D.CUST_CODE
   AND A.SEQ              = D.SEQ
   AND A.COUNTS           = D.COUNTS
--   AND NVL(A.SLIPSEQ, 0)  = 0
   AND A.DEPT_CODE        = a_dept
   AND A.HOUSETAG         = a_htag
   AND A.RECEIPTDATE      = a_dt
   AND A.COUNTS          <> '99'
   AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
   AND ((B.CHANGETAG  = '1' AND B.CONTRACTDATE <= a_dt) OR
        (B.CHANGETAG <> '1' AND B.CHANGEDATE    > a_dt))
   AND B.LASTCHANGEDATE  <= a_dt
   AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
 GROUP BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE
 ORDER BY B.CUST_CODE, B.SEQ, C.OUTDEPOSITNO, A.DEPOSIT_NO, A.BANK_CODE;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND NVL(SLIPGROUP, '0') <> '1';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장은 개인별로 집계하는 현장이 아닙니다');
      ROLLBACK;
      RETURN;
   END; END IF;

--   v_cnt := 0;
--   SELECT COUNT(*)
--     INTO v_cnt
--     FROM HD_CODE_DEPT A,
--          TM_ENDX_HIS_DAY B
--    WHERE A.COMPANY_CODE = B.COMPANY_CODE
--      AND A.DEPT_CODE = as_dept
--      AND B.END_DAY   = as_dt
--      AND B.END_YN    = 'Y';
--   IF v_cnt > 0 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '해당집계일은 전표마감 되었습니다');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   SELECT COUNT(*)
     INTO v_cnt
     FROM MM_COMM_CONTRACT
    WHERE PROJ_CODE      = as_dept
      AND CONTRACT_CLASS = '09';
   IF v_cnt > 0 THEN
      s_yn := 'Y';
   ELSE
      s_yn := 'N';
   END IF;

/*---------------------------------------------------------------------------*/
   /* --- 계정셋팅 --- */
   IF s_yn = 'N' THEN
      SELECT NVL(MAX(Z1D), 'ERR'), NVL(MAX(Z2D), 'ERR'), NVL(MAX(Z3D), 'ERR'), NVL(MAX(Z4D), 'ERR'),
             NVL(MAX(Z5D), 'ERR'), NVL(MAX(Z6D), 'ERR'), NVL(MAX(Z7D), 'ERR'), NVL(MAX(Z8D), 'ERR'),
             NVL(MAX(Z9D), 'ERR'),
             NVL(MAX(Z1C), 'ERR'), NVL(MAX(Z2C), 'ERR'), NVL(MAX(Z3C), 'ERR'), NVL(MAX(Z4C), 'ERR'),
             NVL(MAX(Z5C), 'ERR'),
             NVL(MAX(S1D), ''),    NVL(MAX(S2D), ''),    NVL(MAX(S3D), ''),    NVL(MAX(S4D), ''),
             NVL(MAX(S5D), ''),    NVL(MAX(S6D), ''),    NVL(MAX(S7D), ''),    NVL(MAX(S8D), ''),
             NVL(MAX(S9D), ''),
             NVL(MAX(S1C), ''),    NVL(MAX(S2C), ''),    NVL(MAX(S3C), ''),    NVL(MAX(S4C), ''),
             NVL(MAX(S5C), '')

        INTO z_1d, z_2d, z_3d, z_4d, z_5d, z_6d, z_7d, z_8d, z_9d,
             z_1c, z_2c, z_3c, z_4c, z_5c,
             s_1d, s_2d, s_3d, s_4d, s_5d, s_6d, s_7d, s_8d, s_9d,
             s_1c, s_2c, s_3c, s_4c, s_5c

        FROM (SELECT DECODE(JCODE, '1D', JACNTCODE, '') AS Z1D, DECODE(JCODE, '2D', JACNTCODE, '') AS Z2D,
                     DECODE(JCODE, '3D', JACNTCODE, '') AS Z3D, DECODE(JCODE, '4D', JACNTCODE, '') AS Z4D,
                     DECODE(JCODE, '5D', JACNTCODE, '') AS Z5D, DECODE(JCODE, '6D', JACNTCODE, '') AS Z6D,
                     DECODE(JCODE, '7D', JACNTCODE, '') AS Z7D, DECODE(JCODE, '8D', JACNTCODE, '') AS Z8D,
                     DECODE(JCODE, '9D', JACNTCODE, '') AS Z9D,
                     DECODE(JCODE, '1C', JACNTCODE, '') AS Z1C, DECODE(JCODE, '2C', JACNTCODE, '') AS Z2C,
                     DECODE(JCODE, '3C', JACNTCODE, '') AS Z3C, DECODE(JCODE, '4C', JACNTCODE, '') AS Z4C,
                     DECODE(JCODE, '5C', JACNTCODE, '') AS Z5C,
                     DECODE(JCODE, '1D', DETAILCODE, '') AS S1D, DECODE(JCODE, '2D', DETAILCODE, '') AS S2D,
                     DECODE(JCODE, '3D', DETAILCODE, '') AS S3D, DECODE(JCODE, '4D', DETAILCODE, '') AS S4D,
                     DECODE(JCODE, '5D', DETAILCODE, '') AS S5D, DECODE(JCODE, '6D', DETAILCODE, '') AS S6D,
                     DECODE(JCODE, '7D', DETAILCODE, '') AS S7D, DECODE(JCODE, '8D', DETAILCODE, '') AS S8D,
                     DECODE(JCODE, '9D', DETAILCODE, '') AS S9D,
                     DECODE(JCODE, '1C', DETAILCODE, '') AS S1C, DECODE(JCODE, '2C', DETAILCODE, '') AS S2C,
                     DECODE(JCODE, '3C', DETAILCODE, '') AS S3C, DECODE(JCODE, '4C', DETAILCODE, '') AS S4C,
                     DECODE(JCODE, '5C', DETAILCODE, '') AS S5C
                FROM HD_CODE_ACNT
               WHERE DEPT_CODE = as_dept
             );
      IF 'ERR' IN (z_1d, z_2d, z_3d, z_4d, z_5d, z_6d, z_7d, z_8d, z_9d, z_1c, z_2c, z_3c, z_4c, z_5c) THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, '전표계정이 정확히 등록되어 있지 않습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   ELSE
      SELECT NVL(MAX(ZSC), 'ERR'), NVL(MAX(ZTC), 'ERR'), 
             NVL(MAX(SSC), ''),    NVL(MAX(STC), '')
        INTO z_sc, z_tc, s_sc, s_tc
        FROM (SELECT DECODE(JCODE, 'SC', JACNTCODE,  '') AS ZSC, DECODE(JCODE, 'TC', JACNTCODE,  '') AS ZTC,
                     DECODE(JCODE, 'SC', DETAILCODE, '') AS SSC, DECODE(JCODE, 'TC', DETAILCODE, '') AS STC
                FROM HD_CODE_ACNT
               WHERE DEPT_CODE = as_dept
             );
      IF 'ERR' IN (z_sc, z_tc, z_sc, z_tc) THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, '대리사무 전표계정이 정확히 등록되어 있지 않습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   END IF;

   /* --- COMPANY SETTING --- */
   SELECT MAX(A.COMPANY_CODE), MAX(A.DEPT_NAME), MAX(B.NM)
     INTO v_company,           v_deptnm,         v_htagnm
     FROM HD_CODE_DEPT A,
          HD_CODE_COMM B
    WHERE A.DEPT_CODE = as_dept
      AND B.GUBUN     = '03'
      AND B.CODE      = as_htag;

   /* --- TAXCOMPCODE SETTING --- */
   SELECT TAX_COMP_CODE
     INTO v_taxcomp
     FROM TM_CODE_DEPT
    WHERE COMPANY_CODE = v_company
      AND DEPT_CODE    = as_dept;

   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /* ***************************************************************************************************** */
   /* ***************************************************************************************     일반분양  */
   /* ***************************************************************************************************** */
   IF s_yn = 'N' THEN
   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD1 정상납입 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 정상납입분';
   v_sliptp  := 'HD1';

       OPEN CURJUNG(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURJUNG
           INTO h1_cust,    h1_custnm,    h1_seq,  h1_dh,
                h1_deposit, h1_deposithd, h1_bank, h1_banknm,
                h1_amt,     h1_lamt,      h1_bamt, h1_vamt,   h1_discnt;
          EXIT WHEN CURJUNG%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || h1_cust || ' ' || h1_custnm || ' ' || h1_dh || ')';

          IF h1_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := h1_vamt;
             v_cust   := h1_cust;
             v_custnm := h1_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   h1_amt,        NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '1-1(정상납입): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 현금(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_1d,
                         v_company,      as_dept,       NULL,            h1_amt,         0,
                         0,              h1_amt,        0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      h1_bank,
                         h1_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h1_bank,         h1_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_1d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '1-2(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF h1_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF h1_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_lamt,         0,              0,
                                h1_lamt,        v_remarkD,     NULL,            v_taxcomp,      h1_cust,
                                h1_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-3(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              h1_no_bamt := 0; h1_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO h1_no_bamt, h1_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C,
                     VW_HD_HOUS_SELLDETAIL D
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
                 AND A.CUST_CODE        = D.CUST_CODE
                 AND A.SEQ              = D.SEQ
                 AND A.COUNTS           = D.COUNTS
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))

                 AND A.RECEIPTDATE      BETWEEN D.ORG_AGREEDATE AND D.AGREEDATE

                 AND A.PAYTAG           NOT IN ('E', 'C', 'F')
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = h1_deposit
                 AND B.CUST_CODE       = h1_cust
                 AND B.SEQ             = h1_seq;

              /* 부가세가 없는 건물가 */
              IF h1_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_no_bamt,      0,              0,
                                h1_no_bamt,     v_remarkD,     NULL,            v_taxcomp,      h1_cust,
                                h1_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-4(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF h1_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_ex_bamt,      0,              h1_vamt,
                                h1_ex_bamt,     v_remarkD,     NULL,            v_taxcomp,      h1_cust,
                                h1_custnm,      v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-5(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF h1_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h1_vamt,         0,              0,
                                h1_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '1-6(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             h1_lamt + h1_bamt,   0,              0,
                            h1_lamt + h1_bamt,   v_remarkD,     NULL,                v_taxcomp,      h1_cust,
                            h1_custnm,           NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '1-7(정상납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '1',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE    = h1_cust
                AND SEQ          = h1_seq
                AND RECEIPTDATE  = as_dt
                AND COUNTS      <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO   = h1_deposithd
                AND PAYTAG       NOT IN ('E', 'C', 'F')
                AND INCOMTYPE    IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS
                               AND HD_HOUS_INCOME.RECEIPTDATE BETWEEN B.ORG_AGREEDATE AND B.AGREEDATE
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '1-8(정상납입): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURJUNG;

/*
   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD2 연체납입 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 연체납입분';
   v_sliptp  := 'HD2';

       OPEN CURYEUN(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURYEUN
           INTO h2_cust,    h2_custnm,    h2_seq,  h2_dh,
                h2_deposit, h2_deposithd, h2_bank, h2_banknm,
                h2_ramt,    h2_delay,     h2_amt,  h2_lamt,   h2_bamt, h2_vamt, h2_discnt;
          EXIT WHEN CURYEUN%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || h2_cust || ' ' || h2_custnm || ' ' || h2_dh || ')';

          IF h2_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := h2_vamt;
             v_cust   := h2_cust;
             v_custnm := h2_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   h2_ramt,       NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '2-1(연체납입): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 보통예금(실납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(실납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            h2_ramt,        0,
                         0,              h2_ramt,       0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      h2_bank,
                         h2_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h2_bank,         h2_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '2-2(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF h2_discnt <> 0 THEN BEGIN
             /* -- 차변 (할인료) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(할인료)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                            DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                            CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                            CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                            QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                            AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                            DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                            DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                   VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                            NULL,           NULL,          NULL,            NULL,           z_3d,
                            v_company,      as_dept,       NULL,            h2_discnt,      0,
                            0,              h2_discnt,     0,               0,              0,
                            0,              v_remarkd,     NULL,            v_taxcomp,      h2_bank,
                            h2_banknm,      NULL,          NULL,            NULL,           NULL,
                            NULL,           v_WorkSeq,     h2_bank,         h2_deposit,     NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            as_dt,          NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           s_3d,
                            as_user,        v_sysdt,       NULL,            NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '2-3(정상납입-할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          IF h2_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF h2_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_lamt,         0,              0,
                                h2_lamt,        v_remarkD,     NULL,            v_taxcomp,      h2_cust,
                                h2_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-3(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              h2_no_bamt := 0; h2_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO h2_no_bamt, h2_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C,
                     VW_HD_HOUS_SELLDETAIL D
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
                 AND A.CUST_CODE        = D.CUST_CODE
                 AND A.SEQ              = D.SEQ
                 AND A.COUNTS           = D.COUNTS
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 
                 AND A.RECEIPTDATE      > D.AGREEDATE

                 AND A.PAYTAG           NOT IN ('E', 'C', 'F')
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO     = h2_deposit
                 AND B.CUST_CODE        = h2_cust
                 AND B.SEQ              = h2_seq;

              /* 부가세가 없는 건물가 */
              IF h2_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_no_bamt,      0,              0,
                                h2_no_bamt,     v_remarkD,     NULL,            v_taxcomp,      h2_cust,
                                h2_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-4(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF h2_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_ex_bamt,      0,              h2_vamt,
                                h2_ex_bamt,     v_remarkD,     NULL,            v_taxcomp,      h2_cust,
                                h2_custnm,      v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-5(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF h2_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h2_vamt,         0,              0,
                                h2_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '2-6(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             h2_lamt + h2_bamt,   0,              0,
                            h2_lamt + h2_bamt,   v_remarkD,     NULL,                v_taxcomp,      h2_cust,
                            h2_custnm,           NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '2-7(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          /* -- 차변 분양수입연체료(연체료) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(연체료)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_3c,
                         v_company,      as_dept,       NULL,            0,              0,
                         0,              0,             h2_delay,        0,              0,
                         h2_delay,       v_remarkD,     NULL,            v_taxcomp,      h2_bank,
                         h2_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h2_bank,         h2_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_3c,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '2-8(연체납입): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '2',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE    = h2_cust
                AND SEQ          = h2_seq
                AND RECEIPTDATE  = as_dt
                AND COUNTS      <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO   = h2_deposithd
                AND PAYTAG       NOT IN ('E', 'C', 'F')
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS
                               AND HD_HOUS_INCOME.RECEIPTDATE > B.AGREEDATE
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '2-9(연체납입): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURYEUN;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD3 선납할인 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 선납할인분';
   v_sliptp  := 'HD3';

       OPEN CURHAL(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURHAL
           INTO h3_cust,    h3_custnm,    h3_seq,  h3_dh,
                h3_deposit, h3_deposithd, h3_bank, h3_banknm,
                h3_ramt,    h3_discnt,    h3_amt,  h3_lamt,   h3_bamt, h3_vamt;
          EXIT WHEN CURHAL%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || h3_cust || ' ' || h3_custnm || ' ' || h3_dh || ')';

          IF h3_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := h3_vamt;
             v_cust   := h3_cust;
             v_custnm := h3_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP,       WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,        INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,           SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,            APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,            as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',                 as_user,
                         v_sysdt,         NULL,           NULL,        NULL,                NULL,
                         NULL,            NULL,           v_remarkH,   h3_ramt + h3_discnt, NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '3-1(선납할인): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 보통예금(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            h3_ramt,        0,
                         0,              h3_ramt,       0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      h3_bank,
                         h3_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h3_bank,         h3_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '3-2(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 분양금선납할인(할인료) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(할인료)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_3d,
                         v_company,      as_dept,       NULL,            h3_discnt,      0,
                         0,              h3_discnt,     0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      h3_bank,
                         h3_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     h3_bank,         h3_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_3d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '3-3(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF h3_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF h3_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_lamt,         0,              0,
                                h3_lamt,        v_remarkD,     NULL,            v_taxcomp,      h3_cust,
                                h3_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-4(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              h3_no_bamt := 0; h3_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO h3_no_bamt, h3_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C,
                     VW_HD_HOUS_SELLDETAIL D
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
                 AND A.CUST_CODE        = D.CUST_CODE
                 AND A.SEQ              = D.SEQ
                 AND A.COUNTS           = D.COUNTS
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 
                 AND A.RECEIPTDATE      < D.ORG_AGREEDATE

                 AND A.PAYTAG           NOT IN ('E', 'C', 'F')
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = h3_deposit
                 AND B.CUST_CODE       = h3_cust
                 AND B.SEQ             = h3_seq;

              /* 부가세가 없는 건물가 */
              IF h3_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_no_bamt,      0,              0,
                                h3_no_bamt,     v_remarkD,     NULL,            v_taxcomp,      h3_cust,
                                h3_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-5(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF h3_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_ex_bamt,      0,              h3_vamt,
                                h3_ex_bamt,     v_remarkD,     NULL,            v_taxcomp,      h3_cust,
                                h3_custnm,      v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-6(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF h3_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             h3_vamt,         0,              0,
                                h3_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '3-7(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             h3_lamt + h3_bamt,   0,              0,
                            h3_lamt + h3_bamt,   v_remarkD,     NULL,                v_taxcomp,      h3_cust,
                            h3_custnm,           NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '3-8(선납할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '3',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE        = h3_cust
                AND SEQ              = h3_seq
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = h3_deposithd
                AND PAYTAG           NOT IN ('E', 'C', 'F')
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS
                               AND HD_HOUS_INCOME.RECEIPTDATE < B.ORG_AGREEDATE
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '3-9(선납할인): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURHAL;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD4 미납 전표 */
   IF s_yn = 'N' THEN
      v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 미납분';
      v_sliptp  := 'HD4';
   ELSE
      v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 미납분<대리사무>';
      v_sliptp  := 'ZM7';
   END IF;

   OPEN CURMI(as_dept, as_htag, as_dt);
   LOOP
      FETCH CURMI
       INTO h4_cust,    h4_custnm,    h4_seq,  h4_dh,
            h4_amt, h4_lamt, h4_bamt, h4_vamt, h4_no_bamt, h4_ex_bamt;
      EXIT WHEN CURMI%NOTFOUND;

      v_WorkSeq := 0;
      v_remarkH := v_remark || '(' || h4_cust || ' ' || h4_custnm || ' ' || h4_dh || ')';

      IF h4_vamt <> 0 THEN BEGIN
         v_ecode  := '11'; 
         v_edate  := as_dt;
         v_ekind  := '010';
         v_vatamt := h4_vamt;
         v_cust   := h4_cust;
         v_custnm := h4_custnm;
      END; ELSE BEGIN
         v_ecode  := ''; 
         v_edate  := '';
         v_ekind  := '';
         v_vatamt := 0;
         v_cust   := '';
         v_custnm := '';
      END; END IF;

       SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
         INTO v_WorkNo
         FROM TM_WORK_WORKNO
        WHERE COMPANY_CODE = v_company
          AND WORK_DATE    = as_dt;

       SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
         INTO v_DeptNo
         FROM TM_WORK_WORKDEPTNO
        WHERE COMPANY_CODE = v_company
          AND DEPT_CODE    = as_dept
          AND WORK_DATE    = as_dt;

      BEGIN
         INSERT INTO TM_SLIP_MASTER
                   ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                     INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                     CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                     APPR_DATE,       DC_YN )
            VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                     v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                     v_sysdt,         NULL,           NULL,        NULL,          NULL,
                     NULL,            NULL,           v_remarkH,   h4_amt,        NULL,
                     NULL,            'Y' );
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '4-1(미납): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                 ROLLBACK;
                 RETURN;
       END;

       /* -- 차변 분양미수금(미수금) -- */
       v_WorkSeq := v_WorkSeq + 1;
       v_remarkD := v_remark || '(미수금)';
       BEGIN
          INSERT INTO TM_SLIP_DETAIL
                    ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                      WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                      SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                      COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                      DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                      CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                      CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                      SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                      BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                      CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                      RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                      CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                      QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                      AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                      DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                      DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                      INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
             VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                      v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                      NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_6d, z_tc),
                      v_company,      as_dept,       NULL,            h4_amt,         0,
                      0,              h4_amt,        0,               0,              0,
                      0,              v_remarkD,     NULL,            v_taxcomp,      NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           NULL,
                      as_dt,          NULL,          NULL,            NULL,           NULL,
                      NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_6d, s_tc),
                      as_user,        v_sysdt,       NULL,            NULL);
          EXCEPTION
             WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, '4-2(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                  ROLLBACK;
                  RETURN;
       END;


       IF h4_vamt <> 0 THEN BEGIN
           /* -- 대변 분양수입선수금(토지가) -- */
           IF h4_lamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkD := v_remark || '(토지가)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_lamt,         0,              0,
                             h4_lamt,        v_remarkD,     NULL,            v_taxcomp,      h4_cust,
                             h4_custnm,      NULL,          NULL,            NULL,           NULL,
                             NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-3(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;

           /* 부가세가 없는 건물가 */
           IF h4_no_bamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkD := v_remark || '(부가세가 없는 건물가)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_no_bamt,      0,              0,
                             h4_no_bamt,     v_remarkD,     NULL,            v_taxcomp,      h4_cust,
                             h4_custnm,      NULL,          NULL,            NULL,           NULL,
                             NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-4(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;

           /* 부가세가 있는 건물가 */
           IF h4_ex_bamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkD := v_remark || '(부가세가 있는 건물가)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_ex_bamt,      0,              h4_vamt,
                             h4_ex_bamt,     v_remarkD,     NULL,            v_taxcomp,      h4_cust,
                             h4_custnm,      v_ecode,       v_edate,         v_ekind,        NULL,
                             NULL,           1,             NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-5(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;

           /* -- 대변 분양수입선수금(부가세) -- */
           IF h4_vamt <> 0 THEN BEGIN
              v_WorkSeq := v_WorkSeq + 1;
              v_remarkD := v_remark || '(부가세)';
              BEGIN
                 INSERT INTO TM_SLIP_DETAIL
                           ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                             WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                             SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                             COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                             DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                             CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                             CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                             SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                             BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                             CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                             RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                             CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                             QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                             AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                             DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                             DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                             INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                    VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                             v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_2c, z_tc),
                             v_company,      as_dept,       NULL,            0,              0,
                             0,              0,             h4_vamt,         0,              0,
                             h4_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                             v_custnm,       NULL,          NULL,            NULL,           NULL,
                             NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           NULL,
                             as_dt,          NULL,          NULL,            NULL,           NULL,
                             NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_2c, s_tc),
                             as_user,        v_sysdt,       NULL,            NULL);
                 EXCEPTION
                    WHEN OTHERS THEN
                         dbms_output.put_line(sqlerrm);
                         RAISE_APPLICATION_ERROR(-20002, '4-6(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                         ROLLBACK;
                         RETURN;
              END;
           END; END IF;
       END; ELSE BEGIN
          /* -- 대변 분양수입선수금(토지가+건물가) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(토지가+건물가)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                         DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                         CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                         CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                         QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                         AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                         DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                         DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                         NULL,                NULL,          NULL,                NULL,           DECODE(s_yn, 'N', z_1c, z_tc),
                         v_company,           as_dept,       NULL,                0,              0,
                         0,                   0,             h4_lamt + h4_bamt,   0,              0,
                         h4_lamt + h4_bamt,   v_remarkD,     NULL,                v_taxcomp,      h4_cust,
                         h4_custnm,           NULL,          NULL,                NULL,           NULL,
                         NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           NULL,
                         as_dt,               NULL,          NULL,                NULL,           NULL,
                         NULL,                NULL,          NULL,                NULL,           DECODE(s_yn, 'N', s_1c, s_tc),
                         as_user,             v_sysdt,       NULL,                NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '4-7(미납): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END; END IF;

      BEGIN
         UPDATE HD_HOUS_SELLDETAIL
            SET SLIPDT           = as_dt,
                SLIPSEQ          = v_WorkNo,
                CHG_DUTY_ID      = as_user,
                CHG_DATE         = v_sysdt
--          WHERE NVL(SLIPSEQ, 0)  = 0
          WHERE DEPT_CODE        = as_dept
            AND HOUSETAG         = as_htag
            AND COUNTS          <> '99'
            AND AGREEDATE        = as_dt
            AND CUST_CODE        = h4_cust
            AND SEQ              = h4_seq
            AND EXISTS (SELECT B.CUST_CODE, MAX(A.CUST_NAME), B.SEQ, B.COUNTS,
                               SUM(B.BUNAMT) - NVL(SUM(E.RAMT), 0) AS MAMT,
                               SUM(B.LANDAMT) - NVL(SUM(E.LAMT), 0) AS LAMT,
                               SUM(B.BUILDAMT) - NVL(SUM(E.BAMT), 0) AS BAMT,
                               SUM(B.VATAMT) - NVL(SUM(E.VAMT), 0) AS VAMT
                          FROM VW_HD_HOUS_SELL A,
                               HD_HOUS_SELLDETAIL B,
                               (SELECT CUST_CODE,
                                       SEQ,
                                       COUNTS,
                                       SUM(RECEIPTAMT) AS RAMT,
                                       SUM(RECEIPTLANDAMT) AS LAMT,
                                       SUM(RECEIPTBUILDAMT) AS BAMT,
                                       SUM(RECEIPTVATAMT) AS VAMT
                                  FROM HD_HOUS_INCOME
                                 WHERE DEPT_CODE    = as_dept
                                   AND HOUSETAG     = as_htag
                                   AND COUNTS      <> '99'
                                   AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                                   AND RECEIPTDATE <= as_dt
                                 GROUP BY CUST_CODE, SEQ, COUNTS
                               ) E
                         WHERE A.CUST_CODE    = B.CUST_CODE
                           AND A.SEQ          = B.SEQ
                           AND B.CUST_CODE    = E.CUST_CODE (+)
                           AND B.SEQ          = E.SEQ       (+)
                           AND B.COUNTS       = E.COUNTS    (+)
                           AND B.COUNTS      <> '99'
                           AND B.CUST_CODE    = HD_HOUS_SELLDETAIL.CUST_CODE
                           AND B.SEQ          = HD_HOUS_SELLDETAIL.SEQ
                           AND B.COUNTS       = HD_HOUS_SELLDETAIL.COUNTS
                           AND B.AGREEDATE    = as_dt
                           AND ((A.CHANGETAG  = '1' AND A.CONTRACTDATE <= as_dt) OR
                                (A.CHANGETAG <> '1' AND A.CHANGEDATE    > as_dt))
                           AND A.LASTCHANGEDATE <= as_dt
                         GROUP BY B.CUST_CODE, B.SEQ, B.COUNTS
                        HAVING SUM(B.BUNAMT) - NVL(SUM(E.RAMT), 0) > 0
                       );
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, '4-8(미납): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END LOOP;
   CLOSE CURMI;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD6 분양대금선공제 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 분양대금선공제분';
   v_sliptp  := 'HD6';

       OPEN CURETC(as_dept, as_htag, as_dt, 'E');
       LOOP
          FETCH CURETC
           INTO he_cust,    he_custnm,    he_seq,  he_dh,
                he_deposit, he_deposithd, he_bank, he_banknm,
                he_amt,     he_lamt,      he_bamt, he_vamt;
          EXIT WHEN CURETC%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || he_cust || ' ' || he_custnm || ' ' || he_dh || ')';

          IF he_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := he_vamt;
             v_cust   := he_cust;
             v_custnm := he_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   he_amt,        NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '6-1(분양대금선공제): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 기타이자(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_4d,
                         v_company,      as_dept,       NULL,            he_amt,         0,
                         0,              he_amt,        0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      he_bank,
                         he_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     he_bank,         he_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_4d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '6-2(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF he_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF he_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_lamt,         0,              0,
                                he_lamt,        v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-3(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              he_no_bamt := 0; he_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO he_no_bamt, he_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND A.PAYTAG           = 'E'
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = he_deposit
                 AND B.CUST_CODE       = he_cust
                 AND B.SEQ             = he_seq;

              /* 부가세가 없는 건물가 */
              IF he_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_no_bamt,      0,              0,
                                he_no_bamt,     v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-4(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF he_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_ex_bamt,      0,              he_vamt,
                                he_ex_bamt,     v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,       v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-5(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF he_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_vamt,         0,              0,
                                he_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '6-6(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             he_lamt + he_bamt,   0,              0,
                            he_lamt + he_bamt,   v_remarkD,     NULL,                v_taxcomp,      he_cust,
                            he_custnm,           NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '6-7(분양대금선공제분): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '6',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE        = he_cust
                AND SEQ              = he_seq
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = he_deposithd
                AND PAYTAG           = 'E'
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8');
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '6-8(분양대금선공제분): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURETC;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD7 지체보상금 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 지체보상금분';
   v_sliptp  := 'HD7';

       OPEN CURETC(as_dept, as_htag, as_dt, 'C');
       LOOP
          FETCH CURETC
           INTO he_cust,    he_custnm,    he_seq,  he_dh,
                he_deposit, he_deposithd, he_bank, he_banknm,
                he_amt,     he_lamt,      he_bamt, he_vamt;
          EXIT WHEN CURETC%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || he_cust || ' ' || he_custnm || ' ' || he_dh || ')';

          IF he_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := he_vamt;
             v_cust   := he_cust;
             v_custnm := he_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   he_amt,        NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '7-1(지체보상금): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 지체보상금(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_5d,
                         v_company,      as_dept,       NULL,            he_amt,         0,
                         0,              he_amt,        0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      he_bank,
                         he_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     he_bank,         he_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_5d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '7-2(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF he_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF he_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_lamt,         0,              0,
                                he_lamt,        v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-3(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              he_no_bamt := 0; he_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO he_no_bamt, he_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND A.PAYTAG           = 'C'
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = he_deposit
                 AND B.CUST_CODE       = he_cust
                 AND B.SEQ             = he_seq;

              /* 부가세가 없는 건물가 */
              IF he_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_no_bamt,      0,              0,
                                he_no_bamt,     v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-4(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF he_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_ex_bamt,      0,              he_vamt,
                                he_ex_bamt,     v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,      v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-5(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF he_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_vamt,         0,              0,
                                he_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '7-6(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             he_lamt + he_bamt,   0,              0,
                            he_lamt + he_bamt,   v_remarkD,     NULL,                v_taxcomp,      he_cust,
                            he_custnm,           NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '7-7(지체보상금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '6',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE        = he_cust
                AND SEQ              = he_seq
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = he_deposithd
                AND PAYTAG           = 'C'
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8');
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '7-8(지체보상금): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURETC;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HD8 임대위탁공제 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 임대위탁공제분';
   v_sliptp  := 'HD8';

       OPEN CURETC(as_dept, as_htag, as_dt, 'F');
       LOOP
          FETCH CURETC
           INTO he_cust,    he_custnm,    he_seq,  he_dh,
                he_deposit, he_deposithd, he_bank, he_banknm,
                he_amt,     he_lamt,      he_bamt, he_vamt;
          EXIT WHEN CURETC%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || he_cust || ' ' || he_custnm || ' ' || he_dh || ')';

          IF he_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := he_vamt;
             v_cust   := he_cust;
             v_custnm := he_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   he_amt,        NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '8-1(임대위탁공제): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 임대위탁공제(납입금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(납입금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_3d,
                         v_company,      as_dept,       NULL,            he_amt,         0,
                         0,              he_amt,        0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      he_bank,
                         he_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     he_bank,         he_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_3d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '8-2(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF he_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF he_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_lamt,         0,              0,
                                he_lamt,        v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-3(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(건물가) -- */ /*부가세 발생, 미발생 나눈다 */
              he_no_bamt := 0; he_ex_bamt := 0;
              SELECT SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0)  = 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END),
                     SUM(CASE WHEN NVL(A.RECEIPTVATAMT, 0) <> 0 THEN NVL(A.RECEIPTBUILDAMT, 0) ELSE 0 END)
                INTO he_no_bamt, he_ex_bamt
                FROM HD_HOUS_INCOME A,
                     VW_HD_HOUS_SELL B,
                     HD_CODE_DEPOSIT C
               WHERE A.CUST_CODE        = B.CUST_CODE
                 AND A.SEQ              = B.SEQ
                 AND A.DEPT_CODE        = C.DEPT_CODE
                 AND A.HOUSETAG         = C.HOUSETAG
                 AND A.DEPOSIT_NO       = C.DEPOSIT_NO
    --             AND NVL(A.SLIPSEQ, 0)  = 0
                 AND A.DEPT_CODE        = as_dept
                 AND A.HOUSETAG         = as_htag
                 AND A.RECEIPTDATE      = as_dt
                 AND A.COUNTS          <> '99'
                 AND ((A.COUNTS <> '90') OR (A.COUNTS = '90' AND A.TIMES < 90))
                 AND A.PAYTAG           = 'F'
                 AND A.INCOMTYPE        IN ('1', '4', '6', '7', '8')
                 AND C.OUTDEPOSITNO    = he_deposit
                 AND B.CUST_CODE       = he_cust
                 AND B.SEQ             = he_seq;

              /* 부가세가 없는 건물가 */
              IF he_no_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_no_bamt,      0,              0,
                                he_no_bamt,     v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-4(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF he_ex_bamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_1c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_ex_bamt,      0,              he_vamt,
                                he_ex_bamt,     v_remarkD,     NULL,            v_taxcomp,      he_cust,
                                he_custnm,      v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_1c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-5(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF he_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_2c,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             he_vamt,         0,              0,
                                he_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_2c,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, '8-6(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(토지가+건물가)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_1c,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             he_lamt + he_bamt,   0,              0,
                            he_lamt + he_bamt,   v_remarkD,     NULL,                v_taxcomp,      he_cust,
                            he_custnm,           NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_1c,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, '8-7(임대위탁공제): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '6',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE        = he_cust
                AND SEQ              = he_seq
                AND RECEIPTDATE      = as_dt
                AND COUNTS          <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO       = he_deposithd
                AND PAYTAG           = 'F'
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8');
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, '8-8(임대위탁공제): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURETC;

   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HDE 과오납입금 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 과오납입금';
   v_sliptp  := 'HDE';

       OPEN CUROVERIN(as_dept, as_htag, as_dt);
       LOOP
          FETCH CUROVERIN
           INTO ho_cust,    ho_custnm,    ho_seq,  ho_dh,
                ho_deposit, ho_deposithd, ho_bank, ho_banknm,
                ho_amt;
          EXIT WHEN CUROVERIN%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || ho_cust || ' ' || ho_custnm || ' ' || ho_dh || ')';

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   ho_amt,        NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'E-1(과오납입금): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 보통예금 -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(보통예금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            ho_amt,         0,
                         0,              ho_amt,        0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      ho_bank,
                         ho_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     ho_bank,         ho_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'E-2(과오납입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 대변 분양수입선수금 -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(분양수입선수금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_7d,
                         v_company,      as_dept,       NULL,            0,              0,
                         0,              0,             ho_amt,          0,              0,
                         ho_amt,         v_remarkD,     NULL,            v_taxcomp,      ho_cust,
                         ho_custnm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_7d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'E-3(과오납입금): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = 'E',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE    = ho_cust
                AND SEQ          = ho_seq
                AND RECEIPTDATE  = as_dt
                AND COUNTS           = '90'
                AND TIMES            >= 90
                AND DEPOSIT_NO   = ho_deposithd
                AND RECEIPTAMT   > 0;
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'E-4(과오납입금): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CUROVERIN;
                                                


   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* HDF 과오납환불 전표 */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 과오납환불';
   v_sliptp  := 'HDF';

       OPEN CUROVERIN(as_dept, as_htag, as_dt);
       LOOP
          FETCH CUROVERIN
           INTO ho_cust,    ho_custnm,    ho_seq,  ho_dh,
                ho_deposit, ho_deposithd, ho_bank, ho_banknm,
                ho_amt;
          EXIT WHEN CUROVERIN%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || ho_cust || ' ' || ho_custnm || ' ' || ho_dh || ')';

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   ho_amt,        NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'F-1(과오납환불): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 분양수입선수금 -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(분양수입선수금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_7d,
                         v_company,      as_dept,       NULL,            ho_amt,         0,
                         0,              ho_amt,        0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_7d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'F-2(과오납환불): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 대변 보통예금 -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(보통예금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_2d,
                         v_company,      as_dept,       NULL,            0,              0,
                         0,              0,             ho_amt,          0,              0,
                         ho_amt,         v_remarkD,     NULL,            v_taxcomp,      NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     ho_bank,         ho_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_2d,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'F-3(과오납환불): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = 'E',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE    = ho_cust
                AND SEQ          = ho_seq
                AND RECEIPTDATE  = as_dt
                AND COUNTS           = '90'
                AND TIMES            >= 90
                AND DEPOSIT_NO   = ho_deposithd
                AND RECEIPTAMT   < 0;
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'F-4(과오납환불): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CUROVERIN;

   /* ***************************************************************************************************** */
   /* ***************************************************************************************************** */
   /* ***************************************************************************************************** */
   ELSE
   /* ***************************************************************************************************** */
   /* ***************************************************************************************     대리사무  */
   /* ***************************************************************************************************** */
   /**** ----------------------------------------------------------------------------------------------- ****/
   /**** ----------------------------------------------------------------------------------------------- ****/
   /* ZM6 대리사무(납입) */
   v_remark  := v_deptnm || ' ' || v_htagnm || ' ' || ' 대리사무(납입)';
   v_sliptp  := 'ZM6';

       OPEN CURZM6(as_dept, as_htag, as_dt);
       LOOP
          FETCH CURZM6
           INTO zs_cust, zs_custnm, zs_seq,   zs_dh,    zs_deposit, zs_deposithd, zs_bank,  zs_banknm,
                zs_amt,  zs_lamt,   zs_bamt1, zs_bamt2, zs_vamt,    zs_discnt,    zs_delay;
          EXIT WHEN CURZM6%NOTFOUND;

          v_WorkSeq := 0;
          v_remarkH := v_remark || '(' || zs_cust || ' ' || zs_custnm || ' ' || zs_dh || ')';

          IF zs_vamt <> 0 THEN BEGIN
             v_ecode  := '11';
             v_edate  := as_dt;
             v_ekind  := '010';
             v_vatamt := zs_vamt;
             v_cust   := zs_cust;
             v_custnm := zs_custnm;
          END; ELSE BEGIN
             v_ecode  := '';
             v_edate  := '';
             v_ekind  := '';
             v_vatamt := 0;
             v_cust   := '';
             v_custnm := '';
          END; END IF;

          SELECT NVL(MAX(WORK_NO_LAST), 0) + 1
            INTO v_WorkNo
            FROM TM_WORK_WORKNO
           WHERE COMPANY_CODE = v_company
             AND WORK_DATE    = as_dt;

          SELECT NVL(MAX(WORK_DEPTNO_LAST), 0) + 1
            INTO v_DeptNo
            FROM TM_WORK_WORKDEPTNO
           WHERE COMPANY_CODE = v_company
             AND DEPT_CODE    = as_dept
             AND WORK_DATE    = as_dt;

          BEGIN
             INSERT INTO TM_SLIP_MASTER
                       ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                         WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                         INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                         CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                         APPR_DATE,       DC_YN )
                VALUES ( v_company,       as_dt,          v_WorkNo,    v_WorkNo,      as_dept,
                         v_DeptNo,        v_sliptp,       '002',       '1',           as_user,
                         v_sysdt,         NULL,           NULL,        NULL,          NULL,
                         NULL,            NULL,           v_remarkH,   zs_amt,        NULL,
                         NULL,            'Y' );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'S-1(대리사무): TM_SLIP_MASTER INSERT중 오류가 발생했습니다'||sqlerrm);
                     ROLLBACK;
                     RETURN;
          END;

          /* -- 차변 보통예금(보통예금) -- */
          v_WorkSeq := v_WorkSeq + 1;
          v_remarkD := v_remark || '(보통예금)';
          BEGIN
             INSERT INTO TM_SLIP_DETAIL
                       ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                         WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                         SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                         COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                         DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                         CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                         CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                         SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                         BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                         CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                         RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                         CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                         QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                         AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                         DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                         DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                         INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                         v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                         NULL,           NULL,          NULL,            NULL,           z_sc,
                         v_company,      as_dept,       NULL,            zs_amt,         0,
                         0,              zs_amt,        0,               0,              0,
                         0,              v_remarkD,     NULL,            v_taxcomp,      zs_bank,
                         zs_banknm,      NULL,          NULL,            NULL,           NULL,
                         NULL,           v_WorkSeq,     zs_bank,         zs_deposit,     NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           NULL,
                         as_dt,          NULL,          NULL,            NULL,           NULL,
                         NULL,           NULL,          NULL,            NULL,           s_sc,
                         as_user,        v_sysdt,       NULL,            NULL);
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'S-2(대리사무): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;

          IF zs_discnt <> 0 THEN BEGIN
             /* -- 차변 (할인료) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkd := v_remark || '(할인료)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                            DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                            CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                            CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                            QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                            AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                            DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                            DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                   VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                            NULL,           NULL,          NULL,            NULL,           z_tc,
                            v_company,      as_dept,       NULL,            zs_discnt,      0,
                            0,              zs_discnt,     0,               0,              0,
                            0,              v_remarkd,     NULL,            v_taxcomp,      zs_bank,
                            zs_banknm,      NULL,          NULL,            NULL,           NULL,
                            NULL,           v_WorkSeq,     zs_bank,         zs_deposit,     NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            as_dt,          NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           s_tc,
                            as_user,        v_sysdt,       NULL,            NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'S-3(대리사무-할인): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          IF zs_vamt <> 0 THEN BEGIN
              /* -- 대변 분양수입선수금(토지가) -- */
              IF zs_lamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(토지가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_lamt,         0,              0,
                                zs_lamt,        v_remarkD,     NULL,            v_taxcomp,      zs_cust,
                                zs_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-4(대리사무-토지가): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 없는 건물가 */
              IF zs_bamt1 <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 없는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_bamt1,        0,              0,
                                zs_bamt1,       v_remarkD,     NULL,            v_taxcomp,      zs_cust,
                                zs_custnm,      NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-5(대리사무-건물가): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* 부가세가 있는 건물가 */
              IF zs_bamt2 <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세가 있는 건물가)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_bamt2,        0,              zs_vamt,
                                zs_bamt2,       v_remarkD,     NULL,            v_taxcomp,      zs_cust,
                                zs_custnm,      v_ecode,       v_edate,         v_ekind,        NULL,
                                NULL,           1,             NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-6(대리사무-건물가): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;

              /* -- 대변 분양수입선수금(부가세) -- */
              IF zs_vamt <> 0 THEN BEGIN
                 v_WorkSeq := v_WorkSeq + 1;
                 v_remarkD := v_remark || '(부가세)';
                 BEGIN
                    INSERT INTO TM_SLIP_DETAIL
                              ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                                WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                                SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                                COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                                DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                                CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                                CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                                SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                                BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                                CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                                RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                                CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                                QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                                AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                                DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                                DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                                INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                       VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                                v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                                NULL,           NULL,          NULL,            NULL,           z_tc,
                                v_company,      as_dept,       NULL,            0,              0,
                                0,              0,             zs_vamt,         0,              0,
                                zs_vamt,        v_remarkD,     NULL,            v_taxcomp,      v_cust,
                                v_custnm,       NULL,          NULL,            NULL,           NULL,
                                NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           NULL,
                                as_dt,          NULL,          NULL,            NULL,           NULL,
                                NULL,           NULL,          NULL,            NULL,           s_tc,
                                as_user,        v_sysdt,       NULL,            NULL);
                    EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line(sqlerrm);
                            RAISE_APPLICATION_ERROR(-20002, 'S-7(대리사무-부가세): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                            ROLLBACK;
                            RETURN;
                 END;
              END; END IF;
          END; ELSE BEGIN
             /* -- 대변 분양수입선수금(토지가+건물가) -- */
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(토지가+건물가)';
             v_slipamt := zs_lamt + zs_bamt1 + zs_bamt2;
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,           WORK_DATE,     WORK_NO,             WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,       WORK_DEPT,     WORK_DEPT_NO,        SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,           SLIP_NO,       CONFIRM_DUTY_ID,     CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,        DEPT_CODE,     PROJ_CODE,           DR_AMT,         DR_CASH,
                            DR_VAT,              DR_SUPPLY,     CR_AMT,              CR_CASH,        CR_VAT,
                            CR_SUPPLY,           REMARK1,       REMARK2,             TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,           EVIDENCE_CODE, EVIDENCE_DATE,       EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,           SLIP_SEQ,      BANK_CODE,           DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,             BILL_R_NO,     LOAN_NO,             STCK_CODE,      FA_NO,
                            CD_CARD_NO,          USER_ID,       PHONE,               INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA,      BILL_KIND,     BILL_DIV,            SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,        TAXSUM_DIV,    INTEREST_DIV,        QTY1,           QTY2,
                            QTY3,                AMT1,          AMT2,                AMT3,           AMT4,
                            AMT5,                AMT6,          RATE1,               RATE2,          RATE3,
                            DATE1,               DATE2,         DATE3,               DATE4,          DESC1,
                            DESC2,               DESC3,         DESC4,               DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,       INPUT_DATE,    CHG_DUTY_ID,         CHG_DATE )
                   VALUES ( v_company,           as_dt,         v_WorkNo,            v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,            as_dept,       v_DeptNo,            v_sliptp,       '002',
                            NULL,                NULL,          NULL,                NULL,           z_tc,
                            v_company,           as_dept,       NULL,                0,              0,
                            0,                   0,             v_slipamt,           0,              0,
                            v_slipamt,           v_remarkD,     NULL,                v_taxcomp,      zs_cust,
                            zs_custnm,           NULL,          NULL,                NULL,           NULL,
                            NULL,                v_WorkSeq,     NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           NULL,
                            as_dt,               NULL,          NULL,                NULL,           NULL,
                            NULL,                NULL,          NULL,                NULL,           s_tc,
                            as_user,             v_sysdt,       NULL,                NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'S-8(대리사무<토지+건물>): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END; END IF;

          /* -- 차변 분양수입연체료(연체료) -- */
          IF zs_delay <> 0 THEN
             v_WorkSeq := v_WorkSeq + 1;
             v_remarkD := v_remark || '(연체료)';
             BEGIN
                INSERT INTO TM_SLIP_DETAIL
                          ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                            WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                            SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                            COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                            DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                            CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                            CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                            SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                            BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                            CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                            RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                            CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                            QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                            AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                            DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                            DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                            INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
                   VALUES ( v_company,      as_dt,         v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                            v_WorkNo,       as_dept,       v_DeptNo,        v_sliptp,       '002',
                            NULL,           NULL,          NULL,            NULL,           z_tc,
                            v_company,      as_dept,       NULL,            0,              0,
                            0,              0,             zs_delay,        0,              0,
                            zs_delay,       v_remarkD,     NULL,            v_taxcomp,      zs_bank,
                            zs_banknm,      NULL,          NULL,            NULL,           NULL,
                            NULL,           v_WorkSeq,     zs_bank,         zs_deposit,     NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           NULL,
                            as_dt,          NULL,          NULL,            NULL,           NULL,
                            NULL,           NULL,          NULL,            NULL,           s_tc,
                            as_user,        v_sysdt,       NULL,            NULL);
                EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'S-9(대리사무-연체료): TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                        ROLLBACK;
                        RETURN;
             END;
          END IF;

          BEGIN
             UPDATE HD_HOUS_INCOME
                SET SLIPDT      = as_dt,
                    SLIPSEQ     = v_WorkNo,
                    SLIPTYPE    = '2',
                    CHG_DUTY_ID = as_user,
                    CHG_DATE    = v_sysdt
    --          WHERE NVL(SLIPSEQ, 0)  = 0
              WHERE CUST_CODE    = zs_cust
                AND SEQ          = zs_seq
                AND RECEIPTDATE  = as_dt
                AND COUNTS      <> '99'
                AND ((COUNTS <> '90') OR (COUNTS = '90' AND TIMES < 90))
                AND DEPOSIT_NO   = zs_deposithd
                AND INCOMTYPE        IN ('1', '4', '6', '7', '8')
                AND EXISTS (SELECT 1
                              FROM VW_HD_HOUS_SELLDETAIL B
                             WHERE HD_HOUS_INCOME.CUST_CODE = B.CUST_CODE
                               AND HD_HOUS_INCOME.SEQ       = B.SEQ
                               AND HD_HOUS_INCOME.COUNTS    = B.COUNTS
                           );
             EXCEPTION
                WHEN OTHERS THEN
                     dbms_output.put_line(sqlerrm);
                     RAISE_APPLICATION_ERROR(-20002, 'S-10(대리사무): HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
                     ROLLBACK;
                     RETURN;
          END;
       END LOOP;
       CLOSE CURZM6;
   END IF;

/************************************************************************************************************/
/************************************************************************************************************/
   /* 분양집계마감 처리 */
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SLIP_MAGAM
    WHERE DEPT_CODE  = as_dept
      AND HOUSETAG   = as_htag;
   IF v_cnt > 0 THEN
      BEGIN
         UPDATE HD_HOUS_SLIP_MAGAM
            SET MAGAMDATE   = as_dt,
                CHG_DUTY_ID = as_user,
                CHG_DATE    = v_sysdt
          WHERE DEPT_CODE   = as_dept
            AND HOUSETAG    = as_htag;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'END: HD_HOUS_SLIP_MAGAM UPDATE중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   ELSE
      BEGIN
         INSERT INTO HD_HOUS_SLIP_MAGAM
                   ( DEPT_CODE, HOUSETAG, MAGAMDATE, INPUT_DUTY_ID, INPUT_DATE )
            VALUES ( as_dept,   as_htag,  as_dt,     as_user,       v_sysdt );
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'END: HD_HOUS_SLIP_MAGAM INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_SLIP_HEJI;

CREATE OR REPLACE PROCEDURE "PROC_HD_SLIP_HEJI" (
   as_cust IN VARCHAR2, --계약자
   as_seq  IN VARCHAR2, --순번
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt       VARCHAR2(14);
v_cnt         NUMBER(10);

v_dept        VARCHAR2(12);
v_deptnm      VARCHAR2(150);
v_htag        VARCHAR2(1);
v_htagnm      VARCHAR2(150);
v_custnm      VARCHAR2(30);
v_dt          VARCHAR2(8);

v_ramt        NUMBER(15);

v_bno         VARCHAR2(10);
v_hno         VARCHAR2(10);
v_r_deposit   VARCHAR2(30);
v_r_bank      VARCHAR2(8);
v_r_banknm    VARCHAR2(30);
v_date        VARCHAR2(8);

v_deposit     VARCHAR2(30);
v_bank        VARCHAR2(8);
v_banknm      VARCHAR2(30);

v_company     VARCHAR2(6);
v_taxcomp        VARCHAR2(6);
v_WorkNo      NUMBER(10);
v_DeptNo      NUMBER(10);
v_WorkSeq     NUMBER(10);
v_Remark      VARCHAR2(500);
v_RemarkD     VARCHAR2(500);
v_sliptp      VARCHAR2(5);

z_1d          VARCHAR2(10); /* 11101100    현금 */
z_2d          VARCHAR2(10); /* 11101300    보통예금 */
z_3d          VARCHAR2(10); /* 55105010    분양선납할인 */
z_4d          VARCHAR2(10); /* 55101110    기타이자 */
z_5d          VARCHAR2(10); /* 55103010    지급위약배상금 */
z_6d          VARCHAR2(10); /* 11116010    분양미수금 */
z_7d          VARCHAR2(10); /* 21117030    분양수입선수금 */
z_8d          VARCHAR2(10); /* 21125010    예수부가세 */
z_9d          VARCHAR2(10); /* 55103010    지급위약배상금 */
z_1c          VARCHAR2(10); /* 21117030    분양수입선수금 */
z_2c          VARCHAR2(10); /* 21125010    예수부가세 */
z_3c          VARCHAR2(10); /* 43111010    분양수입연체료 */
z_4c          VARCHAR2(10); /* 11101300    보통예금 */
z_5c          VARCHAR2(10); /* 43103010    수입위약배상금 */
z_sc          VARCHAR2(10); /* 11101300    보통예금 */
z_tc          VARCHAR2(10); /* 21131010    대리사무 */

/* 수지 계정 */
s_yn             VARCHAR2(1); /* 대리사무현장유무 */
s_1d          VARCHAR2(10);
s_2d          VARCHAR2(10);
s_3d          VARCHAR2(10);
s_4d          VARCHAR2(10);
s_5d          VARCHAR2(10);
s_6d          VARCHAR2(10);
s_7d          VARCHAR2(10);
s_8d          VARCHAR2(10);
s_9d          VARCHAR2(10);
s_1c          VARCHAR2(10);
s_2c          VARCHAR2(10);
s_3c          VARCHAR2(10);
s_4c          VARCHAR2(10);
s_5c          VARCHAR2(10);
s_sc          VARCHAR2(10);
s_tc          VARCHAR2(10);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*---------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_CODE_HOUSE A,
          HD_HOUS_SELL B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.HOUSETAG  = B.HOUSETAG
      AND B.CUST_CODE = as_cust
      AND B.SEQ       = TO_NUMBER(as_seq)
      AND NVL(A.SLIPGROUP, '0') = '0';
   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장은 전표를 생성하는 현장이 아닙니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SELL
    WHERE CUST_CODE = as_cust
      AND SEQ       = TO_NUMBER(as_seq)
      AND CHANGETAG = '3'
      AND LENGTH(NVL(REFUNDMENTDATE, 'X')) = 8;
   IF v_cnt < 1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당 고객은 해약상태가 아니거나 환불처리하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   SELECT A.DEPT_CODE,    A.HOUSETAG,     A.BUILDNO, A.HOUSENO, A.CUST_NAME, D.RECEIPTDATE,
          B.DEPT_NAME,    B.COMPANY_CODE, C.NM,
          E.OUTDEPOSITNO, D.BANK_CODE,
          (SELECT NVL(SUM(RECEIPTAMT), 0)
             FROM HD_HOUS_INCOME
            WHERE CUST_CODE = as_cust
              AND SEQ       = TO_NUMBER(as_seq)
              AND COUNTS <> '99')
     INTO v_dept,         v_htag,         v_bno,     v_hno,     v_custnm,    v_dt,
          v_deptnm,       v_company,      v_htagnm,
          v_deposit,      v_bank,
          v_ramt
     FROM HD_HOUS_SELL A,
          HD_CODE_DEPT B,
          HD_CODE_COMM C,
          HD_HOUS_INCOME D,
          HD_CODE_DEPOSIT E
    WHERE A.DEPT_CODE  = B.DEPT_CODE
      AND A.HOUSETAG   = C.CODE
      AND C.GUBUN      = '03'
      AND A.CUST_CODE  = D.CUST_CODE
      AND A.SEQ        = D.SEQ
      AND D.COUNTS     = '99'
      AND D.DEPT_CODE  = E.DEPT_CODE
      AND D.HOUSETAG   = E.HOUSETAG
      AND D.DEPOSIT_NO = E.DEPOSIT_NO
      AND A.CUST_CODE  = as_cust
      AND A.SEQ        = TO_NUMBER(as_seq);

   /* --- TACCOMPCODE SETTING --- */
   SELECT TAX_COMP_CODE
     INTO v_taxcomp
     FROM TM_CODE_DEPT
    WHERE COMPANY_CODE = v_company
      AND DEPT_CODE    = v_dept;

   SELECT COUNT(*)
     INTO v_cnt
     FROM MM_COMM_CONTRACT
    WHERE PROJ_CODE      = v_dept
      AND CONTRACT_CLASS = '09';
   IF v_cnt > 0 THEN
      s_yn := 'Y';
   ELSE
      s_yn := 'N';
   END IF;

   /*---------------------------------------------------------------------------*/
   /* --- 계정셋팅 --- */
   IF s_yn = 'N' THEN
      SELECT NVL(MAX(Z1D), 'ERR'), NVL(MAX(Z2D), 'ERR'), NVL(MAX(Z3D), 'ERR'), NVL(MAX(Z4D), 'ERR'),
             NVL(MAX(Z5D), 'ERR'), NVL(MAX(Z6D), 'ERR'), NVL(MAX(Z7D), 'ERR'), NVL(MAX(Z8D), 'ERR'),
             NVL(MAX(Z9D), 'ERR'),
             NVL(MAX(Z1C), 'ERR'), NVL(MAX(Z2C), 'ERR'), NVL(MAX(Z3C), 'ERR'), NVL(MAX(Z4C), 'ERR'),
             NVL(MAX(Z5C), 'ERR'),
             NVL(MAX(S1D), ''),    NVL(MAX(S2D), ''),    NVL(MAX(S3D), ''),    NVL(MAX(S4D), ''),
             NVL(MAX(S5D), ''),    NVL(MAX(S6D), ''),    NVL(MAX(S7D), ''),    NVL(MAX(S8D), ''),
             NVL(MAX(S9D), ''),
             NVL(MAX(S1C), ''),    NVL(MAX(S2C), ''),    NVL(MAX(S3C), ''),    NVL(MAX(S4C), ''),
             NVL(MAX(S5C), '')

        INTO z_1d, z_2d, z_3d, z_4d, z_5d, z_6d, z_7d, z_8d, z_9d,
             z_1c, z_2c, z_3c, z_4c, z_5c,
             s_1d, s_2d, s_3d, s_4d, s_5d, s_6d, s_7d, s_8d, s_9d,
             s_1c, s_2c, s_3c, s_4c, s_5c

        FROM (SELECT DECODE(JCODE, '1D', JACNTCODE, '') AS Z1D, DECODE(JCODE, '2D', JACNTCODE, '') AS Z2D,
                     DECODE(JCODE, '3D', JACNTCODE, '') AS Z3D, DECODE(JCODE, '4D', JACNTCODE, '') AS Z4D,
                     DECODE(JCODE, '5D', JACNTCODE, '') AS Z5D, DECODE(JCODE, '6D', JACNTCODE, '') AS Z6D,
                     DECODE(JCODE, '7D', JACNTCODE, '') AS Z7D, DECODE(JCODE, '8D', JACNTCODE, '') AS Z8D,
                     DECODE(JCODE, '9D', JACNTCODE, '') AS Z9D,
                     DECODE(JCODE, '1C', JACNTCODE, '') AS Z1C, DECODE(JCODE, '2C', JACNTCODE, '') AS Z2C,
                     DECODE(JCODE, '3C', JACNTCODE, '') AS Z3C, DECODE(JCODE, '4C', JACNTCODE, '') AS Z4C,
                     DECODE(JCODE, '5C', JACNTCODE, '') AS Z5C,
                     DECODE(JCODE, '1D', DETAILCODE, '') AS S1D, DECODE(JCODE, '2D', DETAILCODE, '') AS S2D,
                     DECODE(JCODE, '3D', DETAILCODE, '') AS S3D, DECODE(JCODE, '4D', DETAILCODE, '') AS S4D,
                     DECODE(JCODE, '5D', DETAILCODE, '') AS S5D, DECODE(JCODE, '6D', DETAILCODE, '') AS S6D,
                     DECODE(JCODE, '7D', DETAILCODE, '') AS S7D, DECODE(JCODE, '8D', DETAILCODE, '') AS S8D,
                     DECODE(JCODE, '9D', DETAILCODE, '') AS S9D,
                     DECODE(JCODE, '1C', DETAILCODE, '') AS S1C, DECODE(JCODE, '2C', DETAILCODE, '') AS S2C,
                     DECODE(JCODE, '3C', DETAILCODE, '') AS S3C, DECODE(JCODE, '4C', DETAILCODE, '') AS S4C,
                     DECODE(JCODE, '5C', DETAILCODE, '') AS S5C
                FROM HD_CODE_ACNT
               WHERE DEPT_CODE = v_dept
             );
      IF 'ERR' IN (z_1d, z_2d, z_3d, z_4d, z_5d, z_6d, z_7d, z_8d, z_9d, z_1c, z_2c, z_3c, z_4c, z_5c) THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, '전표계정이 정확히 등록되어 있지 않습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   ELSE
      SELECT NVL(MAX(ZSC), 'ERR'), NVL(MAX(ZTC), 'ERR'), 
             NVL(MAX(SSC), ''),    NVL(MAX(STC), '')
        INTO z_sc, z_tc, s_sc, s_tc
        FROM (SELECT DECODE(JCODE, 'SC', JACNTCODE,  '') AS ZSC, DECODE(JCODE, 'TC', JACNTCODE,  '') AS ZTC,
                     DECODE(JCODE, 'SC', DETAILCODE, '') AS SSC, DECODE(JCODE, 'TC', DETAILCODE, '') AS STC
                FROM HD_CODE_ACNT
               WHERE DEPT_CODE = v_dept
             );
      IF 'ERR' IN (z_sc, z_tc, z_sc, z_tc) THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, '대리사무 전표계정이 정확히 등록되어 있지 않습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   v_cnt := 0; v_WorkSeq := 0;
   v_remark := v_deptnm || ' ' || v_htagnm || ' ' || ' 해지분(' || v_bno || '-' || v_hno || ') ' || v_custnm;

--      v_ecode := ''; 
--      v_edate := '';
--      v_ekind := '';
--      v_vatamt := 0;
--      v_cust   := '';
--      v_custnm := '';

   SELECT NVL(MAX(WORK_NO_LAST),0) + 1
     INTO v_WorkNo
     FROM TM_WORK_WORKNO
    WHERE COMPANY_CODE = v_company
      AND WORK_DATE    = v_dt;

   SELECT NVL(MAX(WORK_DEPTNO_LAST),0) + 1
     INTO v_DeptNo
     FROM TM_WORK_WORKDEPTNO
    WHERE COMPANY_CODE = v_company
      AND DEPT_CODE    = v_dept
      AND WORK_DATE    = v_dt;

   BEGIN
      INSERT INTO TM_SLIP_MASTER
                ( WORK_COMP,       WORK_DATE,      WORK_NO,     WORK_NO_GROUP, WORK_DEPT,
                  WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,    CHECK_STATUS,  INPUT_DUTY_ID,
                  INPUT_DATE,      CHG_DUTY_ID,    CHG_DATE,    SLIP_DATE,     SLIP_NO,
                  CONFIRM_DUTY_ID, CONFIRM_DATE,   SLIP_REMARK, SLIP_AMT,      APPR_DUTY_ID,
                  APPR_DATE,       DC_YN )
         VALUES ( v_company,       v_dt,           v_WorkNo,    v_WorkNo,      v_dept,
                  v_DeptNo,        'HD5',          '002',       '1',           as_user,
                  v_sysdt,         NULL,           NULL,        NULL,          NULL,
                  NULL,            NULL,           v_remark,    v_ramt + 0,    NULL,
                  NULL,            'Y' );
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '1: TM_SLIP_MASTER INSERT중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   IF v_ramt <> 0 THEN BEGIN
      v_WorkSeq := v_WorkSeq + 1;
      v_remarkd := v_remark || '(납입원금)';
      BEGIN
         INSERT INTO TM_SLIP_DETAIL
                   ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                     WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                     SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                     COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                     DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                     CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                     CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                     SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                     BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                     CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                     RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                     CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                     QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                     AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                     DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                     DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                     INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
            VALUES ( v_company,      v_dt,          v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                     v_WorkNo,       v_dept,        v_DeptNo,        'HD5',          '002',
                     NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_7d, z_tc),
                     v_company,      v_dept,        NULL,            v_ramt,         0,
                     0,              v_ramt,        0,               0,              0,
                     0,              v_remarkd,     NULL,            v_taxcomp,      NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           v_WorkSeq,     NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     v_dt,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_7d, s_tc),
                     as_user,        v_sysdt,       NULL,            NULL);
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm);
                 RAISE_APPLICATION_ERROR(-20002, '2: TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END; END IF;

   IF v_ramt <> 0 THEN BEGIN
      v_WorkSeq := v_WorkSeq + 1;
      v_remarkd := v_remark || '(실환불액)';
      BEGIN
         INSERT INTO TM_SLIP_DETAIL
                   ( WORK_COMP,      WORK_DATE,     WORK_NO,         WORK_SEQ,       WORK_SEQ_SCR,
                     WORK_NO_GROUP,  WORK_DEPT,     WORK_DEPT_NO,    SLIP_KIND_CODE, SLIP_DIV,
                     SLIP_DATE,      SLIP_NO,       CONFIRM_DUTY_ID, CONFIRM_DATE,   ACNT_CODE,
                     COMPANY_CODE,   DEPT_CODE,     PROJ_CODE,       DR_AMT,         DR_CASH,
                     DR_VAT,         DR_SUPPLY,     CR_AMT,          CR_CASH,        CR_VAT,
                     CR_SUPPLY,      REMARK1,       REMARK2,         TAX_COMP_CODE,  CUST_CODE,
                     CUST_NAME,      EVIDENCE_CODE, EVIDENCE_DATE,   EVIDENCE_KIND,  EVIDENCE_NO,
                     SALES_DIV,      SLIP_SEQ,      BANK_CODE,       DEPOSIT_NO,     CHECK_NO,
                     BILL_NO,        BILL_R_NO,     LOAN_NO,         STCK_CODE,      FA_NO,
                     CD_CARD_NO,     USER_ID,       PHONE,           INCOME_CODE,    SALES_CODE,
                     RECEPTION_AREA, BILL_KIND,     BILL_DIV,        SECU_TYPE_CODE, RECEIPT_DIV,
                     CURRENCY_DIV,   TAXSUM_DIV,    INTEREST_DIV,    QTY1,           QTY2,
                     QTY3,           AMT1,          AMT2,            AMT3,           AMT4,
                     AMT5,           AMT6,          RATE1,           RATE2,          RATE3,
                     DATE1,          DATE2,         DATE3,           DATE4,          DESC1,
                     DESC2,          DESC3,         DESC4,           DESC5,          DETAIL_CODE,
                     INPUT_DUTY_ID,  INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE )
            VALUES ( v_company,      v_dt,          v_WorkNo,        v_WorkSeq,      v_WorkSeq,
                     v_WorkNo,       v_dept,        v_DeptNo,        'HD5',          '002',
                     NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', z_4c, z_tc),
                     v_company,      v_dept,        NULL,            0,              0,
                     0,              0,             v_ramt,          0,              0,
                     v_ramt,         v_remarkd,     NULL,            v_taxcomp,      NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           v_WorkSeq,     v_bank,          v_deposit,      NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           NULL,
                     v_dt,           NULL,          NULL,            NULL,           NULL,
                     NULL,           NULL,          NULL,            NULL,           DECODE(s_yn, 'N', s_4c, s_tc),
                     as_user,        v_sysdt,       NULL,            NULL);
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, '3: TM_SLIP_DETAIL INSERT중 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END; END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_INCOME
         SET SLIPDT      = v_dt,
             SLIPSEQ     = v_WorkNo,
             SLIPTYPE    = '5',
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE CUST_CODE   = as_cust
         AND SEQ         = TO_NUMBER(as_seq)
         AND COUNTS      = '99';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '4: HD_HOUS_INCOME UPDATE중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELL
         SET SLIPDATE    = v_dt,
             SLIPSEQ     = v_WorkNo,
             CHG_DUTY_ID = as_user,
             CHG_DATE    = v_sysdt
       WHERE CUST_CODE   = as_cust
         AND SEQ         = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '5: HD_HOUS_SELL UPDATE중 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_SLIP_HEJI_DEL;

CREATE OR REPLACE PROCEDURE "PROC_HD_SLIP_HEJI_DEL" (
   as_cust IN VARCHAR2, --계약자
   as_seq  IN VARCHAR2, --순번
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt       VARCHAR2(14);
v_cnt         NUMBER(10);

v_company     VARCHAR2(6);
v_slipdt      VARCHAR2(8);
v_slipseq     NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   SELECT NVL(MAX(A.SLIPSEQ), 0), MAX(A.SLIPDATE), MAX(B.COMPANY_CODE)
     INTO v_slipseq,              v_slipdt,        v_company
     FROM HD_HOUS_SELL A,
          HD_CODE_DEPT B
    WHERE A.DEPT_CODE = B.DEPT_CODE
      AND A.CUST_CODE = as_cust
      AND A.SEQ       = TO_NUMBER(as_seq);

   SELECT COUNT(*)
     INTO v_cnt
     FROM TM_SLIP_DETAIL
    WHERE WORK_COMP      = v_company
      AND WORK_DATE      = v_slipdt
      AND WORK_NO        = v_slipseq
      AND SLIP_KIND_CODE IN ('HD5', 'ZM8');

   IF v_slipseq > 0 AND v_cnt > 0 THEN
      SELECT COUNT(*)
        INTO v_cnt
        FROM TM_SLIP_DETAIL
       WHERE WORK_COMP     = v_company
         AND WORK_DATE     = v_slipdt
         AND CHECK_STATUS IN ('2', '3')
         AND WORK_NO       = v_slipseq;
      IF v_cnt > 0 THEN
         RAISE_APPLICATION_ERROR(-20002, '1: 해당 환불내역의 환불전표는 확정 전표 입니다');
         ROLLBACK;
         RETURN;
      END IF;

/*
      BEGIN
         DELETE TM_SLIP_DETAIL
          WHERE WORK_COMP = v_company
            AND WORK_DATE = v_slipdt
            AND SLIP_KIND_CODE IN ('HD5', 'ZM8')
            AND WORK_NO      = v_slipseq;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, '1: TM_SLIP_DETAIL DELETE 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
*/

      BEGIN
         DELETE TM_SLIP_MASTER
          WHERE WORK_COMP       = v_company
            AND WORK_DATE       = v_slipdt
            AND WORK_NO         = v_slipseq
            AND SLIP_KIND_CODE IN ('HD5', 'ZM8');
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, '2: TM_SLIP_MASTER DELETE 오류가 발생했습니다');
                 ROLLBACK;
                 RETURN;
      END;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_INCOME
       WHERE CUST_CODE = as_cust
         AND SEQ       = TO_NUMBER(as_seq)
         AND COUNTS    = '99';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '3: HD_HOUS_INCOME DELETE 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      DELETE HD_HOUS_SELLDETAIL
       WHERE CUST_CODE = as_cust
         AND SEQ       = TO_NUMBER(as_seq)
         AND COUNTS    = '99';
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '4: HD_HOUS_SELLDETAIL DELETE 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SELL
         SET REFUNDMENTDATE      = '',
             INT_CALC_DATE       = '',
             REFUNDMENTAMT       =  0,
             PENALTYAMT          =  0,
             LOAN_INTEREST       =  0,
             SODUK_TAX           =  0,
             JUMIN_TAX           =  0,
             BANK_LOAN_ORGAMT    =  0,
             BANK_LOAN_INTEREST  =  0,
             BANK_LOAN_INTEREST2 =  0,
             ETC_AMT             =  0,
             LOANBANK            = '',
             LOANDEPOSIT         = '',
             LOANUSER            = '',
             CHG_DUTY_ID         = as_user,
             CHG_DATE            = v_sysdt
       WHERE CUST_CODE = as_cust
         AND SEQ       = TO_NUMBER(as_seq);
      EXCEPTION
         WHEN OTHERS THEN
              dbms_output.put_line(sqlerrm); 
              RAISE_APPLICATION_ERROR(-20002, '5: HD_HOUS_SELL UPDATE 오류가 발생했습니다');
              ROLLBACK;
              RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_JICHE_ICHE;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_JICHE_ICHE" (
   as_dept    IN VARCHAR2, --현장
   as_htag    IN VARCHAR2, --분양구분
   as_user    IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_cnt      NUMBER(5);
v_cnt2     NUMBER(5);
v_inseq    NUMBER(5);
v_sysdt    VARCHAR2(14);
v_deposit  VARCHAR2(30);

c_cust     VARCHAR2(20);
c_seq      NUMBER(5);
c_dt       VARCHAR2(8);
c_amt      NUMBER(15);
c_bno      VARCHAR2(10);
c_hno      VARCHAR2(10);
c_custname VARCHAR2(100);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 지체보상자료중 현제 계약상태이고 최종변경일이후 입금일이어야 입금처리가 가능 */
CURSOR CURCUST(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT A.CUST_CODE,
       A.SEQ,
       A.ICHE_DATE,
       A.DELAY_INDEMINITY,
       B.BUILDNO,
       B.HOUSENO,
       B.CUST_NAME
  FROM HD_HOUS_INDEMINITY A,
       HD_HOUS_SELL B
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.ICHE_YN   = 'N'
   AND B.CHANGETAG = '1'
   AND B.LASTCHANGEDATE <= A.ICHE_DATE
   AND A.CUST_CODE = B.CUST_CODE
   AND A.SEQ       = B.SEQ
   AND NOT EXISTS (SELECT 1
                     FROM HD_HOUS_INCOME E
                    WHERE E.CUST_CODE   = A.CUST_CODE
                      AND E.SEQ         = A.SEQ
                      AND E.RECEIPTDATE > A.ICHE_DATE
                  )
   AND NOT EXISTS (SELECT 1
                     FROM HD_HOUS_SELLDETAIL F
                    WHERE F.CUST_CODE   = A.CUST_CODE
                      AND F.SEQ         = A.SEQ
                      AND F.COUNTS      < '90'
                      AND F.PERPECTTAG  = 'N'
                  );

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0; v_cnt2 := 0;
   SELECT NVL(SUM(DECODE(B.CHK, -1, 1, 0)), 0),
          NVL(SUM(DECODE(B.CHK, -2, 1, 0)), 0)
     INTO v_cnt, v_cnt2
     FROM (SELECT A.DT, F_HD_GET_MAGAM(as_dept, as_htag, A.DT) AS CHK
             FROM (SELECT DISTINCT ICHE_DATE AS DT
                     FROM HD_HOUS_INDEMINITY
                    WHERE DEPT_CODE = as_dept
                      AND HOUSETAG  = as_htag
                      AND ICHE_YN   = 'N'
                  ) A
          ) B
    WHERE B.CHK <> 0;

   IF v_cnt > 0 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '이체자료의 일부날자가 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;

--   IF v_cnt2 > 0 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '이체자료의 일부날자가 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_deposit  := '';

   SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag
      AND RECEIPTTAG NOT IN ('8', '9')
      AND ROWNUM < 2
    ORDER BY LISTORDER;
   IF v_deposit = 'XXXXX' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 입금계좌를 등록하지 않았습니다');
      ROLLBACK;
      RETURN;
   END; END IF;

   /*------------------------------------------------------------------------*/
   OPEN CURCUST(as_dept, as_htag);
   LOOP
      FETCH CURCUST 
       INTO c_cust, c_seq, c_dt, c_amt, c_bno, c_hno, c_custname;
      EXIT WHEN CURCUST%NOTFOUND;

      v_inseq := 0;
      SELECT NVL(MAX(INSEQ), 0) + 1
        INTO v_inseq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND INDT      = c_dt;

      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,   INDT,        INSEQ,
                     BUILDNO,       HOUSENO,    CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO, INAMT,       INGUBUN,
                     INTYPE,        IHE_YN,     CDNO,        MOD_YN,
                     MOD_RAMT,      MOD_DAMT,   VDEPOSIT_NO,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE,
                     OUT_DT,        OUT_TM,     OUT_SEQ,     OUT_BANK,
                     REMARK,        CD_BANK,    CD_EDATE,    CD_STYPE
                   )
            VALUES ( as_dept,       as_htag,    c_dt,        v_inseq,
                     c_bno,         c_hno,      c_cust,      c_seq,
                     c_custname,    v_deposit,  c_amt,       'C',
                     '7',           'N',        '',          'Y',
                     0,             0,          '',
                     as_user,       v_sysdt,    '',          '',
                     '',            '',         0,           '',
                     '',            '',         '',          ''
                   );
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME ER_01: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;
      PROC_HD_INCOME_CALC(c_cust, c_seq, c_dt, v_inseq);
   END LOOP;
   CLOSE CURCUST;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_CONT_SUBSCONT;

CREATE OR REPLACE PROCEDURE "PROC_HD_CONT_SUBSCONT" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --작업자
)
IS

/*---------------------------------------------------------------------------*/
c_seq       NUMBER(10);
c_cust      VARCHAR2(20);
c_custnm    VARCHAR2(50);
c_amt       NUMBER(15);
c_subsdt    VARCHAR2(8);
c_contdt    VARCHAR2(8);
c_buildno   VARCHAR2(10);
c_houseno   VARCHAR2(10);
c_vbank     VARCHAR2(8);
c_vdeposit  VARCHAR2(30);
c_contno    VARCHAR2(10);
c_incom_yn  VARCHAR2(1);
c_vir_yn    VARCHAR2(10);
c_mdeposit  VARCHAR2(30);

/*---------------------------------------------------------------------------*/
i_outdt        VARCHAR2(8);
i_outtm        VARCHAR2(6);
i_outseq       FLOAT;
i_bank         VARCHAR2(6);
i_amt          NUMBER(15);
i_vdeposit     VARCHAR2(30);

/*---------------------------------------------------------------------------*/
v_cnt         NUMBER(10);
v_sysdt       VARCHAR2(14);
v_subscontdt  VARCHAR2(8);

v_depositHD   VARCHAR2(20);
v_inseq       NUMBER(10);
v_custseq     NUMBER(10);

v_msdt        VARCHAR2(8);
v_medt        VARCHAR2(8);
v_dmt         VARCHAR2(1);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE IS
SELECT A.SEQ, A.CUST_CODE, A.CUST_NAME, A.AMT, A.SUBSCRIBE_DATE, A.WIN_DATE,
       A.BUILDNO, A.HOUSENO, A.VIRBANK_CODE, A.VDEPOSIT, A.CONT_NO,
       A.INCOM_YN, A.VIR_YN,
       DECODE(A.VIR_YN, 'N', A.MDEPOSIT, B.PA_DEPOSITNO) AS MDEPOSIT
  FROM (SELECT A.SEQ,
               A.CUST_CODE,
               B.CUST_NAME,
               DECODE(NVL(A.INCOM_YN, 'N'), 'N', 0, NVL(A.SUBSCRIBE_AMT, 0)) AS AMT,
               A.SUBSCRIBE_DATE,
               A.WIN_DATE,
               A.BUILDNO,
               A.HOUSENO,
               A.INCOM_YN,
               C.VIRBANK_CODE,
               NVL(A.VIR_YN, 'N') AS VIR_YN,
               DECODE(NVL(A.VIR_YN, 'N'), 'N', '', A.VDEPOSIT_NO) AS VDEPOSIT,
               DECODE(NVL(A.VIR_YN, 'N'), 'N', D.DEPOSIT_NO, '') AS MDEPOSIT,
               A.CONT_NO
          FROM HD_HOUS_SUBSCRIBE A,
               VW_HD_CODE_CUSTOMER B,
               HD_CODE_HOUSE C,
               (SELECT DEPT_CODE,
                       NVL(MAX(DEPOSIT_NO), 'XXXXX') AS DEPOSIT_NO
                  FROM HD_CODE_DEPOSIT A
                 WHERE DEPT_CODE = as_dept
                   AND HOUSETAG  = as_htag
                   AND RECEIPTTAG NOT IN ('8', '9')
                   AND ROWNUM < 2
                 GROUP BY DEPT_CODE
               ) D
         WHERE A.DEPT_CODE     = as_dept
           AND A.HOUSETAG      = as_htag
           AND A.SUBSCRIBE_TAG = '1'
           AND A.REGIST_YN     = 'N'
           AND A.ACT_YN        = 'Y'
           AND NVL(LENGTH(A.ERR_TEXT), 0) = 0
           AND A.CUST_CODE = B.CUST_CODE
           AND A.DEPT_CODE = C.DEPT_CODE
           AND A.HOUSETAG  = C.HOUSETAG
           AND A.DEPT_CODE = D.DEPT_CODE
       ) A,
       SM_TRANS_VIRTURE_DEPOSIT B
 WHERE A.VIRBANK_CODE = B.BANK_CODE
   AND A.VDEPOSIT     = B.VIR_DEPOSITNO
   AND '100'          = B.COMPANY_CODE
 ORDER BY SEQ;

/*---------------------------------------------------------------------------*/
CURSOR CURVIN(a_vd IN VARCHAR2) IS
SELECT A.TXDATE,
       A.TXTIME,
       A.JMSEQNO,
       A.BANKCODE,
       A.PAYTXAMT,
       B.PA_DEPOSITNO
  FROM SM_TRANS_CB3_CVS_DATA A,
       SM_TRANS_VIRTURE_DEPOSIT B
 WHERE A.PROJ_CODE   = as_dept
   AND A.HOUSETAG    = as_htag
   AND A.VACCTNO     = a_vd
   AND A.PROC_STATUS <> '1'
   AND A.BANKCODE    = B.BANK_CODE
   AND A.VACCTNO     = B.VIR_DEPOSITNO
 ORDER BY A.TXDATE, A.TXTIME, A.JMSEQNO;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SUBSCRIBE
    WHERE DEPT_CODE     = as_dept
      AND HOUSETAG      = as_htag     
      AND SUBSCRIBE_TAG = '1'
      AND REGIST_YN     = 'N'
      AND ACT_YN        = 'Y'
      AND VIR_YN        = 'N'
      AND INCOM_YN      = 'Y';
   IF v_cnt > 0 THEN
      SELECT NVL(MAX(DEPOSIT_NO), 'XXXXX')
        INTO v_depositHD
        FROM HD_CODE_DEPOSIT A
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND RECEIPTTAG NOT IN ('8', '9')
         AND ROWNUM < 2
       ORDER BY LISTORDER;
      IF v_depositHD = 'XXXXX' THEN BEGIN
         RAISE_APPLICATION_ERROR(-20002, '해당현장에 입금계좌를 등록하지 않았습니다');
         ROLLBACK;
         RETURN;
      END; END IF;
   END IF;

   SELECT MOVEINSTARTDATE, MOVEINENDDATE, HD_DAYMONTH_TAG
     INTO v_msdt,          v_medt,        v_dmt
     FROM HD_CODE_HOUSE
    WHERE DEPT_CODE = as_dept
      AND HOUSETAG  = as_htag;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   v_subscontdt := SUBSTR(v_sysdt, 1, 8);
   v_cnt   := 0;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SUBSCRIBE
         SET ERR_TEXT      = '',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = as_dept
         AND HOUSETAG      = as_htag     
         AND SUBSCRIBE_TAG = '1'
         AND REGIST_YN     = 'N'
         AND ACT_YN        = 'Y';
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUBSCRIBE 01 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SUBSCRIBE
         SET ERR_TEXT      = '이미 사용한 계약서 번호 입니다',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = as_dept
         AND HOUSETAG      = as_htag     
         AND SUBSCRIBE_TAG = '1'
         AND REGIST_YN     = 'N'
         AND ACT_YN        = 'Y'
         AND NVL(LENGTH(ERR_TEXT), 0) = 0
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A
                      WHERE A.DEPT_CODE  = as_dept
                        AND A.HOUSETAG   = as_htag
                        AND A.CONTRACTNO = HD_HOUS_SUBSCRIBE.CONT_NO);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUBSCRIBE 02 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SUBSCRIBE
         SET ERR_TEXT      = '존재하지않는 고객번호입니다',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = as_dept
         AND HOUSETAG      = as_htag     
         AND SUBSCRIBE_TAG = '1'
         AND REGIST_YN     = 'N'
         AND ACT_YN        = 'Y'
         AND NVL(LENGTH(ERR_TEXT), 0) = 0
         AND NOT EXISTS (SELECT 1
                           FROM VW_HD_CODE_CUSTOMER A
                          WHERE A.CUST_CODE  = HD_HOUS_SUBSCRIBE.CUST_CODE);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUBSCRIBE 03 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SUBSCRIBE
         SET ERR_TEXT      = '이미 계약된 동호 입니다',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = as_dept
         AND HOUSETAG      = as_htag     
         AND SUBSCRIBE_TAG = '1'
         AND REGIST_YN     = 'N'
         AND ACT_YN        = 'Y'
         AND NVL(LENGTH(ERR_TEXT), 0) = 0
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.CHANGETAG = '1'
                        AND A.BUILDNO   = HD_HOUS_SUBSCRIBE.BUILDNO
                        AND A.HOUSENO   = HD_HOUS_SUBSCRIBE.HOUSENO);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUBSCRIBE 04 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   BEGIN
      UPDATE HD_HOUS_SUBSCRIBE
         SET ERR_TEXT      = '청약시 입금된 가상계좌와 해당동호로 지정된 가상계좌가 다릅니다',
             CHG_DUTY_ID   = as_user,
             CHG_DATE      = v_sysdt
       WHERE DEPT_CODE     = as_dept
         AND HOUSETAG      = as_htag     
         AND SUBSCRIBE_TAG = '1'
         AND REGIST_YN     = 'N'
         AND ACT_YN        = 'Y'
         AND VIR_YN        = 'Y'
         AND NVL(LENGTH(ERR_TEXT), 0) = 0
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SUPPLY A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.BUILDNO   = HD_HOUS_SUBSCRIBE.BUILDNO
                        AND A.HOUSENO   = HD_HOUS_SUBSCRIBE.HOUSENO
                        AND NVL(LENGTH(A.VIRDEPOSIT), 0) > 0
                        AND A.VIRDEPOSIT <> HD_HOUS_SUBSCRIBE.VDEPOSIT_NO);
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUBSCRIBE 05 ' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*------------------------------------------------------------------------*/
   v_cnt := 0;
   SELECT COUNT(*)
     INTO v_cnt
     FROM HD_HOUS_SUBSCRIBE
    WHERE DEPT_CODE     = as_dept
      AND HOUSETAG      = as_htag     
      AND SUBSCRIBE_TAG = '1'
      AND REGIST_YN     = 'N'
      AND ACT_YN        = 'Y'
      AND NVL(LENGTH(ERR_TEXT), 0) = 0;
   IF v_cnt < 1 THEN
      RAISE_APPLICATION_ERROR(-20002, '처리할 대상이 없습니다');
      ROLLBACK;
      RETURN;
   END IF;
   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE;
   LOOP
      FETCH CURMAKE 
       INTO c_seq,     c_cust,     c_custnm, c_amt,      c_subsdt, c_contdt,
            c_buildno, c_houseno,  c_vbank,  c_vdeposit,
            c_contno,  c_incom_yn, c_vir_yn, c_mdeposit;
      EXIT WHEN CURMAKE%NOTFOUND;

      SELECT NVL(MAX(SEQ), 0) + 1
        INTO v_custseq
        FROM HD_HOUS_SELL
       WHERE CUST_CODE = c_cust;

      /*------------------------------------------------------------------------*/
      BEGIN 
         INSERT INTO HD_HOUS_SELL
                   ( CUST_CODE,             SEQ,                   DEPT_CODE,               HOUSETAG,             BUILDNO,
                     HOUSENO,               DONGHO,                                         CUST_NAME,            SQUARE,
                     PRTSQUARE,             TYPE,                  CLASS,                   OPTIONCODE,           CONTRACTTAG,
                     CONTRACTDATE,          CONTRACTNO,
                     LOAN_TAG,              LEASETAG,              LASTCHANGEDATE,          CHANGETAG,
                     CHANGEDATE,            CANCEL_REASON,         CHILD_BUILDNO,           CHILD_HOUSENO,        RELA_CUSTCODE,
                     RELA_SEQ,              VATTAG,                EXCLUSIVEAREA,           COMMONAREA,           ETCCOMMONAREA,
                     PARKINGAREA,           SERVICEAREA,           SITEAREA,                MOVEINSTARTDATE,      MOVEINENDDATE,
                     UNION_CNT,             REMARK,                REFUNDMENTDATE,          REFUNDMENTAMT,        PENALTYAMT,
                     COMP_LOANAMT,          LOAN_INTEREST,         SODUK_TAX,               JUMIN_TAX,            ETC_AMT,
                     BANK_LOAN_ORGAMT,      BANK_LOAN_INTEREST,    BANK_LOAN_INTEREST2,
                     BILL_RETURNAMT,        DELAY_INDEMINITY,      DEPOSIT_COUNT,           CO_CUSTCODE,          CO_SANGHO,
                     CO_CONDITION,          CO_CATEGORY,           LOANBANK,                LOANDEPOSIT,          LOANUSER,
                     SLIPDATE,              SLIPSEQ,
                     INPUT_DUTY_ID,         INPUT_DATE,            CHG_DUTY_ID,             CHG_DATE,
                     APPLY_YN,              APPLY_EMPNO,           APPLY_DATE,              RENTHD_YN,            RENTHD_SEQ,
                     BALCONY_TAG,           BALCONYAREA,           DAYMONTH_TAG,            FLOOR,                CONT_CONDITION,
                     LAND_RETURN,           INT_CALC_DATE,         PREDISAMT,               PROXYAMT,
                     INCONT_DATE,
                     TRUSTAMT,              PREDIS_TAG,            PROXY_TAG,               TRUST_TAG,            VIR_YN,
                     VDEPOSIT,              REP_LIMITDT,           REP_YN,                  REP_DATE )
              SELECT c_cust,                v_custseq,             as_dept,                 as_htag,              BUILDNO,
                     HOUSENO,               BUILDNO || '-' || HOUSENO,                      c_custnm,             SQUARE,
                     PRTSQUARE,             TYPE,                  CLASS,                   OPTIONCODE,           '1',
                     c_contdt,              c_contno,
                     'N',                   'N',                   c_contdt,                '1',
                     '29991231',            '',                    '',                      '',                   '',
                     0,                     NVL(VATTAG, 'N'),      NVL(EXCLUSIVEAREA, 0),   NVL(COMMONAREA, 0),   NVL(ETCCOMMONAREA, 0),
                     NVL(PARKINGAREA, 0),   NVL(SERVICEAREA, 0),   NVL(SITEAREA, 0),        v_msdt,               v_medt,
                     0,                     '청약계약전환',        '',                      0,                    0,
                     0,                     0,                     0,                       0,                    0,
                     0,                     0,                     0,
                     0,                     0,                     0,                       c_cust,               c_custnm,
                     '',                    '',                    '',                      '',                   '',
                     '',                    0,
                     as_user,               v_sysdt ,              '',                      '',
                     'N',                   '',                    '',                      'N',                  0,
                     'N',                   0,                     v_dmt,                   FLOOR,                '00',
                     '00',                  '',                    0,                       0,
                     c_contdt,
                     0,                     'N',                   'N',                     'N',                  c_vir_yn,
                     c_vdeposit,            TO_CHAR(TO_DATE(c_contdt, 'YYYYMMDD') + 60, 'YYYYMMDD'), 'N',         NULL
                FROM HD_HOUS_SUPPLY
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND BUILDNO   = c_buildno
                 AND HOUSENO   = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_SELL 06 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*------------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_SELLDETAIL
                   ( CUST_CODE,     SEQ,             COUNTS,      DEPT_CODE,
                     HOUSETAG,      BUILDNO,         HOUSENO,     AGREEDATE,
                     LANDAMT,       BUILDAMT,        VATAMT,      MANAGEAMT, BUNAMT,
                     DC_YN,         AC_YN,           PERPECTTAG,
                     RECEIPTAMT,    DISTRIBUTE_RATE, SLIPDT,      SLIPSEQ,
                     INPUT_DUTY_ID, INPUT_DATE,      CHG_DUTY_ID, CHG_DATE )
              SELECT c_cust,        v_custseq,       COUNTS,      DEPT_CODE,
                     HOUSETAG,      BUILDNO,         HOUSENO,     CASE WHEN COUNTS = '00' THEN c_contdt ELSE AGREEDATE END,
                     LANDAMT,       BUILDAMT,        VATAMT,      MANAGEAMT, AGREEAMT,
                     DC_YN,         AC_YN,           'N',
                     0,             DISTRIBUTE_RATE, '',          0,
                     as_user,       v_sysdt,         '',          ''
                FROM HD_REFER_SELLDETAIL
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND BUILDNO   = c_buildno
                 AND HOUSENO   = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_SELLDETAIL 07 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_RATE_DISCOUNT
                    (CUST_CODE,     SEQ,        STARTDATE,   ENDDATE,
                     DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
              SELECT c_cust,        v_custseq,  STARTDATE,   ENDDATE,
                     DISCNTRATE,    DISCNTCUT,  DISCNTUNIT,
                     as_user,       v_sysdt,    '',          ''
                FROM HD_REFER_RATE_DISCOUNT
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND RATE_TAG  = '1';
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_RATE_DISCOUNT 08 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         INSERT INTO HD_HOUS_RATE_DELAY
                    (CUST_CODE,     SEQ,        START_DAYS,  END_DAYS,
                     STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                     DELAYUNIT,     START_TAG,  END_TAG,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID, CHG_DATE )
              SELECT c_cust,        v_custseq,  START_DAYS,  END_DAYS,
                     STARTDATE,     ENDDATE,    DELAYRATE,   DELAYCUT,
                     DELAYUNIT,     START_TAG,  END_TAG,
                     as_user,       v_sysdt,    '',          ''
                FROM HD_REFER_RATE_DELAY
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag
                 AND RATETAG   = '1';
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_RATE_DELAY 09 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
/*
      BEGIN
         INSERT INTO HD_REFER_GIFT
                   ( DEPT_CODE,     HOUSETAG,     CUST_CODE,   SEQ,
                     GIFTCODE,      GIFTGIVEDATE,
                     INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE )
*/

      /*---------------------------------------------------------------------*/
/*
      BEGIN
         INSERT INTO HD_HOUS_REMARK
                   ( CUST_CODE,     SEQ,        REMARKSEQ,    REAMRKDATE,
                     REMARK,        USERID,     CONFIRM_DATE, END_YN,
                     INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,  CHG_DATE )
*/
      IF c_vir_yn = 'Y' THEN
         BEGIN
            UPDATE SM_TRANS_VIRTURE_DEPOSIT
               SET MAKE_SEQ      = c_buildno || c_houseno,
                   CHG_DUTY_ID   = as_user,
                   CHG_DATE      = v_sysdt
             WHERE COMPANY_CODE  = '100'
               AND BANK_CODE     = c_vbank
               AND VIR_DEPOSITNO = c_vdeposit;
            EXCEPTION
               WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm); 
                    RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUPPLY 10 ' || sqlerrm);
                    ROLLBACK;
                    RETURN;
         END;
      END IF;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SUPPLY
            SET CONTRACTYESNO = 'Y',
                VIRDEPOSIT    = c_vdeposit,
                CHG_DUTY_ID   = as_user,
                CHG_DATE      = v_sysdt
          WHERE DEPT_CODE     = as_dept
            AND HOUSETAG      = as_htag
            AND BUILDNO       = c_buildno
            AND HOUSENO       = c_houseno;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUPPLY 11 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      BEGIN
         UPDATE HD_HOUS_SUBSCRIBE
            SET CUST_SEQ      = v_custseq,
                REGIST_YN     = 'Y',
                ERR_TEXT      = '청약계약전환 ' || v_subscontdt,
                CHG_DUTY_ID   = as_user,
                CHG_DATE      = v_sysdt
          WHERE DEPT_CODE     = as_dept
            AND HOUSETAG      = as_htag
            AND SEQ           = c_seq;
         EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line(sqlerrm); 
                 RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUPPLY 12 ' || sqlerrm);
                 ROLLBACK;
                 RETURN;
      END;

      /*---------------------------------------------------------------------*/
      IF c_incom_yn = 'Y' THEN BEGIN
         IF c_vir_yn = 'Y' THEN
            OPEN CURVIN(c_vdeposit);
            LOOP
               FETCH CURVIN 
                INTO i_outdt, i_outtm, i_outseq, i_bank, i_amt, i_vdeposit;
               EXIT WHEN CURVIN%NOTFOUND;

               v_inseq := 0;
               SELECT NVL(MAX(INSEQ), 0) + 1
                 INTO v_inseq
                 FROM HD_HOUS_DAY_INCOME
                WHERE DEPT_CODE = as_dept
                  AND HOUSETAG  = as_htag
                  AND INDT      = i_outdt;

               SELECT MAX(DEPOSIT_NO)
                 INTO v_depositHD
                 FROM HD_CODE_DEPOSIT
                WHERE DEPT_CODE    = as_dept
                  AND HOUSETAG     = as_htag
                  AND OUTDEPOSITNO = i_vdeposit;

               BEGIN
                  INSERT INTO HD_HOUS_DAY_INCOME
                            ( DEPT_CODE,     HOUSETAG,    INDT,          INSEQ,
                              BUILDNO,       HOUSENO,     CUST_CODE,     SEQ,
                              CUST_NAME,     DEPOSIT_NO,  INAMT,         INGUBUN,
                              INTYPE,        IHE_YN,      CDNO,          MOD_YN,
                              MOD_RAMT,      MOD_DAMT,
                              INPUT_DUTY_ID, INPUT_DATE,  CHG_DUTY_ID,   CHG_DATE,
                              VDEPOSIT_NO,   OUT_DT,      OUT_TM,        OUT_SEQ,
                              OUT_BANK,      REMARK )
                      VALUES (as_dept,       as_htag,     i_outdt,       v_inseq,
                              c_buildno,     c_houseno,   c_cust,        v_custseq,
                              c_custnm,      v_depositHD, i_amt,         '8',
                              '5',           'N',         '',            'N',
                              0,             0,
                              as_user,       v_sysdt,     '',            '',
                              c_vdeposit,    i_outdt,     i_outtm,       i_outseq,
                              i_bank,        '청약계약전환(가상계좌입금)' );
                  EXCEPTION
                     WHEN OTHERS THEN
                          dbms_output.put_line(sqlerrm); 
                          RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME 13 ' || sqlerrm);
                          ROLLBACK;
                          RETURN;
               END;

               COMMIT WORK;
               PROC_HD_INCOME_CALC(c_cust, v_custseq, i_outdt, v_inseq);

               v_cnt :=0;
               SELECT COUNT(*)
                 INTO v_cnt
                 FROM HD_HOUS_DAY_INCOME
                WHERE DEPT_CODE = as_dept
                  AND HOUSETAG  = as_htag
                  AND INDT      = i_outdt
                  AND INSEQ     = v_inseq
                  AND IHE_YN    = 'Y';
               IF v_cnt > 0 THEN
                  BEGIN
                     UPDATE SM_TRANS_CB3_CVS_DATA
                        SET PROC_STATUS = '1',
                            ERR_TEXT    = '',
                            CHG_DATE    = v_sysdt,
                            CHG_DUTY_ID = as_user
                      WHERE TXDATE      = i_outdt
                        AND TXTIME      = i_outtm
                        AND JMSEQNO     = i_outseq;
                     EXCEPTION
                        WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_14: ' || sqlerrm);
                        ROLLBACK;
                        RETURN;
                  END;
               ELSE
                  BEGIN
                     UPDATE SM_TRANS_CB3_CVS_DATA
                        SET PROC_STATUS  = '2',
                            ERR_TEXT     = '입금프로시저에서 알수없는 오류가 발생했습니다',
                            CHG_DATE     = v_sysdt,
                            CHG_DUTY_ID  = as_user
                      WHERE TXDATE       = i_outdt
                        AND TXTIME       = i_outtm
                        AND JMSEQNO      = i_outseq;
                     EXCEPTION
                        WHEN OTHERS THEN
                        dbms_output.put_line(sqlerrm);
                        RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_15: ' || sqlerrm);
                        ROLLBACK;
                        RETURN;
                  END;
               END IF;

               COMMIT WORK;
            END LOOP;
            CLOSE CURVIN;

            BEGIN
               UPDATE HD_HOUS_SUBSCRIBE
                  SET SUBSCRIBE_AMT = (SELECT NVL(SUM(RECEIPTAMT), 0)
                                         FROM HD_HOUS_INCOME
                                        WHERE CUST_CODE = c_cust
                                          AND SEQ       = v_custseq) 
                WHERE DEPT_CODE     = as_dept
                  AND HOUSETAG      = as_htag
                  AND SEQ           = c_seq
                  AND INCOM_YN      = 'Y'
                  AND VIR_YN        = 'Y';
               EXCEPTION
                  WHEN OTHERS THEN
                       dbms_output.put_line(sqlerrm); 
                       RAISE_APPLICATION_ERROR(-20002, 'UPDATE HD_HOUS_SUPPLY 16 ' || sqlerrm);
                       ROLLBACK;
                       RETURN;
            END;
            COMMIT WORK;

         END IF;

         /*---------------------------------------------------------------------*/
         IF c_vir_yn = 'N' AND c_amt > 0 THEN
            v_inseq := 0;
            SELECT NVL(MAX(INSEQ), 0) + 1
              INTO v_inseq
              FROM HD_HOUS_DAY_INCOME
             WHERE DEPT_CODE = as_dept
               AND HOUSETAG  = as_htag
               AND INDT      = c_subsdt;

            BEGIN
               INSERT INTO HD_HOUS_DAY_INCOME
                         ( DEPT_CODE,     HOUSETAG,   INDT,          INSEQ,
                           BUILDNO,       HOUSENO,    CUST_CODE,     SEQ,
                           CUST_NAME,     DEPOSIT_NO, INAMT,         INGUBUN,
                           INTYPE,        IHE_YN,     CDNO,          MOD_YN,
                           MOD_RAMT,      MOD_DAMT,
                           INPUT_DUTY_ID, INPUT_DATE, CHG_DUTY_ID,   CHG_DATE,
                           VDEPOSIT_NO,   OUT_DT,     OUT_TM,        OUT_SEQ,
                           OUT_BANK,      REMARK )
                   VALUES (as_dept,       as_htag,    c_subsdt,      v_inseq,
                           c_buildno,     c_houseno,  c_cust,        v_custseq,
                           c_custnm,      c_mdeposit, c_amt,         '8',
                           '1',           'N',        '',            'N',
                           0,             0,
                           as_user,       v_sysdt,    '',            '',
                           '',            '',         '',            0,
                           '',            '청약계약전환(직접입금)' );
               EXCEPTION
                  WHEN OTHERS THEN
                       dbms_output.put_line(sqlerrm); 
                       RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_HOUS_DAY_INCOME 17 ' || sqlerrm);
                       ROLLBACK;
                       RETURN;
            END;
            COMMIT WORK;
            PROC_HD_INCOME_CALC(c_cust, v_custseq, c_subsdt, v_inseq);
         END IF;
      END; END IF;
   END LOOP;
   CLOSE CURMAKE;

   /*---------------------------------------------------------------------*/
   /*---------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_HOUS_REINCOME;

CREATE OR REPLACE PROCEDURE "PROC_HD_HOUS_REINCOME" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_dept         VARCHAR2(12);
c_htag         VARCHAR2(1);
c_indt         VARCHAR2(8);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_custnm       VARCHAR2(50);
c_dno          VARCHAR2(30);
c_amt          NUMBER(15);
c_gubun        VARCHAR2(2);
c_type         VARCHAR2(2);
c_vdno         VARCHAR2(30);
c_outdt        VARCHAR2(8);
c_outtm        VARCHAR2(6);
c_outseq       FLOAT;
c_outbank      VARCHAR2(6);
c_remark       VARCHAR2(200);

/*---------------------------------------------------------------------------*/
v_cnt          NUMBER(10);
v_seq          NUMBER(10);
v_err          NUMBER(10);
v_sysdt        VARCHAR2(14);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2) IS
SELECT A.DEPT_CODE,          A.HOUSETAG,   A.RECEIPTDATE,
       A.BUILDNO,            A.HOUSENO,    A.CUST_CODE,   A.SEQ,
       NVL(B.CUST_NAME, ''), A.DEPOSIT_NO, A.REALINCOMAMT,   --A.RECEIPTAMT,   (2012.08.16 김효진부장님 수정)
       A.PAYTAG,             A.INCOMTYPE,  A.VDEPOSIT_NO,
       A.OUT_DT,             A.OUT_TM,     A.OUT_SEQ,
       A.OUT_BANK,           A.REMARK
  FROM HD_HOUS_INCOME_REIN A,
       VW_HD_CODE_CUSTOMER B
 WHERE A.DEPT_CODE = a_dept
   AND A.HOUSETAG  = a_htag
   AND A.CUST_CODE = B.CUST_CODE (+)
 ORDER BY A.DEPT_CODE, A.HOUSETAG, A.CUST_CODE, A.SEQ, A.RECEIPTDATE, A.COUNTS, A.TIMES;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_err   := 0;
   v_sysdt := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
   
   /*---------------------------------------------------------------------------*/
   /* 기존데이타 삭제 */
   BEGIN
      DELETE HD_HOUS_INCOME_REIN
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag;
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '1:DELETE HD_HOUS_INCOME_REIN ERR' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 현제 계약상태의 고객의 잔금입금을 복사 */
   BEGIN
      INSERT INTO HD_HOUS_INCOME_REIN
           SELECT B.CUST_CODE,        B.SEQ,            B.COUNTS,          B.TIMES,         B.DEPT_CODE,
                  B.HOUSETAG,         B.BUILDNO,        B.HOUSENO,         B.DEPOSIT_NO,    B.RECEIPTDATE,
                  B.RECEIPTAMT,       B.RECEIPTLANDAMT, B.RECEIPTBUILDAMT, B.RECEIPTVATAMT, B.DELAYDAYS,
                  B.DELAYAMT,         B.DISCNTDAYS,     B.DISCNTAMT,       B.REALINCOMAMT,  B.REALLANDAMT,
                  B.REALBUILDAMT,     B.REALVATAMT,     B.BANK_CODE,       B.BANK_NAME,     B.PAYTAG,
                  B.INCOMTYPE,        B.MOD_YN,         B.REAL_PAY_TAG,    B.SLIPDT,        B.SLIPSEQ,
                  B.TAXDATE,          B.TAXSEQ,         B.INSEQ,           B.INPUT_DUTY_ID, B.INPUT_DATE,
                  B.CHG_DUTY_ID,      B.CHG_DATE,       B.SLIPTYPE,        B.VDEPOSIT_NO,   B.DETAILMOD_YN,
                  B.OUT_DT,           B.OUT_TM,         B.OUT_SEQ,         B.OUT_BANK,      B.REMARK,
                  B.RECEIPTMANAGEAMT, B.REALMANAGEAMT,  B.CDNO,            B.CD_BANK,       B.CD_EDATE,
                  B.CD_STYPE
             FROM HD_HOUS_SELL A,
                  HD_HOUS_INCOME B
            WHERE A.DEPT_CODE = as_dept
              AND A.HOUSETAG  = as_htag
              AND A.CHANGETAG = '1'
              AND A.CUST_CODE = B.CUST_CODE
              AND A.SEQ       = B.SEQ
              AND B.COUNTS    = '90'; 
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '2:INSERT HD_HOUS_INCOME_REIN ERR' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 현제 계약상태의 고객의 잔금입금을 삭제 */
   BEGIN
      DELETE HD_HOUS_INCOME
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND COUNTS    = '90'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.CHANGETAG = '1'
                        AND A.CUST_CODE = HD_HOUS_INCOME.CUST_CODE
                        AND A.SEQ       = HD_HOUS_INCOME.SEQ
                    );
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '3:DELETE HD_HOUS_INCOME ERR' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 현제 계약상태의 고객의 잔금약정 UPDATE */
   BEGIN
      UPDATE HD_HOUS_SELLDETAIL
         SET RECEIPTAMT =  0,
             PERPECTTAG = 'N'
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND COUNTS    = '90'
         AND EXISTS (SELECT 1
                       FROM HD_HOUS_SELL A
                      WHERE A.DEPT_CODE = as_dept
                        AND A.HOUSETAG  = as_htag
                        AND A.CHANGETAG = '1'
                        AND A.CUST_CODE = HD_HOUS_SELLDETAIL.CUST_CODE
                        AND A.SEQ       = HD_HOUS_SELLDETAIL.SEQ
                    );
      EXCEPTION
           WHEN OTHERS THEN
                dbms_output.put_line(sqlerrm); 
                RAISE_APPLICATION_ERROR(-20002, '4:UPDATE HD_HOUS_SELLDETAIL ERR' || sqlerrm);
                ROLLBACK;
                RETURN;
   END;

   /*---------------------------------------------------------------------------*/
   /* 여기서 일단 COMMIT 입금프로시져내부에서 COMMIT을 치기때문에 반영을 해야한다 */
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag);
   LOOP
      FETCH CURMAKE 
       INTO c_dept,   c_htag,    c_indt,   c_bno,   c_hno,
            c_cust,   c_seq,     c_custnm, c_dno,   c_amt,
            c_gubun,  c_type,    c_vdno,   c_outdt, c_outtm,
            c_outseq, c_outbank, c_remark; 
      EXIT WHEN CURMAKE%NOTFOUND;

      /*---------------------------------------------------------------------------*/
      /* 일자별 입금내역 순번 생성 */
      v_seq := 0;
      SELECT NVL(MAX(NVL(INSEQ, 0)), 0) + 1
        INTO v_seq
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = c_dept
         AND HOUSETAG  = c_htag
         AND INDT      = c_indt;    

      /*---------------------------------------------------------------------------*/
      /* 복사한 내역으로 일별 입금내역 구성 */
      BEGIN
         INSERT INTO HD_HOUS_DAY_INCOME
                   ( DEPT_CODE,     HOUSETAG,     INDT,        INSEQ,
                     BUILDNO,       HOUSENO,      CUST_CODE,   SEQ,
                     CUST_NAME,     DEPOSIT_NO,   INAMT,
                     INGUBUN,       INTYPE,       IHE_YN,
                     CDNO,          MOD_YN,       MOD_RAMT,    MOD_DAMT,
                     INPUT_DUTY_ID, INPUT_DATE,   CHG_DUTY_ID, CHG_DATE,
                     VDEPOSIT_NO,   OUT_DT,       OUT_TM,      OUT_SEQ,
                     OUT_BANK,      REMARK )
            VALUES ( c_dept,        c_htag,       c_indt,      v_seq,
                     c_bno,         c_hno,        c_cust,      c_seq,
                     c_custnm,      c_dno,        c_amt,
                     c_gubun,       c_type,       'N',
                     'XXX',         'N',          0,           0,
                     as_user,       v_sysdt,      '',          '',
                     '',            c_outdt,      c_outtm,     c_outseq,
                     c_outbank,     c_remark );
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line(sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '5:INSERT HD_HOUS_DAY_INCOME ERR' || sqlerrm);
                      ROLLBACK;
                      RETURN;
      END;

      /*---------------------------------------------------------------------------*/
      /* 입금프로시져 호출 */
      PROC_HD_INCOME_CALC(c_cust, c_seq, c_indt, v_seq);
      
      /*---------------------------------------------------------------------------*/
      v_cnt := 0;
      SELECT NVL(COUNT(*), 0)
        INTO v_cnt
        FROM HD_HOUS_DAY_INCOME
       WHERE DEPT_CODE = c_dept
         AND HOUSETAG  = c_htag
         AND INDT      = c_indt
         AND INSEQ     = v_seq
         AND IHE_YN    = 'N';
      IF v_cnt > 0 THEN v_err := v_err + 1; END IF;
   END LOOP;
   CLOSE CURMAKE;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   /* 오류가 한건이라도 발생했으면 이전자료로 모두 복구 */
   IF v_err > 0 THEN
      ROLLBACK;

      /*-----------------------------------------------------------------------*/
      /* 복구 트랜젝션 시작 */
      BEGIN
         DELETE HD_HOUS_INCOME
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND COUNTS    = '90'
            AND EXISTS (SELECT 1
                          FROM HD_HOUS_INCOME_REIN A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_HOUS_INCOME.CUST_CODE
                           AND A.SEQ       = HD_HOUS_INCOME.SEQ
                       );
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line(sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '6:DELETE HD_HOUS_INCOME ERR' || sqlerrm);
                      ROLLBACK;
                      RETURN;
      END;
                       
      BEGIN
         INSERT INTO HD_HOUS_INCOME
              SELECT *
                FROM HD_HOUS_INCOME_REIN
               WHERE DEPT_CODE = as_dept
                 AND HOUSETAG  = as_htag;
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line(sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '7:INSERT HD_HOUS_INCOME ERR' || sqlerrm);
                      ROLLBACK;
                      RETURN;
      END;

      BEGIN
         UPDATE HD_HOUS_SELLDETAIL
            SET RECEIPTAMT = (SELECT NVL(SUM(B.RECEIPTAMT), 0)
                                FROM HD_HOUS_INCOME B
                               WHERE B.CUST_CODE = HD_HOUS_SELLDETAIL.CUST_CODE
                                 AND B.SEQ       = HD_HOUS_SELLDETAIL.SEQ
                                 AND B.COUNTS    = HD_HOUS_SELLDETAIL.COUNTS
                             )
          WHERE DEPT_CODE  = as_dept
            AND HOUSETAG   = as_htag
            AND EXISTS (SELECT 1
                          FROM HD_HOUS_INCOME_REIN A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_HOUS_SELLDETAIL.CUST_CODE
                           AND A.SEQ       = HD_HOUS_SELLDETAIL.SEQ
                       );     
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line(sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '8:UPDATE HD_HOUS_SELLDETAIL ERR' || sqlerrm);
                      ROLLBACK;
                      RETURN;
      END;

      BEGIN
         UPDATE HD_HOUS_SELLDETAIL
            SET PERPECTTAG = CASE WHEN BUNAMT <= RECEIPTAMT THEN 'Y' ELSE 'N' END
          WHERE DEPT_CODE  = as_dept
            AND HOUSETAG   = as_htag
            AND EXISTS (SELECT 1
                          FROM HD_HOUS_INCOME_REIN A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_HOUS_SELLDETAIL.CUST_CODE
                           AND A.SEQ       = HD_HOUS_SELLDETAIL.SEQ
                       );     
            EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line(sqlerrm); 
                      RAISE_APPLICATION_ERROR(-20002, '9:UPDATE HD_HOUS_SELLDETAIL ERR' || sqlerrm);
                      ROLLBACK;
                      RETURN;
      END;
   END IF;

   /*---------------------------------------------------------------------------*/
   /*---------------------------------------------------------------------------*/
   COMMIT WORK;

   /*---------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_JUNGSAN;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_JUNGSAN" (
   as_dept  IN VARCHAR2, --현장
   as_htag  IN VARCHAR2, --분양구분
   as_cust  IN VARCHAR2, --고객
   as_seq   IN VARCHAR2, --고객순번
   as_all   IN VARCHAR2, --전고객유무('Y':전고객, 'N':특정고객)
   as_gubun IN VARCHAR2, --구분(1:보증금 2:임대료)
   as_user  IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
c_cust      VARCHAR2(20);
c_seq       NUMBER(5);
c_indt      VARCHAR2(8);
c_inseq     NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURIN IS
SELECT CUST_CODE, SEQ, IN_DATE, IN_SEQ
  FROM (SELECT CUST_CODE, SEQ, IN_DATE, IN_SEQ
          FROM HD_RENT_GURT_INCOME_DAILY_ADJ
         WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
           AND DEPT_CODE = as_dept
           AND HOUSETAG  = as_htag
           AND as_gubun  = '1'
         UNION ALL
        SELECT CUST_CODE, SEQ, IN_DATE, IN_SEQ
          FROM HD_RENT_RENT_INCOME_DAILY_ADJ
         WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
           AND DEPT_CODE = as_dept
           AND HOUSETAG  = as_htag
           AND as_gubun  = '2'
       )
 ORDER BY CUST_CODE, SEQ, IN_DATE, IN_SEQ;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN

   IF as_gubun = '1' THEN BEGIN
      /* ------------------------------------------------------------------- */
      /* 보증금 입금 초기화 */
      BEGIN
         DELETE HD_RENT_GURT_INCOME_ADJ
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)));
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:001 DELETE HD_RENT_GURT_INCOME_ADJ');
            ROLLBACK;
            RETURN;
      END;
      BEGIN
         DELETE HD_RENT_GURT_AGREE_ADJ
          WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
            AND EXISTS (SELECT 1
                          FROM HD_RENT_MASTER A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_RENT_GURT_AGREE_ADJ.CUST_CODE
                           AND A.SEQ       = HD_RENT_GURT_AGREE_ADJ.SEQ
                       );
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:002 DELETE HD_RENT_GURT_AGREE_ADJ');
            ROLLBACK;
            RETURN;
      END;
      BEGIN
         DELETE HD_RENT_GURT_INCOME_DAILY_ADJ
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)));
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:003 DELETE HD_RENT_GURT_INCOME_DAILY_ADJ');
            ROLLBACK;
            RETURN;
      END;
      /* ------------------------------------------------------------------- */
      BEGIN
         INSERT INTO HD_RENT_GURT_AGREE_ADJ
         SELECT *
           FROM HD_RENT_GURT_AGREE
          WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
            AND EXISTS (SELECT 1
                          FROM HD_RENT_MASTER A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_RENT_GURT_AGREE.CUST_CODE
                           AND A.SEQ       = HD_RENT_GURT_AGREE.SEQ
                       );
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:004 INSERT HD_RENT_GURT_AGREE_ADJ');
            ROLLBACK;
            RETURN;
      END;
      BEGIN
         UPDATE HD_RENT_GURT_AGREE_ADJ
            SET PERPECT_TAG = 'N',
                RECEIPT_AMT = 0
          WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
            AND EXISTS (SELECT 1
                          FROM HD_RENT_MASTER A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_RENT_GURT_AGREE_ADJ.CUST_CODE
                           AND A.SEQ       = HD_RENT_GURT_AGREE_ADJ.SEQ
                       );
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:005 UPDATE HD_RENT_GURT_AGREE_ADJ');
            ROLLBACK;
            RETURN;
      END;
      /* ------------------------------------------------------------------- */
      BEGIN
         INSERT INTO HD_RENT_GURT_INCOME_DAILY_ADJ
                   (DEPT_CODE,     HOUSETAG,      IN_DATE,
                    IN_SEQ,
                    CUST_CODE,     SEQ,           DEPOSIT_NO,      IN_AMT,
                    IN_GUBUN,      IN_TYPE,       TRANS_YN,        CARD_NO,
                    MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                    INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE,
                    VDEPOSIT_NO,   OUT_DT,        OUT_TM,          OUT_SEQ,
                    OUT_BANK,      REMARK )
             SELECT A.DEPT_CODE,   A.HOUSETAG,    A.RECEIPT_DATE,
                    NVL(B.INSEQ, 0) + ROW_NUMBER() OVER
                                      (PARTITION BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPT_DATE
                                           ORDER BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPT_DATE),
                    A.CUST_CODE,   A.SEQ,         A.DEPOSIT_NO,    A.RECEIPT_AMT - A.DISCNT_AMT + A.DELAY_AMT,
                    A.PAY_TAG,     A.INCOM_TYPE,  'N',             '',
                    'N',           0,             0,
                    '',            '',            '',              '',
                    A.VDEPOSIT_NO, '',            '',              0,
                    '',            ''
               FROM HD_RENT_GURT_INCOME A,
                    (SELECT IN_DATE, NVL(MAX(IN_SEQ), 0) AS INSEQ
                       FROM HD_RENT_GURT_INCOME_DAILY_ADJ
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND IN_DATE   IN (SELECT DISTINCT RECEIPT_DATE
                                            FROM HD_RENT_GURT_INCOME
                                           WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
                                             AND DEPT_CODE = as_dept
                                             AND HOUSETAG  = as_htag
                                         )
                      GROUP BY IN_DATE
                    ) B
              WHERE (as_all = 'Y' OR (A.CUST_CODE = as_cust AND A.SEQ = TO_NUMBER(as_seq)))
                AND A.DEPT_CODE    = as_dept
                AND A.HOUSETAG     = as_htag
                AND A.RECEIPT_DATE = B.IN_DATE (+);
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:006 INSERT HD_RENT_GURT_INCOME_DAILY_ADJ');
            ROLLBACK;
            RETURN;
      END;

   /* ********************************************************************** */
   /* ********************************************************************** */
   END; ELSE BEGIN
      /* ------------------------------------------------------------------- */
      /* 임대료 입금 초기화 */
      BEGIN
         DELETE HD_RENT_RENT_INCOME_ADJ
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)));
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:007 DELETE HD_RENT_RENT_INCOME_ADJ');
            ROLLBACK;
            RETURN;
      END;
      BEGIN
         DELETE HD_RENT_RENT_AGREE_ADJ
          WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
            AND EXISTS (SELECT 1
                          FROM HD_RENT_MASTER A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_RENT_RENT_AGREE_ADJ.CUST_CODE
                           AND A.SEQ       = HD_RENT_RENT_AGREE_ADJ.SEQ
                       );
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:008 DELETE HD_RENT_RENT_AGREE_ADJ');
            ROLLBACK;
            RETURN;
      END;
      BEGIN
         DELETE HD_RENT_RENT_INCOME_DAILY_ADJ
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)));
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:009 DELETE HD_RENT_RENT_INCOME_DAILY_ADJ');
            ROLLBACK;
            RETURN;
      END;
      /* ------------------------------------------------------------------- */
      BEGIN
         INSERT INTO HD_RENT_RENT_AGREE_ADJ
         SELECT *
           FROM HD_RENT_RENT_AGREE
          WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
            AND EXISTS (SELECT 1
                          FROM HD_RENT_MASTER A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_RENT_RENT_AGREE.CUST_CODE
                           AND A.SEQ       = HD_RENT_RENT_AGREE.SEQ
                       );
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:010 INSERT HD_RENT_RENT_AGREE_ADJ');
            ROLLBACK;
            RETURN;
      END;
      BEGIN
         UPDATE HD_RENT_RENT_AGREE_ADJ
            SET PERPECT_TAG = 'N',
                RECEIPT_AMT = 0
          WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
            AND EXISTS (SELECT 1
                          FROM HD_RENT_MASTER A
                         WHERE A.DEPT_CODE = as_dept
                           AND A.HOUSETAG  = as_htag
                           AND A.CUST_CODE = HD_RENT_RENT_AGREE_ADJ.CUST_CODE
                           AND A.SEQ       = HD_RENT_RENT_AGREE_ADJ.SEQ
                       );
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:011 UPDATE HD_RENT_RENT_AGREE_ADJ');
            ROLLBACK;
            RETURN;
      END;
      /* ------------------------------------------------------------------- */
      BEGIN
         INSERT INTO HD_RENT_RENT_INCOME_DAILY_ADJ
                   (DEPT_CODE,     HOUSETAG,      IN_DATE,
                    IN_SEQ,
                    CUST_CODE,     SEQ,           DEPOSIT_NO,      IN_AMT,
                    IN_GUBUN,      IN_TYPE,       TRANS_YN,        CARD_NO,
                    MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                    INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,     CHG_DATE,
                    VDEPOSIT_NO,   OUT_DT,        OUT_TM,          OUT_SEQ,
                    OUT_BANK,      REMARK )
             SELECT A.DEPT_CODE,   A.HOUSETAG,    A.RECEIPT_DATE,
                    NVL(B.INSEQ, 0) + ROW_NUMBER() OVER
                                      (PARTITION BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPT_DATE
                                           ORDER BY A.DEPT_CODE, A.HOUSETAG, A.RECEIPT_DATE),
                    A.CUST_CODE,   A.SEQ,         A.DEPOSIT_NO,    A.RECEIPT_AMT - A.DISCNT_AMT + A.DELAY_AMT,
                    A.PAY_TAG,     A.INCOM_TYPE,  'N',             '',
                    'N',           0,             0,
                    '',            '',            '',              '',
                    A.VDEPOSIT_NO, '',            '',              0,
                    '',            ''
               FROM HD_RENT_RENT_INCOME A,
                    (SELECT IN_DATE, NVL(MAX(IN_SEQ), 0) AS INSEQ
                       FROM HD_RENT_RENT_INCOME_DAILY_ADJ A
                      WHERE DEPT_CODE = as_dept
                        AND HOUSETAG  = as_htag
                        AND IN_DATE   IN (SELECT DISTINCT RECEIPT_DATE
                                            FROM HD_RENT_RENT_INCOME
                                           WHERE (as_all = 'Y' OR (CUST_CODE = as_cust AND SEQ = TO_NUMBER(as_seq)))
                                             AND DEPT_CODE = as_dept
                                             AND HOUSETAG  = as_htag
                                         )
                      GROUP BY IN_DATE
                    ) B
              WHERE (as_all = 'Y' OR (A.CUST_CODE = as_cust AND A.SEQ = TO_NUMBER(as_seq)))
                AND A.DEPT_CODE    = as_dept
                AND A.HOUSETAG     = as_htag
                AND A.RECEIPT_DATE = B.IN_DATE (+);
         EXCEPTION
            WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
            RAISE_APPLICATION_ERROR(-20002, 'E:012 INSERT HD_RENT_RENT_INCOME_DAILY_ADJ');
            ROLLBACK;
            RETURN;
      END;
   END; END IF;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURIN;
   LOOP
      FETCH CURIN 
       INTO c_cust, c_seq, c_indt, c_inseq;
       EXIT WHEN CURIN%NOTFOUND;

      IF as_gubun = '1' THEN
        /*보증금 입금처리 */
         PROC_HD_RENT_GURT_INCOME_ADJ(c_cust, c_seq, c_indt, c_inseq);
      ELSE
        /*임대료 입금처리 */
         PROC_HD_RENT_RENT_INCOME_ADJ(c_cust, c_seq, c_indt, c_inseq);
      END IF;

   END LOOP;
   CLOSE CURIN;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_OUTCMS;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_OUTCMS" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일자
   as_to   IN VARCHAR2, --종료일자
   as_rtp  IN VARCHAR2, --보증금,임대구분 *:전체, 8:보증금 9:임대료 
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_inseq        NUMBER(5);

/*---------------------------------------------------------------------------*/
c_pdt          VARCHAR2(8);
c_ptm          VARCHAR2(6);
c_pseq         FLOAT;
c_pbank        VARCHAR2(6);
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_custname     VARCHAR2(100);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_deposit      VARCHAR2(100);
c_amt          NUMBER(15);
c_rtag         VARCHAR2(1);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2, a_rtp IN VARCHAR2) IS
SELECT A.PAYMENTDATE,
       A.PAYMENT_TIME,
       A.PAYMENTSEQ,
       A.BANK_CODE,
       B.CUST_CODE,
       B.SEQ,
       B.CUST_NAME,
       A.BUILDNO,
       A.HOUSENO,
       C.DEPOSIT_NO,
       A.PAYMENTAMT,
       D.RECEIPTTAG
  FROM SM_TRANS_CMS A,
       HD_RENT_MASTER B,
       HD_CODE_DEPOSIT C,
       HD_CODE_DEPOSIT D
 WHERE A.PAYMENTDATE BETWEEN a_fr AND a_to
   AND A.INCOMETAG   = 'I'
   AND A.CANCELTAG   = 'N'
   AND A.PROJ_CODE   = a_dept
   AND A.HOUSETAG    = a_htag
   AND A.PROC_STATUS = '0'
   AND A.PROJ_CODE   = B.DEPT_CODE
   AND A.HOUSETAG    = B.HOUSETAG
   AND A.BUILDNO     = B.BUILDNO
   AND A.HOUSENO     = B.HOUSENO
   AND B.CHANGE_TAG  = '1'
   AND A.PROJ_CODE   = C.DEPT_CODE
   AND A.HOUSETAG    = C.HOUSETAG
   AND A.DEPOSIT_NO  = C.OUTDEPOSITNO
   AND A.PROJ_CODE   = D.DEPT_CODE
   AND A.HOUSETAG    = D.HOUSETAG
   AND A.DEPOSIT_NO  = D.OUTDEPOSITNO
   AND D.RECEIPTTAG  IN ('8', '9')
   AND (a_rtp = '*' OR D.RECEIPTTAG = a_rtp)
 ORDER BY A.PAYMENTDATE, A.PAYMENT_TIME, A.PAYMENTSEQ, A.BANK_CODE;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_fr)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;
--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   --오류처리
   --1.잘못된 계좌처리..
   --2.해당동호에 계약자가없는경우
   --3.현계약자가아닌경우
   --4.최종납입일보다 작은경우

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당현장에 등록되어있는 회계계좌가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND NOT EXISTS (SELECT 1
                           FROM HD_CODE_DEPOSIT A
                          WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                            AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                            AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO   
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_01: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자가 없습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                        AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO
                        AND A.RECEIPTTAG  IN ('8', '9')
                        AND (as_rtp = '*' OR A.RECEIPTTAG = as_rtp)
                    )
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A
                          WHERE SM_TRANS_CMS.PROJ_CODE = A.DEPT_CODE
                            AND SM_TRANS_CMS.HOUSETAG  = A.HOUSETAG
                            AND SM_TRANS_CMS.BUILDNO   = A.BUILDNO
                            AND SM_TRANS_CMS.HOUSENO   = A.HOUSENO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_02: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자는 계약상태가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                        AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO
                        AND A.RECEIPTTAG  IN ('8', '9')
                        AND (as_rtp = '*' OR A.RECEIPTTAG = as_rtp)
                    )
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A
                          WHERE SM_TRANS_CMS.PROJ_CODE = A.DEPT_CODE
                            AND SM_TRANS_CMS.HOUSETAG  = A.HOUSETAG
                            AND SM_TRANS_CMS.BUILDNO   = A.BUILDNO
                            AND SM_TRANS_CMS.HOUSENO   = A.HOUSENO
                            AND A.CHANGE_TAG           = '1'
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_03: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 입금일자 이후의 보증금 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                        AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO
                        AND A.RECEIPTTAG            = '8'
                        AND (as_rtp = '*' OR A.RECEIPTTAG = as_rtp)
                    )
         AND EXISTS (SELECT 1
                       FROM HD_RENT_MASTER A,
                            HD_RENT_GURT_INCOME B
                      WHERE SM_TRANS_CMS.PROJ_CODE   = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG    = A.HOUSETAG
                        AND SM_TRANS_CMS.BUILDNO     = A.BUILDNO
                        AND SM_TRANS_CMS.HOUSENO     = A.HOUSENO
                        AND A.CUST_CODE              = B.CUST_CODE
                        AND A.SEQ                    = B.SEQ
                        AND SM_TRANS_CMS.PAYMENTDATE < B.RECEIPT_DATE
                    );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_04: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CMS
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 입금일자 이후의 임대료 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE PAYMENTDATE BETWEEN as_fr AND as_to
         AND INCOMETAG   = 'I'
         AND CANCELTAG   = 'N'
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_CODE_DEPOSIT A
                      WHERE SM_TRANS_CMS.PROJ_CODE  = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG   = A.HOUSETAG
                        AND SM_TRANS_CMS.DEPOSIT_NO = A.OUTDEPOSITNO
                        AND A.RECEIPTTAG            = '9'
                        AND (as_rtp = '*' OR A.RECEIPTTAG = as_rtp)
                    )
         AND EXISTS (SELECT 1
                       FROM HD_RENT_MASTER A,
                            HD_RENT_RENT_INCOME B
                      WHERE SM_TRANS_CMS.PROJ_CODE   = A.DEPT_CODE
                        AND SM_TRANS_CMS.HOUSETAG    = A.HOUSETAG
                        AND SM_TRANS_CMS.BUILDNO     = A.BUILDNO
                        AND SM_TRANS_CMS.HOUSENO     = A.HOUSENO
                        AND A.CUST_CODE              = B.CUST_CODE
                        AND A.SEQ                    = B.SEQ
                        AND SM_TRANS_CMS.PAYMENTDATE < B.RECEIPT_DATE
                    );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_05: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_fr, as_to, as_rtp);
   LOOP
      FETCH CURMAKE 
       INTO c_pdt, c_ptm, c_pseq,    c_pbank, c_cust, c_seq, c_custname,
            c_bno, c_hno, c_deposit, c_amt,   c_rtag;
      EXIT WHEN CURMAKE%NOTFOUND;

      v_inseq := 0;
      IF c_rtag = '8' THEN BEGIN
         /* ---------------------------------- 보증금 입금 -----------------*/
         SELECT NVL(MAX(IN_SEQ), 0) + 1
           INTO v_inseq
           FROM HD_RENT_GURT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_pdt;

         BEGIN
            INSERT INTO HD_RENT_GURT_INCOME_DAILY
                      ( DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                        CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                        IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                        MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                        INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                        VDEPOSIT_NO,   OUT_DT,        OUT_TM,       OUT_SEQ,
                        OUT_BANK,      REMARK )
               VALUES ( as_dept,       as_htag,       c_pdt,        v_inseq,
                        c_cust,        c_seq,         c_deposit,    c_amt,
                        'A',           '2',           'N',          '',
                        'N',           0,             0,
                        as_user,       v_sysdt,       '',           '',
                        '',            c_pdt,         c_ptm,        c_pseq,
                        c_pbank,       '보증금CMS일괄입금');
               EXCEPTION
                  WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_GURT_INCOME_DAILY ER_06: ' || sqlerrm);
                  ROLLBACK;
                  RETURN;
         END;
         PROC_HD_RENT_GURT_INCOME(c_cust, c_seq, c_pdt, v_inseq);

         v_cnt :=0;
         SELECT COUNT(*)
           INTO v_cnt
           FROM HD_RENT_GURT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_pdt
            AND IN_SEQ    = v_inseq
            AND TRANS_YN  = 'Y';
      END; ELSE BEGIN
         /* ---------------------------------- 임대료 입금 -----------------*/
         SELECT NVL(MAX(IN_SEQ), 0) + 1
           INTO v_inseq
           FROM HD_RENT_RENT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_pdt;

         BEGIN
            INSERT INTO HD_RENT_RENT_INCOME_DAILY
                      ( DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                        CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                        IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                        MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                        INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                        VDEPOSIT_NO,   OUT_DT,        OUT_TM,       OUT_SEQ,
                        OUT_BANK,      OUT_CUSTNO,    REMARK )
               VALUES ( as_dept,       as_htag,       c_pdt,        v_inseq,
                        c_cust,        c_seq,         c_deposit,    c_amt,
                        'B',           '2',           'N',          '',
                        'N',           0,             0,
                        as_user,       v_sysdt,       '',           '',
                        '',            c_pdt,         c_ptm,        c_pseq,
                        c_pbank,       '',            '임대료CMS일괄입금');
               EXCEPTION
                  WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_RENT_INCOME_DAILY ER_07: ' || sqlerrm);
                  ROLLBACK;
                  RETURN;
         END;
         PROC_HD_RENT_RENT_INCOME(c_cust, c_seq, c_pdt, v_inseq);

         v_cnt :=0;
         SELECT COUNT(*)
           INTO v_cnt
           FROM HD_RENT_RENT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_pdt
            AND IN_SEQ    = v_inseq
            AND TRANS_YN  = 'Y';
      END; END IF;

   /*------------------------------------------------------------------------*/
      IF v_cnt > 0 THEN
         BEGIN
            UPDATE SM_TRANS_CMS
               SET PROC_STATUS  = '1',
                   ERR_TEXT     = '',
                   RENT_TAG     = (CASE WHEN c_rtag = '8' THEN '1' ELSE '2' END),
                   CHG_DATE     = v_sysdt,
                   CHG_DUTY_ID  = as_user
             WHERE PAYMENTDATE  = c_pdt
               AND PAYMENT_TIME = c_ptm
               AND PAYMENTSEQ   = c_pseq
               AND BANK_CODE    = c_pbank;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_08: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      ELSE
         BEGIN
            UPDATE SM_TRANS_CMS
               SET PROC_STATUS  = '2',
                   ERR_TEXT     = '입금프로시저에서 알수없는 오류가 발생했습니다',
                   CHG_DATE     = v_sysdt,
                   CHG_DUTY_ID  = as_user
             WHERE PAYMENTDATE  = c_pdt
               AND PAYMENT_TIME = c_ptm
               AND PAYMENTSEQ   = c_pseq
               AND BANK_CODE    = c_pbank;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CMS ER_09: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      END IF;
      
   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_OUTGIRO;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_OUTGIRO" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일자
   as_to   IN VARCHAR2, --종료일자
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_inseq        NUMBER(5);
v_deposit      VARCHAR2(20);

/*---------------------------------------------------------------------------*/
c_ccode        VARCHAR2(20);
c_dt           VARCHAR2(8);
c_amt          NUMBER(15);
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2) IS
SELECT A.CUST_KIND_CODE,
       A.INCOME_DATE,
       A.PAYMENTAMT,
       B.CUST_CODE,
       B.SEQ
  FROM SM_TRANS_GIRO A,
       HD_RENT_MASTER B,
       TM_CODE_BANK C
 WHERE A.INCOME_DATE BETWEEN a_fr AND a_to
   AND A.PROJ_CODE   = a_dept
   AND A.HOUSETAG    = a_htag
   AND A.OCR_KIND    = ' '
   AND A.PROC_STATUS = '0'
   AND A.PROJ_CODE   = B.DEPT_CODE
   AND A.HOUSETAG    = B.HOUSETAG
   AND A.BUILDNO     = B.BUILDNO
   AND A.HOUSENO     = B.HOUSENO
   AND '1'           = B.CHANGE_TAG
 ORDER BY B.CUST_CODE, B.SEQ, A.INCOME_DATE;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_fr)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;
--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   SELECT NVL(MIN(DEPOSIT_NO), 'X')
     INTO v_deposit
     FROM HD_CODE_DEPOSIT
    WHERE DEPT_CODE  = ''
      AND HOUSETAG   = ''
      AND RECEIPTTAG = '9';
    IF v_deposit = 'X' THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '해당현장에 임대료 납입 계좌정보가 없습니다.');
      ROLLBACK;
      RETURN;
    END; END IF;

   /*------------------------------------------------------------------------*/
   --오류처리
   --1.해당동호에 계약자가없는경우
   --2.현계약자가아닌경우
   --3.임대가아닌경우(전세)
   --4.최종납입일보다 작은경우

   BEGIN
      UPDATE SM_TRANS_GIRO
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자가 없습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE INCOME_DATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND OCR_KIND    = ' '
         AND PROC_STATUS = '0'
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A
                          WHERE SM_TRANS_GIRO.PROJ_CODE = A.DEPT_CODE
                            AND SM_TRANS_GIRO.HOUSETAG  = A.HOUSETAG
                            AND SM_TRANS_GIRO.BUILDNO   = A.BUILDNO
                            AND SM_TRANS_GIRO.HOUSENO   = A.HOUSENO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_GIRO ER_01: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_GIRO
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자는 계약상태가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE INCOME_DATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND OCR_KIND    = ' '
         AND PROC_STATUS = '0'
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A
                          WHERE SM_TRANS_GIRO.PROJ_CODE = A.DEPT_CODE
                            AND SM_TRANS_GIRO.HOUSETAG  = A.HOUSETAG
                            AND SM_TRANS_GIRO.BUILDNO   = A.BUILDNO
                            AND SM_TRANS_GIRO.HOUSENO   = A.HOUSENO
                            AND A.CHANGE_TAG           = '1'
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_GIRO ER_02: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_GIRO
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자는 전세계약자 입니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE INCOME_DATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND OCR_KIND    = ' '
         AND PROC_STATUS = '0'
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A
                          WHERE SM_TRANS_GIRO.PROJ_CODE = A.DEPT_CODE
                            AND SM_TRANS_GIRO.HOUSETAG  = A.HOUSETAG
                            AND SM_TRANS_GIRO.BUILDNO   = A.BUILDNO
                            AND SM_TRANS_GIRO.HOUSENO   = A.HOUSENO
                            AND A.CONT_TYPE            = '2'
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_GIRO ER_03: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_GIRO
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 입금일자 이후의 보증금 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE INCOME_DATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND OCR_KIND    = ' '
         AND PROC_STATUS = '0'
         AND EXISTS (SELECT 1
                       FROM HD_RENT_MASTER A,
                            HD_RENT_RENT_INCOME B
                      WHERE SM_TRANS_GIRO.PROJ_CODE   = A.DEPT_CODE
                        AND SM_TRANS_GIRO.HOUSETAG    = A.HOUSETAG
                        AND SM_TRANS_GIRO.BUILDNO     = A.BUILDNO
                        AND SM_TRANS_GIRO.HOUSENO     = A.HOUSENO
                        AND A.CUST_CODE               = B.CUST_CODE
                        AND A.SEQ                     = B.SEQ
                        AND SM_TRANS_GIRO.INCOME_DATE < B.RECEIPT_DATE
                    );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_GIRO ER_04: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_fr, as_to);
   LOOP
      FETCH CURMAKE 
       INTO c_ccode, c_dt, c_amt, c_cust, c_seq;
      EXIT WHEN CURMAKE%NOTFOUND;

      v_inseq := 0;
      SELECT NVL(MAX(IN_SEQ), 0) + 1
        INTO v_inseq
        FROM HD_RENT_RENT_INCOME_DAILY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND IN_DATE   = c_dt;

      BEGIN
         INSERT INTO HD_RENT_RENT_INCOME_DAILY
                   ( DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                     CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                     IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                     MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                     INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                     VDEPOSIT_NO,   OUT_DT,        OUT_TM,       OUT_SEQ,
                     OUT_BANK,      OUT_CUSTNO,    REMARK )
            VALUES ( as_dept,       as_htag,       c_dt,         v_inseq,
                     c_cust,        c_seq,         v_deposit,    c_amt,
                     'B',           '9',           'N',          '',
                     'N',           0,             0,
                     as_user,       v_sysdt,       '',           '',
                     '',            '',            '',           0,
                     '',            c_ccode,       '임대료지로일괄입금');
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_RENT_INCOME_DAILY ER_05: ' || sqlerrm);
               ROLLBACK;
               RETURN;
      END;
      PROC_HD_RENT_RENT_INCOME(c_cust, c_seq, c_dt, v_inseq);

      v_cnt :=0;
      SELECT COUNT(*)
        INTO v_cnt
        FROM HD_RENT_RENT_INCOME_DAILY
       WHERE DEPT_CODE = as_dept
         AND HOUSETAG  = as_htag
         AND IN_DATE   = c_dt
         AND IN_SEQ    = v_inseq
         AND TRANS_YN  = 'Y';

      /*------------------------------------------------------------------------*/
      IF v_cnt > 0 THEN
         BEGIN
            UPDATE SM_TRANS_GIRO
               SET PROC_STATUS    = '1',
                   ERR_TEXT       = '',
                   CHG_DATE       = v_sysdt,
                   CHG_DUTY_ID    = as_user
             WHERE CUST_KIND_CODE = c_ccode;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_GIRO ER_06: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      ELSE
         BEGIN
            UPDATE SM_TRANS_GIRO
               SET PROC_STATUS    = '2',
                   ERR_TEXT       = '입금프로시저에서 알수없는 오류가 발생했습니다',
                   CHG_DATE       = v_sysdt,
                   CHG_DUTY_ID    = as_user
             WHERE CUST_KIND_CODE = c_ccode;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_GIRO ER_07: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      END IF;
      
   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/


DROP PROCEDURE PROC_HD_RENT_OUTVIRTURE;

CREATE OR REPLACE PROCEDURE "PROC_HD_RENT_OUTVIRTURE" (
   as_dept IN VARCHAR2, --현장
   as_htag IN VARCHAR2, --분양구분
   as_fr   IN VARCHAR2, --시작일자
   as_to   IN VARCHAR2, --종료일자
   as_rtp  IN VARCHAR2, --보증금, 임대료구분 (현재 무조건 임대료로 책정)
   as_user IN VARCHAR2  --실행자
)
IS

/*---------------------------------------------------------------------------*/
v_sysdt        VARCHAR2(14);
v_cnt          NUMBER(5);
v_inseq        NUMBER(5);

/*---------------------------------------------------------------------------*/
c_outdt        VARCHAR2(8);
c_outtm        VARCHAR2(6);
c_outseq       FLOAT;
c_bank         VARCHAR2(6);
c_vdeposit     VARCHAR2(30);
c_amt          NUMBER(15);
c_cust         VARCHAR2(20);
c_seq          NUMBER(5);
c_custnm       VARCHAR2(50);
c_bno          VARCHAR2(10);
c_hno          VARCHAR2(10);
c_mdeposit     VARCHAR2(50);
c_rtag         VARCHAR2(1);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
CURSOR CURMAKE(a_dept IN VARCHAR2, a_htag IN VARCHAR2, a_fr IN VARCHAR2, a_to IN VARCHAR2, a_rtp IN VARCHAR2) IS
SELECT A.TXDATE,
       A.TXTIME,
       A.JMSEQNO,
       A.BANKCODE,
       A.VACCTNO,
       NVL(A.PAYTXAMT, 0),
       B.CUST_CODE,
       B.SEQ,
       B.CUST_NAME,
       B.BUILDNO,
       B.HOUSENO,
       C.PA_DEPOSITNO,
       A.RENT_TAG
  FROM SM_TRANS_CB3_CVS_DATA A,
       (SELECT B.CUST_CODE,
               B.SEQ,
               B.CUST_NAME,
               B.BUILDNO,
               B.HOUSENO,
               B.VDEPOSIT
          FROM HD_RENT_MASTER B,
               HD_CODE_HOUSE C
         WHERE B.DEPT_CODE      = C.DEPT_CODE
           AND B.HOUSETAG       = C.HOUSETAG
           AND B.DEPT_CODE      = a_dept
           AND B.HOUSETAG       = a_htag
           AND C.VIRDEPOSIT2_YN = 'Y'
           AND B.VIR_YN         = 'Y'
           AND B.CHANGE_TAG     = '1'
       ) B,
       SM_TRANS_VIRTURE_DEPOSIT C
 WHERE A.TXDATE BETWEEN  a_fr AND a_to
   AND A.PROJ_CODE   = a_dept
   AND A.HOUSETAG    = a_htag
   AND A.PROC_STATUS = '0'
   AND A.VACCTNO     = B.VDEPOSIT
   AND A.BANKCODE    = C.BANK_CODE
   AND A.VACCTNO     = C.VIR_DEPOSITNO
   AND (a_rtp = '*' OR A.RENT_TAG = a_rtp)
--   AND A.RENT_TAG IN ('1', '2')
 ORDER BY A.TXDATE, A.TXTIME, A.JMSEQNO;
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
BEGIN
   v_cnt := 0;
   SELECT F_HD_GET_MAGAM(as_dept, as_htag, as_fr)
     INTO v_cnt
     FROM DUAL;
   IF v_cnt = -1 THEN BEGIN
      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 분양전표마감 되었습니다.');
      ROLLBACK;
      RETURN;
   END; END IF;
--   IF v_cnt = -2 THEN BEGIN
--      RAISE_APPLICATION_ERROR(-20002, '입급입력일이 회계전표마감 되었습니다.');
--      ROLLBACK;
--      RETURN;
--   END; END IF;

   /*------------------------------------------------------------------------*/
   v_sysdt    := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');

   /*------------------------------------------------------------------------*/
   --오류처리
   --1.잘못된 가상계좌
   --2.모계좌가없는경우
   --3.해당동호에 계약자가없는경우
   --4.현계약자가아닌경우
   --5.최종납입일보다 작은경우

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당가상계좌를 사용하는 동호가 없습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
--         AND RENT_TAG IN ('1', '2')
         AND NOT EXISTS (SELECT 1
                           FROM HD_HOUS_SELL A,
                                HD_CODE_HOUSE B
                          WHERE A.DEPT_CODE     = B.DEPT_CODE
                            AND A.HOUSETAG      = B.HOUSETAG
                            AND A.DEPT_CODE     = as_dept
                            AND A.HOUSETAG      = as_htag
                            AND A.VIR_YN        = 'Y'
                            AND B.VIRDEPOSIT_YN = 'Y'
                            AND A.VDEPOSIT      = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        )
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A,
                                HD_CODE_HOUSE B
                          WHERE A.DEPT_CODE      = B.DEPT_CODE
                            AND A.HOUSETAG       = B.HOUSETAG
                            AND A.DEPT_CODE      = as_dept
                            AND A.HOUSETAG       = as_htag
                            AND A.VIR_YN         = 'Y'
                            AND B.VIRDEPOSIT2_YN = 'Y'
                            AND A.VDEPOSIT       = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_01: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당 가상계좌에 모계좌가 등록되어있지않습니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
--         AND RENT_TAG   IN ('1', '2')
         AND EXISTS (SELECT 1
                       FROM HD_RENT_MASTER A,
                            HD_CODE_HOUSE B
                      WHERE A.DEPT_CODE       = B.DEPT_CODE
                         AND A.HOUSETAG       = B.HOUSETAG
                         AND A.DEPT_CODE      = as_dept
                         AND A.HOUSETAG       = as_htag
                         AND A.VIR_YN         = 'Y'
                         AND B.VIRDEPOSIT2_YN = 'Y'
                         AND A.VDEPOSIT       = SM_TRANS_CB3_CVS_DATA.VACCTNO
                    )
         AND NOT EXISTS (SELECT 1
                           FROM SM_TRANS_VIRTURE_DEPOSIT A
                          WHERE A.COMPANY_CODE  = '100'
                            AND A.BANK_CODE     = SM_TRANS_CB3_CVS_DATA.BANKCODE
                            AND A.VIR_DEPOSITNO = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_02: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 계약자는 계약상태가 아닙니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
--         AND RENT_TAG   IN ('1', '2')
         AND NOT EXISTS (SELECT 1
                           FROM HD_RENT_MASTER A,
                                HD_CODE_HOUSE B
                          WHERE A.DEPT_CODE       = B.DEPT_CODE
                            AND A.HOUSETAG       = B.HOUSETAG
                            AND A.DEPT_CODE      = as_dept
                            AND A.HOUSETAG       = as_htag
                            AND A.VIR_YN         = 'Y'
                            AND B.VIRDEPOSIT2_YN = 'Y'
                            AND A.CHANGE_TAG     = '1'
                            AND A.VDEPOSIT       = SM_TRANS_CB3_CVS_DATA.VACCTNO
                       );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_03: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

/*
   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 입금일자 이후의 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
         AND RENT_TAG    = '1'
         AND EXISTS (SELECT 1
                       FROM HD_RENT_MASTER A,
                            HD_CODE_HOUSE B,
                            HD_RENT_GURT_INCOME C
                      WHERE A.DEPT_CODE      = B.DEPT_CODE
                        AND A.HOUSETAG       = B.HOUSETAG
                        AND A.DEPT_CODE      = as_dept
                        AND A.HOUSETAG       = as_htag
                        AND A.VIR_YN         = 'Y'
                        AND B.VIRDEPOSIT2_YN = 'Y'
                        AND A.CHANGE_TAG     = '1'
                        AND A.VDEPOSIT       = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        AND A.CUST_CODE      = C.CUST_CODE
                        AND A.SEQ            = C.SEQ
                        AND C.RECEIPT_DATE   > SM_TRANS_CB3_CVS_DATA.TXDATE
                   );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_04: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;
*/
   BEGIN
      UPDATE SM_TRANS_CB3_CVS_DATA
         SET PROC_STATUS = '2',
             ERR_TEXT    = '해당동호에 입금일자 이후의 입금자료가 존재합니다',
             CHG_DATE    = v_sysdt,
             CHG_DUTY_ID = as_user
       WHERE TXDATE BETWEEN as_fr AND as_to
         AND PROJ_CODE   = as_dept
         AND HOUSETAG    = as_htag
         AND PROC_STATUS = '0'
--         AND RENT_TAG    = '2'
         AND EXISTS (SELECT 1
                       FROM HD_RENT_MASTER A,
                            HD_CODE_HOUSE B,
                            HD_RENT_RENT_INCOME C
                      WHERE A.DEPT_CODE      = B.DEPT_CODE
                        AND A.HOUSETAG       = B.HOUSETAG
                        AND A.DEPT_CODE      = as_dept
                        AND A.HOUSETAG       = as_htag
                        AND A.VIR_YN         = 'Y'
                        AND B.VIRDEPOSIT2_YN = 'Y'
                        AND A.CHANGE_TAG     = '1'
                        AND A.VDEPOSIT       = SM_TRANS_CB3_CVS_DATA.VACCTNO
                        AND A.CUST_CODE      = C.CUST_CODE
                        AND A.SEQ            = C.SEQ
                        AND C.RECEIPT_DATE   > SM_TRANS_CB3_CVS_DATA.TXDATE
                   );
      EXCEPTION
         WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm);
         RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_05: ' || sqlerrm);
         ROLLBACK;
         RETURN;
   END;

   /*------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*/
   OPEN CURMAKE(as_dept, as_htag, as_fr, as_to, as_rtp);
   LOOP
      FETCH CURMAKE 
       INTO c_outdt, c_outtm, c_outseq, c_bank,   c_vdeposit, c_amt,
            c_cust,  c_seq,   c_custnm, c_bno,    c_hno,      c_mdeposit, c_rtag;
      EXIT WHEN CURMAKE%NOTFOUND;

      v_inseq := 0;
      IF c_rtag = '1' THEN BEGIN
         /* ---------------------------------- 보증금 입금 -----------------*/
         SELECT NVL(MAX(IN_SEQ), 0) + 1
           INTO v_inseq
           FROM HD_RENT_GURT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_outdt;

         BEGIN
            INSERT INTO HD_RENT_GURT_INCOME_DAILY
                      ( DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                        CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                        IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                        MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                        INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                        VDEPOSIT_NO,   OUT_DT,        OUT_TM,       OUT_SEQ,
                        OUT_BANK,      REMARK )
               VALUES ( as_dept,       as_htag,       c_outdt,      v_inseq,
                        c_cust,        c_seq,         c_mdeposit,   c_amt,
                        'A',           '5',           'N',          '',
                        'N',           0,             0,
                        as_user,       v_sysdt,       '',           '',
                        c_vdeposit,    c_outdt,       c_outtm,      c_outseq,
                        c_bank,        '보증금 가상계좌 일괄입금');
               EXCEPTION
                  WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_GURT_INCOME_DAILY ER_06: ' || sqlerrm);
                  ROLLBACK;
                  RETURN;
         END;
         PROC_HD_RENT_GURT_INCOME(c_cust, c_seq, c_outdt, v_inseq);

         v_cnt :=0;
         SELECT COUNT(*)
           INTO v_cnt
           FROM HD_RENT_GURT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_outdt
            AND IN_SEQ    = v_inseq
            AND TRANS_YN  = 'Y';
      END; ELSE BEGIN
         /* ---------------------------------- 임대료 입금 -----------------*/
         SELECT NVL(MAX(IN_SEQ), 0) + 1
           INTO v_inseq
           FROM HD_RENT_RENT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_outdt;

         BEGIN
            INSERT INTO HD_RENT_RENT_INCOME_DAILY
                      ( DEPT_CODE,     HOUSETAG,      IN_DATE,      IN_SEQ,
                        CUST_CODE,     SEQ,           DEPOSIT_NO,   IN_AMT,
                        IN_GUBUN,      IN_TYPE,       TRANS_YN,     CARD_NO,
                        MOD_YN,        MOD_DELAY_AMT, MOD_DISC_AMT,
                        INPUT_DUTY_ID, INPUT_DATE,    CHG_DUTY_ID,  CHG_DATE,
                        VDEPOSIT_NO,   OUT_DT,        OUT_TM,       OUT_SEQ,
                        OUT_BANK,      OUT_CUSTNO,    REMARK )
               VALUES ( as_dept,       as_htag,       c_outdt,      v_inseq,
                        c_cust,        c_seq,         c_mdeposit,   c_amt,
                        'B',           '5',           'N',          '',
                        'N',           0,             0,
                        as_user,       v_sysdt,       '',           '',
                        c_vdeposit,    c_outdt,       c_outtm,      c_outseq,
                        c_bank,        '',            '임대료 가상계좌 일괄입금');
               EXCEPTION
                  WHEN OTHERS THEN
                  dbms_output.put_line(sqlerrm);
                  RAISE_APPLICATION_ERROR(-20002, 'INSERT HD_RENT_RENT_INCOME_DAILY ER_07: ' || sqlerrm);
                  ROLLBACK;
                  RETURN;
         END;
         PROC_HD_RENT_RENT_INCOME(c_cust, c_seq, c_outdt, v_inseq);

         v_cnt :=0;
         SELECT COUNT(*)
           INTO v_cnt
           FROM HD_RENT_RENT_INCOME_DAILY
          WHERE DEPT_CODE = as_dept
            AND HOUSETAG  = as_htag
            AND IN_DATE   = c_outdt
            AND IN_SEQ    = v_inseq
            AND TRANS_YN  = 'Y';
      END; END IF;

      IF v_cnt > 0 THEN
         BEGIN
            UPDATE SM_TRANS_CB3_CVS_DATA
               SET PROC_STATUS = '1',
                   ERR_TEXT    = '',
                   CHG_DATE    = v_sysdt,
                   CHG_DUTY_ID = as_user
             WHERE TXDATE      = c_outdt
               AND TXTIME      = c_outtm
               AND JMSEQNO     = c_outseq;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_08: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      ELSE
         BEGIN
            UPDATE SM_TRANS_CB3_CVS_DATA
               SET PROC_STATUS  = '2',
                   ERR_TEXT     = '입금프로시저에서 알수없는 오류가 발생했습니다',
                   CHG_DATE     = v_sysdt,
                   CHG_DUTY_ID  = as_user
             WHERE TXDATE       = c_outdt
               AND TXTIME       = c_outtm
               AND JMSEQNO      = c_outseq;
            EXCEPTION
               WHEN OTHERS THEN
               dbms_output.put_line(sqlerrm);
               RAISE_APPLICATION_ERROR(-20002, 'UPDATE SM_TRANS_CB3_CVS_DATA ER_09: ' || sqlerrm);
               ROLLBACK;
               RETURN;
         END;
      END IF;
   END LOOP;
   CLOSE CURMAKE;

   /*------------------------------------------------------------------------*/
   COMMIT WORK;

   /*------------------------------------------------------------------------*/
   EXCEPTION
        WHEN OTHERS THEN
             ROLLBACK;
             raise_application_error( -20001,  sqlcode || ':' || sqlerrm );
             --dbms_output.put_line(as_dept);
END;
/

